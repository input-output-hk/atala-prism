syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;


// GENERAL
// just an EC public key represented with big integers as strings
// TODO: merge with the node PublicKey
message ConnectorPublicKey {
    string x = 1;
    string y = 2;
}
// Public key ECPoint uncompressed encoded
message EncodedPublicKey {
    bytes publicKey = 1;
}

// Information on an Issuer
message IssuerInfo {
    string DID = 1;
    string name = 2;
    bytes logo = 3;
}

// Information on a Verifier
message VerifierInfo {
    string DID = 1;
    string name = 2;
    bytes logo = 3;
}

// Information on a Holder
message HolderInfo {
    string DID = 1;
    string name = 2;
}

// Type representing generic participant in the system, alternative of IssuerInfo, HolderInfo, or VerifierInfo.
message ParticipantInfo {
    oneof participant {
        IssuerInfo issuer = 1;
        HolderInfo holder = 2;
        VerifierInfo verifier = 3;
    }
}


// CONNECTIONS

// A connection between two parties authorizing
// the use of the connector as a messaging channel.
message Connection {
    // the connection token used to initialize the connection with the wallet
    string connectionToken = 1;
    string connectionId = 2;
}

// Information on the connection; both sides see the same connectionId and creation time, but each sees different participantInfo
message ConnectionInfo {
    string connectionId = 1;
    int64 created = 2; // moment of instantiation as milliseconds since the Unix Epoch
    ParticipantInfo participantInfo = 3; // information about the participant at the other end
    string token = 4; // the token used to generate the connection
}


// MESSAGES

// Message received via a connection
message ReceivedMessage {
    string id = 1;
    int64 received = 2; // time when Connector received the message as milliseconds since the Unix Epoch
    string connectionId = 3; // connection where the message has been received
    bytes message = 4; // raw message
}

// Enumeration representing billing plan of Issuer. Possible values are hardcoded as new billing options would require implementation changes anyway.
enum BillingPlan {
    NO_PLAN = 0; // participant not able to generate connection tokens
    FREE_PLAN = 1; // connections are created for free
    SENDER_PAYS = 2; // side generating the token pays for the connection
    RECEIVER_PAYS = 3; // side receiving the token and using it to instantiate connection pays for it
}

message Payment {
    string id = 1;
    string amount = 2;
    int64 createdOn = 3;
    string status = 4;
    string failureReason = 5;
}
