syntax = "proto3";

package io.iohk.cvp.cmanager;

service CredentialsService {
    rpc Register (RegisterRequest) returns (RegisterResponse) {}
    rpc CreateCredential (CreateCredentialRequest) returns (CreateCredentialResponse) {}
    rpc GetCredentials (GetCredentialsRequest) returns (GetCredentialsResponse) {}
}

service StudentsService {
    rpc CreateStudent (CreateStudentRequest) returns (CreateStudentResponse) {}
    rpc GetStudents (GetStudentsRequest) returns (GetStudentsResponse) {}
    rpc GetStudent (GetStudentRequest) returns (GetStudentResponse) {}
    rpc GetStudentCredentials (GetStudentCredentialsRequest) returns (GetStudentCredentialsResponse) {}

    // Generate a connection token to get connected to a specific student
    rpc GenerateConnectionToken (GenerateConnectionTokenRequest) returns (GenerateConnectionTokenResponse) {}
}

service GroupsService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {}
    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {}
}

message RegisterRequest {
    string name = 1;
    string did = 2;
    bytes logo = 3;
}

message RegisterResponse {
    string issuerId = 1;
}

// The authenticated issuer is creating a credential
message CreateCredentialRequest {
    string studentId = 1;
    string title = 2;
    Date enrollmentDate = 3;
    Date graduationDate = 4;
    string groupName = 5;
}
message CreateCredentialResponse {
    Credential credential = 1;
}

// The authenticated issuer is retrieving its issued credentials
message GetCredentialsRequest {
    int32 limit = 1; // the max amount of credentials to return, must be > 0
    string lastSeenCredentialId = 2; // the last seen credential (if any), the returned credentials start after this one
}
message GetCredentialsResponse {
    repeated Credential credentials = 1;
}

message CreateStudentRequest {
    string universityAssignedId = 1;
    string fullName = 2;
    string email = 3;
    Date admissionDate = 4;
    string groupName = 5;
}
message CreateStudentResponse {
    Student student = 1;
}

message GetStudentsRequest {
    int32 limit = 1; // the max amount of students to return, must be > 0
    string lastSeenStudentId = 2; // the last seen student (if any), the returned students start after this one
    string groupName = 3; // if provided, get only the students that belong to this group
}
message GetStudentsResponse {
    repeated Student students = 1;
}

message GetStudentRequest {
    string studentId = 1;
}
message GetStudentResponse {
    Student student = 1;
}

message GetStudentCredentialsRequest {
    string studentId = 1;
}
message GetStudentCredentialsResponse {
    repeated Credential credential = 1;
}

message GenerateConnectionTokenRequest {
    string studentId = 1; // the student that will be linked to the token
}
message GenerateConnectionTokenResponse {
    string token = 1;
}

message Date {
    int32 year = 1; // positive value
    int32 month = 2; // value in the [1, 12] interval
    int32 day = 3; // value in the [1, 31] interval (depending on the month, the max value might be 28
}

message Credential {
    string id = 1;
    string issuerId = 2;
    string studentId = 3;
    string issuerName = 4;
    string studentName = 5;
    string title = 6;
    Date enrollmentDate = 7;
    Date graduationDate = 8;
    string groupName = 9;
}

message Student {
    string id = 1;
    // When introducing the groupName, the issuerId field was removed
    reserved 2;
    reserved "issuerId";
    string universityAssignedId = 3;
    string fullName = 4;
    string email = 5;
    Date admissionDate = 6;
    StudentConnectionStatus connectionStatus = 7;
    string connectionToken = 8; // present when the status is ConnectionMissing
    string connectionId = 9; // present when the status is ConnectionAccepted
    string groupName = 10;
}

enum StudentConnectionStatus {
    InvitationMissing = 0;
    ConnectionMissing = 1;
    ConnectionAccepted = 2;
    ConnectionRevoked = 3;
}

message CreateGroupRequest {
    string name = 1;
}
message CreateGroupResponse {}

message GetGroupsRequest {}
message GetGroupsResponse {
    repeated Group groups = 1;
}

message Group {
    string name = 1;
}
