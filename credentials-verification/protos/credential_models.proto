syntax = "proto3";

import "common_models.proto";

package io.iohk.prism.protos;

/*
Based on requirements, diplomas need the following information

Universities
- Full name of the institution (Legal form with reference)
- Name of the qualifying / academic authority
- Decision on granting qualification / academic degree
- Issue Number
- Issue Date (day, month, year)
- Name and Surname of Graduate
- Qualified / academic degree awarded
- Additional specialty (if any)
- Name and surname of the head of the institution (Signature)
- Name and surname of persons / persons authorized to sign a diploma (Signature)

Given an example diploma we found a few extra fields present
- Registration number
- Decision number

Notoriously we see that national id number or other graduate date is not
required, only the name is.
We decided to add a SubjectData field with optional extra values for this.

In the case of schools, required information is:
- Name and surname School student
- Student's personal number (if any)
- Students Date of Birth
- Full legal name of Education institution
- Year completed by Student

We see that no signature is mentioned for the school diplomas

Given the schema below both types of certificates can be encoded, the distinction will be found
in IssuerData, where the IssuerType differentiate schools and universities
*/

message AlphaCredential {
    IssuerData issuerType = 1; // Data associated to the issuer organization. Currently University or School
    SubjectData subjectData = 2; // Personal data associated to the holder (student)
    string grantingDecision = 3; // e.g. [subject] was awarded Degree of Master Business Administration in Management
    repeated Signer signingAuthorities = 4; // head and other members of the institution that will sign the diploma
    string degreeAwarded = 5; // Degree name
    string additionalSpeciality = 6; // Optional additional speciality
    Date issuedOn = 7; // Date of issuance

    // Fields that are unclear. They may be updated or even deleted
    string issueNumber = 8; // NEED CLARIFICATION ON WHAT THIS IS
    string registrationNumber = 9; // NEED CLARIFICATION Registration number. This appears in the example diploma but it is unclear how this may relate to "Issue number"
    string decisionNumber = 10; //NEED CLARIFICATION Decision number. This appears in the example diploma but it is unclear how this may relate to "Issue number"
    string yearCompletedByStudent = 15; // WE NEED CLARIFICATIONS ON THIS FIELD. It is related to school diplomas
                                        // It may be replaceable by one of the fields related to OpenCerts. See below

    // Fields inspired from OpenCerts standard. See: https://github.com/OpenCerts/open-certificate/blob/master/schema/2.0/schema.json
    string description = 16; // Field reserved for general description of the credential
    Date expiresOn = 17;
    Date admissionDate = 18; // unclear meaning
    Date graduationDate = 19 ; // (OpenCerts description) The date that this student graduated from the course
    Date attainmentDate = 20 ; // (OpenCerts description) The date that this qualification was awarded to the recipient
    // Other fields we could add:
    /*
    qualificationLevel: (OpenCerts description) "This is an array of objects used to attach descriptors from
                         frameworks such as Singapore's SSEC-EQA or the internationally recognised ISCED. Multiple
                         instances are allowed to indicate either equivalents or to indicate a multi-level qualifications",
                         It consist of tuples of 4 strings
     fieldOfStudy: (OpenCerts description) "This is an array of objects used to attach descriptors from frameworks such
                   as Singapore's SSEC-FOS or the internationally recognised ISCED-F. Multiple instances are allowed to
                   indicate either equivalents or to indicate a multi-field qualification such as double degrees",
                   It consist of tuples of 4 strings
    cumulativeScore: Unclear description, it is a number. Probably applies to course certificates but not to degrees.
    transcript: It seems to consist of an array of data associated to each course that the student took to get the degree.
    additionalData: Unclear field without structure (a simple JSON object). It may be used to add extra data.
    */
}

message IssuerData {
    string issuerLegalName = 1; // Issuer legal name. E.g. "LLC BUSINESS AND TECHNOLOGY UNIVERSITY"
    string academicAuthority = 2; // In university case, this could be the faculty name.
                                  // E.g. Faculty of Business and Technology
    IssuerType issuerType = 3; // Issuer organization type. Currently University or School
    string did = 4; // public DID associated to the institution
    // OpenCerts adds some other data like URL, email, phone
}

message Signer {
    repeated string names = 1; // Names of the signer
    repeated string surnames = 2; // Surnames of the signer
    string role = 3; // Rector, Dean, etc.
    string did = 4; // public DID associated to the signer
    string title = 5; // Tittle to address the person. e.g. Mr, Dr, Prof, etc.
}

// For now Universites and schools.
enum IssuerType {
    University = 0;
    School = 1;
}

message SubjectData {
    repeated string names = 1; // Names of the subject.
    repeated string surnames = 2; // surnames of the subject.
    Date dateOfBirth = 3; // date of birth of the holder
    PersonalId idDocument = 4; // optional identification number of the holder
    // OpenCerts also adds phone, email, URL, studentId and unclear values "nric" and "fin".
}

message PersonalId {
    string id = 1; // unique identifier of the individual according to document type
    IdDocumentType documentType = 2; // E.g. passport, driver licence, national card
}

enum IdDocumentType {
    NationalIdCard = 0;
    Passport = 1;
}

/*
  Below we can see the messages used to exchange credentials between actors
*/
message IssuerSentCredential {
    oneof value {
        AlphaCredential alphaCredential = 1;
        Credential credential = 2;
    }
}

message Credential {
    // type id to enable dispatch to correct credential processor.
    string typeId = 1;

    // JSON or JWT encoded credential document (to discuss)
    string credentialDocument = 2;
}

message HolderSentCredential {
    AlphaCredential credential = 1;
}

message ProofRequest {
    repeated string typeIds = 1;
    string connectionToken = 2;
}

message EncryptedMessage {
    // identifier of the key used to encrypt the message; may be empty if the receiver uses only one key
    string keyId = 1;
    // encrypted content of the message; after decryption it should be deserialized as AtalaMessage instance 
    bytes encryptedContent = 2;
}

message AtalaMessage {
    oneof message {
        IssuerSentCredential issuerSentCredential = 1;
        HolderSentCredential holderSentCredential = 2;
        ProofRequest proofRequest = 3;
        EncryptedMessage encryptedMessage = 4;
    }
}
