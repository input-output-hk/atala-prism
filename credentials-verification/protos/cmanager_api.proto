syntax = "proto3";

package io.iohk.prism.protos;

import "cmanager_models.proto";
import "common_models.proto";
import "node_models.proto";

service CredentialsService {
    rpc CreateCredential (CreateCredentialRequest) returns (CreateCredentialResponse) {}
    rpc GetCredentials (GetCredentialsRequest) returns (GetCredentialsResponse) {}

    // Generic versions
    rpc CreateGenericCredential (CreateGenericCredentialRequest) returns (CreateGenericCredentialResponse) {}
    rpc GetGenericCredentials (GetGenericCredentialsRequest) returns (GetGenericCredentialsResponse) {}

    // Publish an encoded signed credential into the blockchain
    rpc PublishCredential (PublishCredentialRequest) returns (PublishCredentialResponse) {}
}

service StudentsService {
    rpc CreateStudent (CreateStudentRequest) returns (CreateStudentResponse) {}
    rpc GetStudents (GetStudentsRequest) returns (GetStudentsResponse) {}
    rpc GetStudent (GetStudentRequest) returns (GetStudentResponse) {}
    rpc GetStudentCredentials (GetStudentCredentialsRequest) returns (GetStudentCredentialsResponse) {}

    // Generate a connection token to get connected to a specific student
    rpc GenerateConnectionTokenForStudent (GenerateConnectionTokenForStudentRequest) returns (GenerateConnectionTokenForStudentResponse) {}
}

service SubjectsService {
    rpc CreateSubject (CreateSubjectRequest) returns (CreateSubjectResponse) {}
    rpc GetSubjects (GetSubjectsRequest) returns (GetSubjectsResponse) {}
    rpc GetSubject (GetSubjectRequest) returns (GetSubjectResponse) {}
    rpc GetSubjectCredentials (GetSubjectCredentialsRequest) returns (GetSubjectCredentialsResponse) {}

    // Generate a connection token to get connected to a specific subject
    rpc GenerateConnectionTokenForSubject (GenerateConnectionTokenForSubjectRequest) returns (GenerateConnectionTokenForSubjectResponse) {}
}

service GroupsService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {}
    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {}
}

// The authenticated issuer is creating a credential
message CreateCredentialRequest {
    string studentId = 1;
    string title = 2;
    Date enrollmentDate = 3;
    Date graduationDate = 4;
    string groupName = 5;
}
message CreateCredentialResponse {
    CManagerCredential credential = 1;
}

// The authenticated issuer is retrieving its issued credentials
message GetCredentialsRequest {
    int32 limit = 1; // the max amount of credentials to return, must be > 0
    string lastSeenCredentialId = 2; // the last seen credential (if any), the returned credentials start after this one
}
message GetCredentialsResponse {
    repeated CManagerCredential credentials = 1;
}

message CreateStudentRequest {
    string universityAssignedId = 1;
    string fullName = 2;
    string email = 3;
    Date admissionDate = 4;
    string groupName = 5;
}
message CreateStudentResponse {
    Student student = 1;
}

message GetStudentsRequest {
    int32 limit = 1; // the max amount of students to return, must be > 0
    string lastSeenStudentId = 2; // the last seen student (if any), the returned students start after this one
    string groupName = 3; // if provided, get only the students that belong to this group
}
message GetStudentsResponse {
    repeated Student students = 1;
}

message GetStudentRequest {
    string studentId = 1;
}
message GetStudentResponse {
    Student student = 1;
}

message GetStudentCredentialsRequest {
    string studentId = 1;
}
message GetStudentCredentialsResponse {
    repeated CManagerCredential credential = 1;
}

message GenerateConnectionTokenForStudentRequest {
    string studentId = 1; // the student that will be linked to the token
}
message GenerateConnectionTokenForStudentResponse {
    string token = 1;
}

// subjects
message CreateSubjectRequest {
    string groupName = 1;
    string jsonData = 2;
    string externalId = 3; // The id provided by the issuer at subject creation time
                           // An issuer cannot have two subjects with the same external id
                           // The id could be repeated in different issuers
}
message CreateSubjectResponse {
    IssuerSubject subject = 1;
}

message GetSubjectsRequest {
    int32 limit = 1; // the max amount of subjects to return, must be > 0
    string lastSeenSubjectId = 2; // the last seen subject (if any), the returned subjects start after this one
    string groupName = 3; // if provided, get only the subjects that belong to this group
}
message GetSubjectsResponse {
    repeated IssuerSubject subjects = 1;
}

message GetSubjectRequest {
    string subjectId = 1;
}
message GetSubjectResponse {
    IssuerSubject subject = 1;
}

message GetSubjectCredentialsRequest {
    string subjectId = 1;
}
message GetSubjectCredentialsResponse {
    repeated CManagerGenericCredential genericCredentials = 1;
}

message GenerateConnectionTokenForSubjectRequest {
    string subjectId = 1; // the subject that will be linked to the token
}
message GenerateConnectionTokenForSubjectResponse {
    string token = 1;
}


// groups
message CreateGroupRequest {
    string name = 1;
}
message CreateGroupResponse {}

message GetGroupsRequest {}
message GetGroupsResponse {
    repeated Group groups = 1;
}

// generic credentials
// The authenticated issuer is creating a credential
message CreateGenericCredentialRequest {
    string subjectId = 1; // required if the externalId isn't provided, otherwise, ignored.
    string credentialData = 2;
    string groupName = 3;
    string externalId = 4; // The id provided by the issuer at subject creation time, when this isn't provided,
                           // the subjectId is expected.
}
message CreateGenericCredentialResponse {
    CManagerGenericCredential genericCredential = 1;
}

// The authenticated issuer is retrieving its issued credentials
message GetGenericCredentialsRequest {
    int32 limit = 1; // the max amount of credentials to return, must be > 0
    string lastSeenCredentialId = 2; // the last seen credential (if any), the returned credentials start after this one
}
message GetGenericCredentialsResponse {
    repeated CManagerGenericCredential credentials = 1;
}

message PublishCredentialRequest {
    string encodedSignedCredential = 1; // the encoded credential to publish
    string cmanagerCredentialId = 2; // cmanager internal credential id
    SignedAtalaOperation issueCredentialOperation = 3; // a signed instance of IssueCredential operation
    string nodeCredentialId = 4; // the credentialId computed by the protocol
    bytes operationHash = 5;  // the hash of the AtalaOperation sent inside the
                              // SignedAtalaOperation represented by the issueCredential
                              // field. This is needed for revocation as it represents
                              // the previous operation hash
}

message PublishCredentialResponse {
    TransactionInfo transactionInfo = 1;
}
