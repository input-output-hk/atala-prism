syntax = "proto3";

package io.iohk.atala.prism.protos;

import "cstore_models.proto";

service CredentialsStoreService {

  rpc CreateIndividual (CreateIndividualRequest) returns (CreateIndividualResponse) {}
  rpc GetIndividuals (GetIndividualsRequest) returns (GetIndividualsResponse) {}
  rpc GenerateConnectionTokenFor(GenerateConnectionTokenForRequest) returns (GenerateConnectionTokenForResponse) {}
  rpc StoreCredential (StoreCredentialRequest) returns (StoreCredentialResponse) {}
  rpc GetStoredCredentialsFor (GetStoredCredentialsForRequest) returns (GetStoredCredentialsForResponse) {}

  // Generic versions
  rpc CreateHolder (CreateHolderRequest) returns (CreateHolderResponse) {}
  rpc GetHolders (GetHoldersRequest) returns (GetHoldersResponse) {}
}

message CreateIndividualRequest {
  string fullName = 1;
  string email = 2;
}

message CreateIndividualResponse {
  Individual individual = 1;
}

message GenerateConnectionTokenForRequest {
  // TODO: Rename to `holderId` after removing legacy methods
  string individualId = 1;
}

message GetIndividualsRequest {
  int32 limit = 1;
  string lastSeenIndividualId = 2;
}

message GetIndividualsResponse {
  repeated Individual individuals = 1;
}

message GenerateConnectionTokenForResponse {
  string token = 1;
}

message StoreCredentialRequest {
  string connectionId = 1; // connection id retrieved from the connector message that carried the credential
  string encodedSignedCredential = 2; // the encoded signed data
}

message StoreCredentialResponse {
}

message GetStoredCredentialsForRequest {
  // TODO: Rename to `holderId` after removing legacy methods
  string individualId = 1;
}

message GetStoredCredentialsForResponse {
  repeated StoredSignedCredential credentials = 1;
}

// Generic versions
message CreateHolderRequest {
  string jsonData = 1;
}

message CreateHolderResponse {
  VerifierHolder holder = 1;
}

message GetHoldersRequest {
  int32 limit = 1;
  string lastSeenHolderId = 2;
}

message GetHoldersResponse {
  repeated VerifierHolder holders = 1;
}
