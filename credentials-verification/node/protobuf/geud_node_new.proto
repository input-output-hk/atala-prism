syntax = "proto3";

package io.iohk.nodenew;

service NodeService {
  rpc GetDidDocument(GetDidDocumentRequest) returns (GetDidDocumentResponse) {}

  rpc CreateDID(SignedAtalaOperation) returns (CreateDIDResponse) {}

  rpc IssueCredential(SignedAtalaOperation) returns (IssueCredentialResponse) {}

  rpc RevokeCredential(SignedAtalaOperation) returns (RevokeCredentialResponse) {}
}

message Date {
    int32 year = 1; // positive value
    int32 month = 2; // value in the [1, 12] interval
    int32 day = 3; // value in the [1, 31] interval (depending on the month, the max value might be 28
}

enum KeyUsage {
  UNKNOWN_KEY = 0;
  MASTER_KEY = 1;
  ISSUING_KEY = 2;
  COMMUNICATION_KEY = 3;
  AUTHENTICATION_KEY = 4;
}

message ECKeyData {
  string curve = 1;
  bytes x = 2;
  bytes y = 3;
}

message PublicKey {
  string id = 1;
  KeyUsage usage = 2;
  oneof keyData {
    ECKeyData ecKeyData = 8;
  };
}

message DIDData {
  string id = 1; // DID suffix, where DID is in form did:atala:[DID suffix]
  repeated PublicKey publicKeys = 2;
}

message CredentialData {
  string id = 1;
  string issuer = 2;
  bytes contentHash = 3;
  Date issuanceDate = 4;
}

message GetDidDocumentRequest {
  string did = 1;
}

message GetDidDocumentResponse {
  DIDData document = 1;
}

message CreateDIDOperation {
  DIDData didData = 1; // DIDData with did empty id field
}

message CreateDIDResponse {
  string id = 1; // DID suffix, where DID is in form did:atala:[DID suffix]
}

message AddKeyAction {
  PublicKey key = 1;
}

message RemoveKeyAction {
  string keyId = 1;
}

message UpdateDIDAction {
  oneof action {
    AddKeyAction addKey = 1;
    RemoveKeyAction removeKey = 2;
  }
}

message UpdateDIDOperation {
  string id = 1;
  repeated UpdateDIDAction actions = 2;
}

message UpdateDIDResponse {
}

message IssueCredentialOperation {
  CredentialData credentialData = 1; // credential data with id empty
}

message IssueCredentialResponse {
  string id = 1; // credential id
}

message RevokeCredentialOperation {
  bytes previousOperationHash = 1;
  string credentialId = 2; // revoked credential id, as returned in IssueCredentialResponse
  Date revocationDate = 3;
}

message RevokeCredentialResponse {
}

message AtalaOperation {
  oneof operation {
    CreateDIDOperation createDid = 1;
    UpdateDIDOperation updateDid = 2;
    IssueCredentialOperation issueCredential = 3;
    RevokeCredentialOperation revokeCredential = 4;
  };
}

message SignedAtalaOperation {
  string signedWith = 1; // id of key used to sign
  bytes signature = 2; // signature of byte encoding of the operation
  AtalaOperation operation = 3;
}
