syntax = "proto3";

package io.iohk.cvp.wallet;

import "geud_node_new.proto";

// While the binary representation is adequate, JavaScript has problems parsing big integers from bytes,
// it is simpler to leave the big integer as string.
message BigInteger {
    string value = 1;
}

message ECPrivateKey {
    BigInteger d = 1;
}

message ECPublicKey {
    BigInteger x = 1;
    BigInteger y = 2;
}

message KeyPair {
    string id = 1;
    io.iohk.nodenew.KeyUsage usage = 2;
    ECPrivateKey privateKey = 3;
    ECPublicKey publicKey = 4;
}

message WalletData {
    repeated KeyPair keyPair = 1;
    string did = 2; // For now, the DID string is enough, this will change in the future when a DID is standardized over the project
    string organisationName = 4;
    Role role = 5;
    bytes logo = 6;
}

service WalletService {
    // Get the wallet's DID, for now, there is a single DID.
    rpc GetDID (GetDIDRequest) returns (GetDIDResponse) {}

    // Given a message, sign it using the only existing key
    rpc SignMessage (SignMessageRequest) returns (SignMessageResponse) {}

    // given a signed message, verify that the signature corresponds to the given key
    rpc VerifySignedMessage (VerifySignedMessageRequest) returns (VerifySignedMessageResponse) {}

    // Creates a new wallet
    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse) {}

    // Get wallet status
    rpc GetWalletStatus(GetWalletStatusRequest) returns (GetWalletStatusResponse) {}

    // Unlock wallet
    rpc unlockWallet(UnlockWalletRequest) returns (UnlockWalletResponse) {}

    // Lock  wallet
    rpc lockWallet(LockWalletRequest) returns (LockWalletResponse) {}

    // change pass phrase  wallet
    rpc changePassphrase(ChangePassphraseRequest) returns (ChangePassphraseResponse) {}

    // Generate DID Registration request
    rpc GenerateDID(GenerateDIDRequest) returns (GenerateDIDResponse) {}

}

message GetDIDRequest {}

message GetDIDResponse {
    string did = 1;
}

message SignMessageRequest {
    bytes message = 1;
}

message SignMessageResponse {
    bytes signature = 1;
}

message VerifySignedMessageRequest {
    ECPublicKey publicKey = 1;
    bytes message = 2;
    bytes signature = 3;
}

message VerifySignedMessageResponse {
    bool verified = 1;
}


enum Role {
    Issuer = 0;
    Verifier = 1;
}

message CreateWalletRequest {
    string passphrase = 1;
    string organisationName = 2;
    Role role = 3;
    bytes logo = 4;
}

message CreateWalletResponse {
    io.iohk.nodenew.SignedAtalaOperation operation = 1;
}

message GetWalletStatusRequest {}

message GetWalletStatusResponse {
    enum WalletStatus {
        Missing = 0;
        Unlocked = 1;
        Locked = 2;
    }
    WalletStatus status = 1;
}

message UnlockWalletRequest {
    string passphrase = 1;
}

message UnlockWalletResponse {
    string organisationName = 4;
    Role role = 5;
    bytes logo = 6;
}

message LockWalletRequest {}

message LockWalletResponse {}

message ChangePassphraseRequest {
    string currentPassphrase = 1;
    string newPassphrase = 2;
}

message ChangePassphraseResponse {}

message GenerateDIDRequest {}

message GenerateDIDResponse {
    io.iohk.nodenew.SignedAtalaOperation operation = 1;
}