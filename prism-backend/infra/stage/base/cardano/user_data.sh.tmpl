#!/bin/bash
set -exv

# Add team SSH keys
cat << EOF >> /home/ubuntu/.ssh/authorized_keys
${authorized_keys}
EOF

chown ubuntu /home/ubuntu/.ssh/authorized_keys
chmod 600 /home/ubuntu/.ssh/authorized_keys

# Install docker and docker-compose

apt update
apt -y install apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable'
apt update

apt -y install docker-ce docker-compose awscli

# Read metadata
IR="$(curl -s http://169.254.169.254/latest/meta-data/placement/region)"
EC2_INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
EC2_INSTANCE_TYPE="$(curl -s http://169.254.169.254/latest/meta-data/instance-type)"

# Vars
disc="sdh"
label="cardano"
dir="/data"

# wait until block device is attached
DATA_STATE="unknown"
  until [ "$${DATA_STATE}" == "attached" ]; do
    DATA_STATE="$(aws ec2 describe-volumes \
              --region $${IR} \
              --filters \
              Name=attachment.instance-id,Values="$${EC2_INSTANCE_ID}" \
              Name=attachment.device,Values=/dev/"$${disc}" \
              --query Volumes[].Attachments[].State \
              --output text)"
    sleep 5
  done

 mkdir -p $${dir}

if [[ "$${EC2_INSTANCE_TYPE}" =~ t3|t4|c5|c6|m5|m6|r5|r6 ]]; then
  VOLUME_ID="$(aws ec2 describe-volumes --region $${IR} --filters Name=attachment.instance-id,Values="$${EC2_INSTANCE_ID}" Name=attachment.device,Values=/dev/$${disc} --query Volumes[].VolumeId --output text)"
  VOLUME_SERIAL="$(echo $VOLUME_ID | sed -e 's/-//g')"
  disc="$(lsblk -o NAME,SERIAL | grep -e $VOLUME_SERIAL | awk '{ print $1 }')"
fi

device="$(readlink -f /dev/"$${disc}")"

blkid $${device} || mkfs.ext4 $${device}
e2label $${device} $${label}
sed  -e "/^[\/][^ \t]*[ \t]*$${label}[ \t]/d" /etc/fstab
grep -q ^LABEL=$${label} /etc/fstab || echo "LABEL=$${label} $${dir} ext4 defaults" >> /etc/fstab
grep -q "^$${device} "$${dir}" " /proc/mounts || mount "$${dir}"

# Docker compose
mkdir /cardano
cd /cardano

cat << EOF > docker-compose.yml
${docker_compose_yml}
EOF

mkdir -p secrets
echo '${postgres_db}' > secrets/postgres_db
echo '${postgres_user}' > secrets/postgres_user
echo '${postgres_password}' > secrets/postgres_password

git clone https://github.com/input-output-hk/cardano-node

mkdir -p /data/cardano-data/node-db /data/cardano-data/node-ipc /data/cardano-data/postgres /data/cardano-data/wallet-db

cat << EOF >> /etc/systemd/system/cardano.service
[Unit]
Description=docker-compose %i service
Requires=docker.service network-online.target
After=docker.service network-online.target

[Service]
WorkingDirectory=/cardano
Type=simple
TimeoutStartSec=15min
Restart=always

ExecStartPre=/usr/bin/docker-compose pull --quiet --ignore-pull-failures
ExecStartPre=/usr/bin/docker-compose build --pull

ExecStart=/usr/bin/docker-compose up --remove-orphans

ExecStop=/usr/bin/docker-compose down --remove-orphans

ExecReload=/usr/bin/docker-compose pull --quiet --ignore-pull-failures
ExecReload=/usr/bin/docker-compose build --pull

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl start cardano
systemctl enable cardano

# Prometheus node exporter

useradd --no-create-home --shell /bin/false node_exporter

wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
tar -xf node_exporter-0.17.0.linux-amd64.tar.gz
cp node_exporter-0.17.0.linux-amd64/node_exporter /usr/local/bin
chown node_exporter:node_exporter /usr/local/bin/node_exporter
rm -rf node_exporter-0.17.0.linux-amd64*

cat << EOF >> /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable node_exporter
systemctl start node_exporter
