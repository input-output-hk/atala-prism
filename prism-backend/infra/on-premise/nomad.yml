---
- hosts: nomad
  vars:
    - nomad_version: 1.1.2
    - nomad_zip_filename: nomad.zip
    - nomad_installation_directory: /usr/local/bin
    - nomad_config_directory: /etc/nomad.d
    - nomad_data_directory: /opt/nomad
    - nomad_expected_servers: "{{ groups['nomad_servers'] | length }}"
    - nomad_datacenter: dc1
    # Lists all server ip addresses separated by comma, like: ip1, ip2, ip3
    # Ideally, we should be able to filter out the ip from the host being deployed.
    - nomad_servers_ip_addresses: "{{ groups['nomad_servers'] | map('extract', hostvars, ['ansible_host']) | map('to_json') | join(', ') }}"
    # aws cli
    - awscli_download_url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
    - awscli_zip_filename: awscli.zip
    - docker_credential_ecr_login_download_url: "https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/0.5.0/linux-amd64/docker-credential-ecr-login"
    - docker_credential_ecr_login_checksum: sha1:45f83edf517f0cc317a3f734abd254a79e306aa2
    - host_public_ipv4_address: "{{ hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}"
  tasks:
    - name: Make sure we can form a proper server cluster
      fail:
        msg: "The server cluster needs 3 or 5 servers, or 1 for test environments but {{ nomad_expected_servers }} found"
      when: (nomad_expected_servers != "1" and nomad_expected_servers != "3" and nomad_expected_servers != "5")

    - name: Install unzip
      become: yes
      apt:
        name: unzip
        state: latest
        update_cache: yes

    - name: Download nomad
      get_url:
        url="https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version }}_linux_amd64.zip"
        dest="{{ ansible_env.HOME }}/{{ nomad_zip_filename }}"
        checksum="sha256:https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version }}_SHA256SUMS"

    - name: Unzip nomad
      become: yes
      unarchive:
        remote_src: yes
        src: "{{ ansible_env.HOME }}/{{ nomad_zip_filename }}"
        dest: "{{ nomad_installation_directory }}"

    - name: Create nomad data directory
      become: yes
      file:
        path: "{{ nomad_data_directory }}"
        state: directory

    - name: Create nomad config directory
      become: yes
      file:
        path: "{{ nomad_config_directory }}"
        state: directory
        mode: "700"

    - name: Copy the systemd config
      become: yes
      template:
        src: config/systemd/nomad.service.j2
        dest: /etc/systemd/system/nomad.service

    - name: Copy the nomad config
      become: yes
      template:
        src: config/nomad/nomad.hcl.j2
        dest: "{{ nomad_config_directory }}/nomad.hcl"

    - name: Copy the nomad server config
      become: yes
      template:
        src: config/nomad/server.hcl.j2
        dest: "{{ nomad_config_directory }}/server.hcl"
      when: nomad_mode == "server"

    - name: Copy the nomad client config
      become: yes
      template:
        src: config/nomad/client.hcl.j2
        dest: "{{ nomad_config_directory }}/client.hcl"
      when: nomad_mode == "client"

    # clients require storage volumes for stateful workloads
    ## TODO: Use variable
    - name: Create postgres node data directory
      become: yes
      file:
        path: /opt/postgres/node
        state: directory
      when: nomad_mode == "client"

    - name: Enable nomad to run on system startup
      become: yes
      systemd:
        name: nomad
        enabled: yes

    # TODO: Do not restart nomad unless it is necessary
    - name: Restart nomad servers
      become: yes
      service:
        name: nomad
        daemon_reload: yes
        state: restarted
      when: nomad_mode == "server"

    # TODO: Install CNI plugins
    # see: https://www.nomadproject.io/docs/integrations/consul-connect#cni-plugins
    #
    # TODO: add "$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)" to not depend in amd64
    - name: Add drivers to let container traffic through the bridge network
      become: yes
      shell:
        cmd: |
          curl -L -o cni-plugins.tgz "https://github.com/containernetworking/plugins/releases/download/v0.9.0/cni-plugins-linux-amd64-v0.9.0.tgz"
          mkdir -p /opt/cni/bin
          tar -C /opt/cni/bin -xzf cni-plugins.tgz
      args:
        warn: no
      when: nomad_mode == "client"

    - name: Allow container traffic through the bridge network (on system startup)
      become: yes
      copy:
        src: config/sysctl.d/local.conf
        dest: /etc/sysctl.d/local.conf
      when: nomad_mode == "client"

    - name: Enable the br_netfilter kernel module (necessary to get /proc/sys/net/bridge)
      become: yes
      modprobe:
        name: br_netfilter
        state: present
      when: nomad_mode == "client"

    - name: Allow container traffic through the bridge network on system (now)
      become: yes
      shell:
        cmd: |
          echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables
          echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
          echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
      args:
        warn: no
      when: nomad_mode == "client"

    # clients will require docker to run containers
    - name: Install docker dependencies
      become: yes
      apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release']
        state: latest
        update_cache: yes
      when: nomad_mode == "client"

    - name: Add Docker GPG apt Key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: nomad_mode == "client"

    - name: Add Docker Repository
      become: yes
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable
        state: present
      when: nomad_mode == "client"

    - name: Install docker
      become: yes
      apt:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: latest
        update_cache: yes
      when: nomad_mode == "client"

    # add aws to be able to set pull docker images from aws ecr
    - name: Check if the aws zip file exists
      stat:
        path: "{{ ansible_env.HOME }}/{{ awscli_zip_filename }}"
      register: awscli_zip_stat

    # NOTE: aws doesn't keep the version fixed, making checksums useless, instead we check whether the zip exists
    - name: Download awscli
      get_url:
        url="{{ awscli_download_url }}"
        dest="{{ ansible_env.HOME }}/{{ awscli_zip_filename }}"
      when: (nomad_mode == "client" and awscli_zip_stat.stat.exists == false)

    - name: Unzip awscli
      become: yes
      unarchive:
        remote_src: yes
        src: "{{ ansible_env.HOME }}/{{ awscli_zip_filename }}"
        dest: "{{ ansible_env.HOME }}"
      when: nomad_mode == "client"

    - name: Install awscli
      become: yes
      shell: "{{ ansible_env.HOME }}/aws/install --update"
      args:
        warn: no
      when: nomad_mode == "client"

    - name: Create aws config directory
      become: yes
      file:
        path: /root/.aws
        state: directory
      when: nomad_mode == "client"

    # TODO: Pick region from a variable
    # TODO: Pick the root home automatically
    - name: Copy the aws config
      become: yes
      copy:
        src: config/aws/config
        dest: /root/.aws/config
      when: nomad_mode == "client"

#    # TODO: Encrypt credentials
    - name: Copy the aws credentials
      become: yes
      copy:
        src: config/aws/credentials
        dest: /root/.aws/credentials
      when: nomad_mode == "client"

    - name: Download docker-credential-ecr-login
      become: yes
      get_url:
        url="{{ docker_credential_ecr_login_download_url }}"
        dest="/usr/bin/docker-credential-ecr-login"
        checksum="{{ docker_credential_ecr_login_checksum }}"
        mode=a+x

    # TODO: Do not restart nomad unless it is necessary
    - name: Restart nomad clients
      become: yes
      service:
        name: nomad
        daemon_reload: yes
        state: restarted
      when: nomad_mode == "client"
