---
- hosts: nomad
  vars:
    - consul_version: 1.9.5
    - consul_zip_checksum: sha1:5fce07e1eb4c554a27ac16c49986739aa8a77dba
    - consul_zip_filename: consul.zip
    - consul_installation_directory: /usr/local/bin
    - consul_config_directory: /etc/consul.d
    - consul_data_directory: /opt/consul
    - consul_running_user: consul
    - consul_running_group: consul
    - consul_expected_servers: "{{ groups['nomad_servers'] | length }}"
    - consul_datacenter: dc1
    # Lists all server ip addresses separated by comma, like: ip1, ip2, ip3
    # Ideally, we should be able to filter out the ip from the host being deployed.
    - consul_servers_ip_addresses: "{{ groups['nomad_servers'] | map('extract', hostvars, ['ansible_host']) | map('to_json') | join(', ') }}"
    - host_public_ipv4_address: "{{ hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}"
  tasks:
    - name: Make sure we can form a proper server cluster
      fail:
        msg: "The server cluster needs 3 or 5 servers, or 1 for test environments but {{ consul_expected_servers }} found"
      when: (consul_expected_servers != "1" and consul_expected_servers != "3" and consul_expected_servers != "5")

    - name: Install unzip
      become: yes
      apt:
        name: unzip
        state: latest
        update_cache: yes

    - name: Download consul
      get_url:
        url="https://releases.hashicorp.com/consul/{{ consul_version }}/consul_{{ consul_version }}_linux_amd64.zip"
        dest="{{ ansible_env.HOME }}/{{ consul_zip_filename }}"
        checksum="{{ consul_zip_checksum }}"

    - name: Unzip consul
      become: yes
      unarchive:
        remote_src: yes
        src: "{{ ansible_env.HOME }}/{{ consul_zip_filename }}"
        dest: "{{ consul_installation_directory }}"

    - name: Create the group for running consul
      become: yes
      group:
        name: "{{ consul_running_group }}"
        state: present

    - name: Create the user for running consul
      become: yes
      user:
        name: "{{ consul_running_user }}"
        group: "{{ consul_running_group }}"
        state: present
        system: yes
        home: "{{ consul_config_directory }}"
        shell: "/bin/false"

    - name: Create consul data directory
      become: yes
      file:
        path: "{{ consul_data_directory }}"
        state: directory
        owner: "{{ consul_running_user }}"
        group: "{{ consul_running_group }}"

    - name: Create consul config directory
      become: yes
      file:
        path: "{{ consul_config_directory }}"
        state: directory
        mode: "700"
        owner: "{{ consul_running_user }}"
        group: "{{ consul_running_group }}"

    - name: Copy the consul config
      become: yes
      template:
        src: config/consul/consul.hcl.j2
        dest: "{{ consul_config_directory }}/consul.hcl"
        owner: "{{ consul_running_user }}"
        group: "{{ consul_running_group }}"
        mode: "640"

    - name: Copy the consul server config
      become: yes
      template:
        src: config/consul/server.hcl.j2
        dest: "{{ consul_config_directory }}/server.hcl"
        owner: "{{ consul_running_user }}"
        group: "{{ consul_running_group }}"
        mode: "640"
      when: nomad_mode == "server" # TODO: Rename

    - name: Copy the systemd config
      become: yes
      template:
        src: config/systemd/consul.service.j2
        dest: /etc/systemd/system/consul.service

    - name: Copy the consul client config
      become: yes
      template:
        src: config/consul/client.hcl.j2
        dest: "{{ consul_config_directory }}/client.hcl"
      when: nomad_mode == "client" # TODO: Rename

    - name: Enable consul to run on system startup
      become: yes
      systemd:
        name: consul
        enabled: yes

    # TODO: Do not restart consul unless it is necessary
    - name: Restart consul
      become: yes
      service:
        name: consul
        daemon_reload: yes
        state: restarted
