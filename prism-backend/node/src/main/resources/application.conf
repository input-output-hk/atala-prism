db {
  host = "localhost:5432"
  database = "node_db"
  username = "postgres"
  password = "postgres"

  host = ${?NODE_PSQL_HOST}
  database = ${?NODE_PSQL_DATABASE}
  username = ${?NODE_PSQL_USERNAME}
  password = ${?NODE_PSQL_PASSWORD}

  awaitConnectionThreads = 8
  awaitConnectionThreads = ${?NODE_PSQL_AWAIT_CONNECTION_THREADS}

  url = "jdbc:postgresql://"${db.host}"/"${db.database}
}

# Content Addressable Storage to use
# possible options: in-memory, filesystem, s3
storage = "in-memory"
storage = ${?NODE_STORAGE}

s3 {
  bucket = ${?NODE_S3_REGION}
  bucket = ${?NODE_S3_BUCKET}
  keyPrefix = ${?NODE_S3_KEY_PREFIX}
}

# Ledger, options: bitcoin, cardano, in-memory
ledger = "in-memory"
ledger = ${?NODE_LEDGER}

# Time to wait on a pending transaction before it's retried
ledgerPendingTransactionTimeout = "12m"

# Time period between transaction submission retries
transactionRetryPeriod = "20s"

# Time period between transaction submissions
operationSubmissionPeriod = "20s"

# Maximum number of transactions cardano-wallet can work with
transactionsPerSecond = 8

# CardanoLedgerService
cardano {
  # Network connecting to, options: testnet, mainnet
  network = "testnet"
  network = ${?NODE_CARDANO_NETWORK}
  # ID (hex encoded) of the wallet to use for payments
  walletId = ${?NODE_CARDANO_WALLET_ID}
  # Spending passphrase of `walletId`
  walletPassphrase = ${?NODE_CARDANO_WALLET_PASSPHRASE}
  # Address (hex encoded) to make payments to (owned by Atala Prism, could be from `walletId` itself)
  paymentAddress = ${?NODE_CARDANO_PAYMENT_ADDRESS}

  # CardanoWalletApiClient
  wallet {
    host = "localhost"
    port = 8090

    host = ${?NODE_CARDANO_WALLET_API_HOST}
    port = ${?NODE_CARDANO_WALLET_API_PORT}

    routingHeader = ${?NODE_CARDANO_WALLET_ROUTING_HEADER}
  }

  # First block to sync
  blockNumberSyncStart = 1868381
  blockNumberSyncStart = ${?NODE_CARDANO_PRISM_GENESIS_BLOCK}

  # Number of blocks to wait to confirm transactions
  blockConfirmationsToWait = 31
  blockConfirmationsToWait = ${?NODE_CARDANO_CONFIRMATION_BLOCKS}

  # CardanoDbSyncClient
  dbSync {
    db {
      host = "localhost:5433"
      database = "cexplorer"
      username = "postgres"
      password = "password"

      host = ${?NODE_CARDANO_DB_SYNC_HOST}
      database = ${?NODE_CARDANO_DB_SYNC_DATABASE}
      username = ${?NODE_CARDANO_DB_SYNC_USERNAME}
      password = ${?NODE_CARDANO_DB_SYNC_PASSWORD}

      awaitConnectionThreads = 8

      url = "jdbc:postgresql://"${cardano.dbSync.db.host}"/"${cardano.dbSync.db.database}
    }
  }
}

##### Third-party config #####

# Set Kamon's Prometheus endpoint to be localhost:9095/metrics
kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
    port = "9095"
    port = ${?PROMETHEUS_PORT}
  }
}
kamon.metric.tick-interval = 15 seconds
# Disable akka-http instrumentation as it's not a dependency
kanela.modules.akka-http.enabled=false
