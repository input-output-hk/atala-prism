db {
  host = "localhost:5432"
  database = "node_db"
  username = "postgres"
  password = "postgres"

  host = ${?NODE_PSQL_HOST}
  database = ${?NODE_PSQL_DATABASE}
  username = ${?NODE_PSQL_USERNAME}
  password = ${?NODE_PSQL_PASSWORD}

  awaitConnectionThreads = 8
  awaitConnectionThreads = ${?NODE_PSQL_AWAIT_CONNECTION_THREADS}

  url = "jdbc:postgresql://"${db.host}"/"${db.database}
}

# Content Addressable Storage to use
# possible options: in-memory, filesystem, s3
storage = "in-memory"
storage = ${?NODE_STORAGE}

s3 {
  bucket = ${?NODE_S3_REGION}
  bucket = ${?NODE_S3_BUCKET}
  keyPrefix = ${?NODE_S3_KEY_PREFIX}
}

# Ledger, options: bitcoin, cardano, in-memory
ledger = "in-memory"
ledger = ${?NODE_LEDGER}

# Time period between refreshing transaction statuses and submitting pending operations
refreshAndSubmitPeriod = "20s"
refreshAndSubmitPeriod = ${?NODE_REFRESH_AND_SUBMIT_PERIOD}

# Time period between making scheduled operations ready for submissions
moveScheduledToPendingPeriod = "15s"
moveScheduledToPendingPeriod = ${?NODE_MOVE_SCHEDULED_TO_PENDING_PERIOD}

# Maximum number of transactions cardano-wallet can work with
transactionsPerSecond = 10
transactionsPerSecond = ${?NODE_WALLET_MAX_TPS}

# Maximum number of public keys Node API can create/update/get per request to a DID
didPublicKeysLimit = 50
didPublicKeysLimit = ${?NODE_DID_PUBLIC_KEYS_LIMIT}

# IOHK DID suffix which will post protocol updates
# This value is random now, should be updated when we actually generate IOHK DID
trustedProposerSuffix = "7476322b05901e9ebfb1ffa2bdfcfc819549f757474f0278ca4bb9d182a553db"
trustedProposerSuffix = ${?TRUSTED_PROPOSER_SUFFIX}

nodeExplorer {
  whitelistDids = [
    "did:prism:106c458b95e57e16cbbd4b9566a52446c39949fdbd8cd8f876230ff243cf7b5a:Cj8KPRI7CgdtYXN0ZXIwEAFKLgoJc2VjcDI1NmsxEiEDVw1B_oShVvJ11AlVhLYv7OBO9sY9AOz8D5FoWoqI14c"
  ]
  whitelistDids += ${?NODE_EXPLORER_WHITELIST_DID}
}

api {
    authTokens = [
    "ShVvJ11AlVhLYv7OBO9sY9AOz8D5FoWo",
    "TVjoJ4yXVFjrI1c6T6J1kSuQUxk9s7fI",
    "deNADa2y8Zxk34uyJQpmVG0ToWmweytV",
    "HV396mUEeLcOxwm2flUlmKFD3LJQS3oB",
    "k8zyNbGZyKeVeHaXxv3rW3AWWfFP60Yw",
    "fpGmZeRVswt2KHL4EWQPzuoYvWjALQH6",
    "Y82qhBN9oCNltqDQjqFD8xO3E7hrCpGh",
    "c3fMgQwjrB1QfmTJ3S2o4fdFH0g8xt1O",
    "YtC34xZ7XtvBpMDekLj24kLo845DRq45",
    "sIgaocwpaOMji6o9MvKWWR2rlX3Dw4r7",
    "hareZzVNChnkB4lnonxIM2Eq2qaV1EXy",
    "M0khg6mxgDX5wlsptPpwXUGny995k3St",
    "oPChvenEEjRA5jpEtfSb1VQ57lgAPacK",
    "V4kHtJaNovpGJ8txHlanwhZk2ObMLo3J",
    "gQiZMF7GkrxfHbAmDCLJvsbRWx7liCWc",
    "S9LIwGNsQgl9KIVPY2opf7pH7hSYk4dS",
    "ScfrRRewF53q7BKWbHVWepBbY6dy4nSC",
    "rFPeLaHZhZ2GW2sISG9Fu9VaGcQmTTCo",
    "1aJ7D71rcVpX2HCO6IAhhh9D3pNa4rhm",
    "pg3fBuFTzrkYg0N87oYai0wzLbqg81V1",
    "ZWQzkFoM0RrBlUtGLtdPGZcpDN6Ou9FF",
    "URMoomuOUgPdBvi289U2b6lkO0CuhS1I",
    "UHt2vVi0qVi0ZyLhhsjWMaY2pElMHJQJ",
    "DbbTyo0RlKyoF8qnDXjjMwsA1k2wFEER",
    "BZIsOLAvNL8hUKs7PketgY0cYiDf2Usl",
    "QiljU5ggQ0PyWwkrWDmLGsZabSG83pnS",
    "zup7PQEIIz4zqmRXBOUYnIptDpEyT1D2",
    "9iT8rGs5Qeb0QU3jMqKT25LQuu1zvgJj",
    "xCgPgqsq4mXUmmC6l7fl1Bj0XjxK5n2Q",
    "uH6k55UwTYZ8Yr3snqXtLQXiPdJHUwEK",
    "Nelprl0D0yKCwTs097VTbEOKtRsnrp4l",
    "dmsKefghC7XMb4rB7VtUQZj98uBfiSmV",
    "QhmYBNNjqwiEKWIkBV9P4utz4wTsD76z"
    ]
    authTokens += ${?AUTH_TOKENS}
    authEnabled = false
    authEnabled = ${?AUTH_ENABLED}
}

# CardanoLedgerService
cardano {
  # Network connecting to, options: testnet, mainnet
  network = "testnet"
  network = ${?NODE_CARDANO_NETWORK}
  # ID (hex encoded) of the wallet to use for payments
  walletId = ${?NODE_CARDANO_WALLET_ID}
  # Spending passphrase of `walletId`
  walletPassphrase = ${?NODE_CARDANO_WALLET_PASSPHRASE}
  # Address (hex encoded) to make payments to (owned by Atala Prism, could be from `walletId` itself)
  paymentAddress = ${?NODE_CARDANO_PAYMENT_ADDRESS}

  # CardanoWalletApiClient
  wallet {
    host = "localhost"
    port = 8090
    scheme = http

    scheme = ${?NODE_CARDANO_WALLET_API_HTTP_SCHEME}
    host = ${?NODE_CARDANO_WALLET_API_HOST}
    port = ${?NODE_CARDANO_WALLET_API_PORT}

    routingHeaderName = ${?NODE_CARDANO_WALLET_ROUTING_HEADER_NAME}
    routingHeaderValue = ${?NODE_CARDANO_WALLET_ROUTING_HEADER_VALUE}
  }

  # First block to sync
  blockNumberSyncStart = 1868381
  blockNumberSyncStart = ${?NODE_CARDANO_PRISM_GENESIS_BLOCK}

  # Number of blocks to wait to confirm transactions
  blockConfirmationsToWait = 112
  blockConfirmationsToWait = ${?NODE_CARDANO_CONFIRMATION_BLOCKS}

  # CardanoDbSyncClient
  dbSync {
    db {
      host = "localhost:5433"
      database = "cexplorer"
      username = "postgres"
      password = "password"

      host = ${?NODE_CARDANO_DB_SYNC_HOST}
      database = ${?NODE_CARDANO_DB_SYNC_DATABASE}
      username = ${?NODE_CARDANO_DB_SYNC_USERNAME}
      password = ${?NODE_CARDANO_DB_SYNC_PASSWORD}

      awaitConnectionThreads = 8

      url = "jdbc:postgresql://"${cardano.dbSync.db.host}"/"${cardano.dbSync.db.database}
    }
  }
}

##### Third-party config #####

# Set Kamon's Prometheus endpoint to be localhost:9095/metrics
kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
    port = "9095"
    port = ${?PROMETHEUS_PORT}
  }
}
kamon.metric.tick-interval = 15 seconds
# Disable akka-http instrumentation as it's not a dependency
kanela.modules.akka-http.enabled=false
