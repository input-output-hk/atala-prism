/* eslint-disable */
// source: credential.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Credential', null, global);
goog.exportSymbol('proto.Date', null, global);
goog.exportSymbol('proto.HolderSentCredential', null, global);
goog.exportSymbol('proto.IdDocumentType', null, global);
goog.exportSymbol('proto.IssuerData', null, global);
goog.exportSymbol('proto.IssuerSentCredential', null, global);
goog.exportSymbol('proto.IssuerType', null, global);
goog.exportSymbol('proto.PersonalId', null, global);
goog.exportSymbol('proto.SentCredential', null, global);
goog.exportSymbol('proto.SentCredential.MessageCase', null, global);
goog.exportSymbol('proto.Signer', null, global);
goog.exportSymbol('proto.SubjectData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Credential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Credential.repeatedFields_, null);
};
goog.inherits(proto.Credential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Credential.displayName = 'proto.Credential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssuerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssuerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssuerData.displayName = 'proto.IssuerData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Signer.repeatedFields_, null);
};
goog.inherits(proto.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signer.displayName = 'proto.Signer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubjectData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SubjectData.repeatedFields_, null);
};
goog.inherits(proto.SubjectData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SubjectData.displayName = 'proto.SubjectData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Date.displayName = 'proto.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PersonalId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PersonalId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PersonalId.displayName = 'proto.PersonalId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssuerSentCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssuerSentCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssuerSentCredential.displayName = 'proto.IssuerSentCredential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HolderSentCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HolderSentCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HolderSentCredential.displayName = 'proto.HolderSentCredential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SentCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SentCredential.oneofGroups_);
};
goog.inherits(proto.SentCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SentCredential.displayName = 'proto.SentCredential';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Credential.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Credential.prototype.toObject = function(opt_includeInstance) {
  return proto.Credential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Credential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Credential.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuertype: (f = msg.getIssuertype()) && proto.IssuerData.toObject(includeInstance, f),
    subjectdata: (f = msg.getSubjectdata()) && proto.SubjectData.toObject(includeInstance, f),
    grantingdecision: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signingauthoritiesList: jspb.Message.toObjectList(msg.getSigningauthoritiesList(),
    proto.Signer.toObject, includeInstance),
    degreeawarded: jspb.Message.getFieldWithDefault(msg, 5, ""),
    additionalspeciality: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issuedon: (f = msg.getIssuedon()) && proto.Date.toObject(includeInstance, f),
    issuenumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    registrationnumber: jspb.Message.getFieldWithDefault(msg, 9, ""),
    decisionnumber: jspb.Message.getFieldWithDefault(msg, 10, ""),
    yearcompletedbystudent: jspb.Message.getFieldWithDefault(msg, 15, ""),
    description: jspb.Message.getFieldWithDefault(msg, 16, ""),
    expireson: (f = msg.getExpireson()) && proto.Date.toObject(includeInstance, f),
    admissiondate: (f = msg.getAdmissiondate()) && proto.Date.toObject(includeInstance, f),
    graduationdate: (f = msg.getGraduationdate()) && proto.Date.toObject(includeInstance, f),
    attainmentdate: (f = msg.getAttainmentdate()) && proto.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Credential}
 */
proto.Credential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Credential;
  return proto.Credential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Credential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Credential}
 */
proto.Credential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IssuerData;
      reader.readMessage(value,proto.IssuerData.deserializeBinaryFromReader);
      msg.setIssuertype(value);
      break;
    case 2:
      var value = new proto.SubjectData;
      reader.readMessage(value,proto.SubjectData.deserializeBinaryFromReader);
      msg.setSubjectdata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantingdecision(value);
      break;
    case 4:
      var value = new proto.Signer;
      reader.readMessage(value,proto.Signer.deserializeBinaryFromReader);
      msg.addSigningauthorities(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDegreeawarded(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdditionalspeciality(value);
      break;
    case 7:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setIssuedon(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuenumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistrationnumber(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecisionnumber(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setYearcompletedbystudent(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 17:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setExpireson(value);
      break;
    case 18:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setAdmissiondate(value);
      break;
    case 19:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setGraduationdate(value);
      break;
    case 20:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setAttainmentdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Credential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Credential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Credential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Credential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuertype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IssuerData.serializeBinaryToWriter
    );
  }
  f = message.getSubjectdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SubjectData.serializeBinaryToWriter
    );
  }
  f = message.getGrantingdecision();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSigningauthoritiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Signer.serializeBinaryToWriter
    );
  }
  f = message.getDegreeawarded();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAdditionalspeciality();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssuedon();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
  f = message.getIssuenumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRegistrationnumber();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDecisionnumber();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getYearcompletedbystudent();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getExpireson();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
  f = message.getAdmissiondate();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
  f = message.getGraduationdate();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
  f = message.getAttainmentdate();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional IssuerData issuerType = 1;
 * @return {?proto.IssuerData}
 */
proto.Credential.prototype.getIssuertype = function() {
  return /** @type{?proto.IssuerData} */ (
    jspb.Message.getWrapperField(this, proto.IssuerData, 1));
};


/**
 * @param {?proto.IssuerData|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setIssuertype = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearIssuertype = function() {
  return this.setIssuertype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasIssuertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubjectData subjectData = 2;
 * @return {?proto.SubjectData}
 */
proto.Credential.prototype.getSubjectdata = function() {
  return /** @type{?proto.SubjectData} */ (
    jspb.Message.getWrapperField(this, proto.SubjectData, 2));
};


/**
 * @param {?proto.SubjectData|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setSubjectdata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearSubjectdata = function() {
  return this.setSubjectdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasSubjectdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string grantingDecision = 3;
 * @return {string}
 */
proto.Credential.prototype.getGrantingdecision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setGrantingdecision = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Signer signingAuthorities = 4;
 * @return {!Array<!proto.Signer>}
 */
proto.Credential.prototype.getSigningauthoritiesList = function() {
  return /** @type{!Array<!proto.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Signer, 4));
};


/**
 * @param {!Array<!proto.Signer>} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setSigningauthoritiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Signer}
 */
proto.Credential.prototype.addSigningauthorities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Signer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearSigningauthoritiesList = function() {
  return this.setSigningauthoritiesList([]);
};


/**
 * optional string degreeAwarded = 5;
 * @return {string}
 */
proto.Credential.prototype.getDegreeawarded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setDegreeawarded = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string additionalSpeciality = 6;
 * @return {string}
 */
proto.Credential.prototype.getAdditionalspeciality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setAdditionalspeciality = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Date issuedOn = 7;
 * @return {?proto.Date}
 */
proto.Credential.prototype.getIssuedon = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 7));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setIssuedon = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearIssuedon = function() {
  return this.setIssuedon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasIssuedon = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string issueNumber = 8;
 * @return {string}
 */
proto.Credential.prototype.getIssuenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setIssuenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string registrationNumber = 9;
 * @return {string}
 */
proto.Credential.prototype.getRegistrationnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setRegistrationnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string decisionNumber = 10;
 * @return {string}
 */
proto.Credential.prototype.getDecisionnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setDecisionnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string yearCompletedByStudent = 15;
 * @return {string}
 */
proto.Credential.prototype.getYearcompletedbystudent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setYearcompletedbystudent = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string description = 16;
 * @return {string}
 */
proto.Credential.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional Date expiresOn = 17;
 * @return {?proto.Date}
 */
proto.Credential.prototype.getExpireson = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 17));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setExpireson = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearExpireson = function() {
  return this.setExpireson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasExpireson = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Date admissionDate = 18;
 * @return {?proto.Date}
 */
proto.Credential.prototype.getAdmissiondate = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 18));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setAdmissiondate = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearAdmissiondate = function() {
  return this.setAdmissiondate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasAdmissiondate = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Date graduationDate = 19;
 * @return {?proto.Date}
 */
proto.Credential.prototype.getGraduationdate = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 19));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setGraduationdate = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearGraduationdate = function() {
  return this.setGraduationdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasGraduationdate = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Date attainmentDate = 20;
 * @return {?proto.Date}
 */
proto.Credential.prototype.getAttainmentdate = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 20));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.Credential} returns this
*/
proto.Credential.prototype.setAttainmentdate = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Credential} returns this
 */
proto.Credential.prototype.clearAttainmentdate = function() {
  return this.setAttainmentdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Credential.prototype.hasAttainmentdate = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssuerData.prototype.toObject = function(opt_includeInstance) {
  return proto.IssuerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssuerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssuerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuerlegalname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    academicauthority: jspb.Message.getFieldWithDefault(msg, 2, ""),
    issuertype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    did: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssuerData}
 */
proto.IssuerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssuerData;
  return proto.IssuerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssuerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssuerData}
 */
proto.IssuerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuerlegalname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcademicauthority(value);
      break;
    case 3:
      var value = /** @type {!proto.IssuerType} */ (reader.readEnum());
      msg.setIssuertype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssuerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssuerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssuerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssuerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuerlegalname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAcademicauthority();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIssuertype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string issuerLegalName = 1;
 * @return {string}
 */
proto.IssuerData.prototype.getIssuerlegalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssuerData} returns this
 */
proto.IssuerData.prototype.setIssuerlegalname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string academicAuthority = 2;
 * @return {string}
 */
proto.IssuerData.prototype.getAcademicauthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssuerData} returns this
 */
proto.IssuerData.prototype.setAcademicauthority = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional IssuerType issuerType = 3;
 * @return {!proto.IssuerType}
 */
proto.IssuerData.prototype.getIssuertype = function() {
  return /** @type {!proto.IssuerType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.IssuerType} value
 * @return {!proto.IssuerData} returns this
 */
proto.IssuerData.prototype.setIssuertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string did = 4;
 * @return {string}
 */
proto.IssuerData.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssuerData} returns this
 */
proto.IssuerData.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Signer.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    surnamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    role: jspb.Message.getFieldWithDefault(msg, 3, ""),
    did: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tittle: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signer}
 */
proto.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signer;
  return proto.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signer}
 */
proto.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSurnames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTittle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSurnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTittle();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.Signer.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * repeated string surnames = 2;
 * @return {!Array<string>}
 */
proto.Signer.prototype.getSurnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.setSurnamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.addSurnames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.clearSurnamesList = function() {
  return this.setSurnamesList([]);
};


/**
 * optional string role = 3;
 * @return {string}
 */
proto.Signer.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.setRole = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string did = 4;
 * @return {string}
 */
proto.Signer.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string tittle = 15;
 * @return {string}
 */
proto.Signer.prototype.getTittle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Signer} returns this
 */
proto.Signer.prototype.setTittle = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SubjectData.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubjectData.prototype.toObject = function(opt_includeInstance) {
  return proto.SubjectData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubjectData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubjectData.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    surnameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    dateofbirth: (f = msg.getDateofbirth()) && proto.Date.toObject(includeInstance, f),
    iddocument: (f = msg.getIddocument()) && proto.PersonalId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubjectData}
 */
proto.SubjectData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubjectData;
  return proto.SubjectData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubjectData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubjectData}
 */
proto.SubjectData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSurname(value);
      break;
    case 3:
      var value = new proto.Date;
      reader.readMessage(value,proto.Date.deserializeBinaryFromReader);
      msg.setDateofbirth(value);
      break;
    case 4:
      var value = new proto.PersonalId;
      reader.readMessage(value,proto.PersonalId.deserializeBinaryFromReader);
      msg.setIddocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubjectData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubjectData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubjectData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubjectData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSurnameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDateofbirth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Date.serializeBinaryToWriter
    );
  }
  f = message.getIddocument();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PersonalId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.SubjectData.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * repeated string surname = 2;
 * @return {!Array<string>}
 */
proto.SubjectData.prototype.getSurnameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.setSurnameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.addSurname = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.clearSurnameList = function() {
  return this.setSurnameList([]);
};


/**
 * optional Date dateOfBirth = 3;
 * @return {?proto.Date}
 */
proto.SubjectData.prototype.getDateofbirth = function() {
  return /** @type{?proto.Date} */ (
    jspb.Message.getWrapperField(this, proto.Date, 3));
};


/**
 * @param {?proto.Date|undefined} value
 * @return {!proto.SubjectData} returns this
*/
proto.SubjectData.prototype.setDateofbirth = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.clearDateofbirth = function() {
  return this.setDateofbirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SubjectData.prototype.hasDateofbirth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PersonalId idDocument = 4;
 * @return {?proto.PersonalId}
 */
proto.SubjectData.prototype.getIddocument = function() {
  return /** @type{?proto.PersonalId} */ (
    jspb.Message.getWrapperField(this, proto.PersonalId, 4));
};


/**
 * @param {?proto.PersonalId|undefined} value
 * @return {!proto.SubjectData} returns this
*/
proto.SubjectData.prototype.setIddocument = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SubjectData} returns this
 */
proto.SubjectData.prototype.clearIddocument = function() {
  return this.setIddocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SubjectData.prototype.hasIddocument = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    month: jspb.Message.getFieldWithDefault(msg, 2, 0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Date}
 */
proto.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Date;
  return proto.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Date}
 */
proto.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.Date.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Date} returns this
 */
proto.Date.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 month = 2;
 * @return {number}
 */
proto.Date.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Date} returns this
 */
proto.Date.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.Date.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Date} returns this
 */
proto.Date.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PersonalId.prototype.toObject = function(opt_includeInstance) {
  return proto.PersonalId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PersonalId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PersonalId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    documenttype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PersonalId}
 */
proto.PersonalId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PersonalId;
  return proto.PersonalId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PersonalId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PersonalId}
 */
proto.PersonalId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.IdDocumentType} */ (reader.readEnum());
      msg.setDocumenttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PersonalId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PersonalId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PersonalId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PersonalId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocumenttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.PersonalId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PersonalId} returns this
 */
proto.PersonalId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional IdDocumentType documentType = 2;
 * @return {!proto.IdDocumentType}
 */
proto.PersonalId.prototype.getDocumenttype = function() {
  return /** @type {!proto.IdDocumentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.IdDocumentType} value
 * @return {!proto.PersonalId} returns this
 */
proto.PersonalId.prototype.setDocumenttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssuerSentCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.IssuerSentCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssuerSentCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssuerSentCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    credential: (f = msg.getCredential()) && proto.Credential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssuerSentCredential}
 */
proto.IssuerSentCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssuerSentCredential;
  return proto.IssuerSentCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssuerSentCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssuerSentCredential}
 */
proto.IssuerSentCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Credential;
      reader.readMessage(value,proto.Credential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssuerSentCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssuerSentCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssuerSentCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssuerSentCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Credential.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credential credential = 1;
 * @return {?proto.Credential}
 */
proto.IssuerSentCredential.prototype.getCredential = function() {
  return /** @type{?proto.Credential} */ (
    jspb.Message.getWrapperField(this, proto.Credential, 1));
};


/**
 * @param {?proto.Credential|undefined} value
 * @return {!proto.IssuerSentCredential} returns this
*/
proto.IssuerSentCredential.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IssuerSentCredential} returns this
 */
proto.IssuerSentCredential.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IssuerSentCredential.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HolderSentCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.HolderSentCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HolderSentCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HolderSentCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    credential: (f = msg.getCredential()) && proto.Credential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HolderSentCredential}
 */
proto.HolderSentCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HolderSentCredential;
  return proto.HolderSentCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HolderSentCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HolderSentCredential}
 */
proto.HolderSentCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Credential;
      reader.readMessage(value,proto.Credential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HolderSentCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HolderSentCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HolderSentCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HolderSentCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Credential.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credential credential = 1;
 * @return {?proto.Credential}
 */
proto.HolderSentCredential.prototype.getCredential = function() {
  return /** @type{?proto.Credential} */ (
    jspb.Message.getWrapperField(this, proto.Credential, 1));
};


/**
 * @param {?proto.Credential|undefined} value
 * @return {!proto.HolderSentCredential} returns this
*/
proto.HolderSentCredential.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HolderSentCredential} returns this
 */
proto.HolderSentCredential.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HolderSentCredential.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SentCredential.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.SentCredential.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ISSUERSENTCREDENTIAL: 1,
  HOLDERSENTCREDENTIAL: 2
};

/**
 * @return {proto.SentCredential.MessageCase}
 */
proto.SentCredential.prototype.getMessageCase = function() {
  return /** @type {proto.SentCredential.MessageCase} */(jspb.Message.computeOneofCase(this, proto.SentCredential.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SentCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.SentCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SentCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SentCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuersentcredential: (f = msg.getIssuersentcredential()) && proto.IssuerSentCredential.toObject(includeInstance, f),
    holdersentcredential: (f = msg.getHoldersentcredential()) && proto.HolderSentCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SentCredential}
 */
proto.SentCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SentCredential;
  return proto.SentCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SentCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SentCredential}
 */
proto.SentCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IssuerSentCredential;
      reader.readMessage(value,proto.IssuerSentCredential.deserializeBinaryFromReader);
      msg.setIssuersentcredential(value);
      break;
    case 2:
      var value = new proto.HolderSentCredential;
      reader.readMessage(value,proto.HolderSentCredential.deserializeBinaryFromReader);
      msg.setHoldersentcredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SentCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SentCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SentCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SentCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuersentcredential();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IssuerSentCredential.serializeBinaryToWriter
    );
  }
  f = message.getHoldersentcredential();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.HolderSentCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional IssuerSentCredential issuerSentCredential = 1;
 * @return {?proto.IssuerSentCredential}
 */
proto.SentCredential.prototype.getIssuersentcredential = function() {
  return /** @type{?proto.IssuerSentCredential} */ (
    jspb.Message.getWrapperField(this, proto.IssuerSentCredential, 1));
};


/**
 * @param {?proto.IssuerSentCredential|undefined} value
 * @return {!proto.SentCredential} returns this
*/
proto.SentCredential.prototype.setIssuersentcredential = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.SentCredential.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SentCredential} returns this
 */
proto.SentCredential.prototype.clearIssuersentcredential = function() {
  return this.setIssuersentcredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SentCredential.prototype.hasIssuersentcredential = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HolderSentCredential holderSentCredential = 2;
 * @return {?proto.HolderSentCredential}
 */
proto.SentCredential.prototype.getHoldersentcredential = function() {
  return /** @type{?proto.HolderSentCredential} */ (
    jspb.Message.getWrapperField(this, proto.HolderSentCredential, 2));
};


/**
 * @param {?proto.HolderSentCredential|undefined} value
 * @return {!proto.SentCredential} returns this
*/
proto.SentCredential.prototype.setHoldersentcredential = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.SentCredential.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SentCredential} returns this
 */
proto.SentCredential.prototype.clearHoldersentcredential = function() {
  return this.setHoldersentcredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SentCredential.prototype.hasHoldersentcredential = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.IssuerType = {
  UNIVERSITY: 0,
  SCHOOL: 1
};

/**
 * @enum {number}
 */
proto.IdDocumentType = {
  NATIONALIDCARD: 0,
  PASSPORT: 1
};

goog.object.extend(exports, proto);
