/* eslint-disable */
// source: src/protos/wallet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.io.iohk.cvp.wallet.BigInteger', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.ECPrivateKey', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.ECPublicKey', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.GetDIDRequest', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.GetDIDResponse', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.KeyPair', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.SignMessageRequest', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.SignMessageResponse', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.VerifySignedMessageRequest', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.VerifySignedMessageResponse', null, global);
goog.exportSymbol('proto.io.iohk.cvp.wallet.WalletData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.BigInteger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.BigInteger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.BigInteger.displayName = 'proto.io.iohk.cvp.wallet.BigInteger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.ECPrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.ECPrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.ECPrivateKey.displayName = 'proto.io.iohk.cvp.wallet.ECPrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.ECPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.ECPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.ECPublicKey.displayName = 'proto.io.iohk.cvp.wallet.ECPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.KeyPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.KeyPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.KeyPair.displayName = 'proto.io.iohk.cvp.wallet.KeyPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.WalletData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.WalletData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.WalletData.displayName = 'proto.io.iohk.cvp.wallet.WalletData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.GetDIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.GetDIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.GetDIDRequest.displayName = 'proto.io.iohk.cvp.wallet.GetDIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.GetDIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.GetDIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.GetDIDResponse.displayName = 'proto.io.iohk.cvp.wallet.GetDIDResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.SignMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.SignMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.SignMessageRequest.displayName = 'proto.io.iohk.cvp.wallet.SignMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.SignMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.SignMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.SignMessageResponse.displayName = 'proto.io.iohk.cvp.wallet.SignMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.VerifySignedMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.displayName = 'proto.io.iohk.cvp.wallet.VerifySignedMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.iohk.cvp.wallet.VerifySignedMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.displayName = 'proto.io.iohk.cvp.wallet.VerifySignedMessageResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.BigInteger.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.BigInteger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.BigInteger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.BigInteger.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.BigInteger}
 */
proto.io.iohk.cvp.wallet.BigInteger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.BigInteger;
  return proto.io.iohk.cvp.wallet.BigInteger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.BigInteger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.BigInteger}
 */
proto.io.iohk.cvp.wallet.BigInteger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.BigInteger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.BigInteger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.BigInteger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.BigInteger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.BigInteger.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.iohk.cvp.wallet.BigInteger} returns this
 */
proto.io.iohk.cvp.wallet.BigInteger.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.ECPrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.ECPrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    d: (f = msg.getD()) && proto.io.iohk.cvp.wallet.BigInteger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.ECPrivateKey}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.ECPrivateKey;
  return proto.io.iohk.cvp.wallet.ECPrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.ECPrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.ECPrivateKey}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.iohk.cvp.wallet.BigInteger;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.BigInteger.deserializeBinaryFromReader);
      msg.setD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.ECPrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.ECPrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getD();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.iohk.cvp.wallet.BigInteger.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigInteger d = 1;
 * @return {?proto.io.iohk.cvp.wallet.BigInteger}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.getD = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.BigInteger} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.BigInteger, 1));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.BigInteger|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.ECPrivateKey} returns this
*/
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.setD = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.ECPrivateKey} returns this
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.clearD = function() {
  return this.setD(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.ECPrivateKey.prototype.hasD = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.ECPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.ECPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.ECPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = msg.getX()) && proto.io.iohk.cvp.wallet.BigInteger.toObject(includeInstance, f),
    y: (f = msg.getY()) && proto.io.iohk.cvp.wallet.BigInteger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.ECPublicKey;
  return proto.io.iohk.cvp.wallet.ECPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.ECPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.iohk.cvp.wallet.BigInteger;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.BigInteger.deserializeBinaryFromReader);
      msg.setX(value);
      break;
    case 2:
      var value = new proto.io.iohk.cvp.wallet.BigInteger;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.BigInteger.deserializeBinaryFromReader);
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.ECPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.ECPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.ECPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.iohk.cvp.wallet.BigInteger.serializeBinaryToWriter
    );
  }
  f = message.getY();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.iohk.cvp.wallet.BigInteger.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigInteger x = 1;
 * @return {?proto.io.iohk.cvp.wallet.BigInteger}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.getX = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.BigInteger} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.BigInteger, 1));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.BigInteger|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey} returns this
*/
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.setX = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey} returns this
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.clearX = function() {
  return this.setX(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BigInteger y = 2;
 * @return {?proto.io.iohk.cvp.wallet.BigInteger}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.getY = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.BigInteger} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.BigInteger, 2));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.BigInteger|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey} returns this
*/
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.setY = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.ECPublicKey} returns this
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.clearY = function() {
  return this.setY(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.ECPublicKey.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.KeyPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.KeyPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.KeyPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    privatekey: (f = msg.getPrivatekey()) && proto.io.iohk.cvp.wallet.ECPrivateKey.toObject(includeInstance, f),
    publickey: (f = msg.getPublickey()) && proto.io.iohk.cvp.wallet.ECPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.KeyPair}
 */
proto.io.iohk.cvp.wallet.KeyPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.KeyPair;
  return proto.io.iohk.cvp.wallet.KeyPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.KeyPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.KeyPair}
 */
proto.io.iohk.cvp.wallet.KeyPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.iohk.cvp.wallet.ECPrivateKey;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.ECPrivateKey.deserializeBinaryFromReader);
      msg.setPrivatekey(value);
      break;
    case 2:
      var value = new proto.io.iohk.cvp.wallet.ECPublicKey;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.ECPublicKey.deserializeBinaryFromReader);
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.KeyPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.KeyPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.KeyPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivatekey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.iohk.cvp.wallet.ECPrivateKey.serializeBinaryToWriter
    );
  }
  f = message.getPublickey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.iohk.cvp.wallet.ECPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional ECPrivateKey privateKey = 1;
 * @return {?proto.io.iohk.cvp.wallet.ECPrivateKey}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.getPrivatekey = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.ECPrivateKey} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.ECPrivateKey, 1));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.ECPrivateKey|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.KeyPair} returns this
*/
proto.io.iohk.cvp.wallet.KeyPair.prototype.setPrivatekey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.KeyPair} returns this
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.clearPrivatekey = function() {
  return this.setPrivatekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.hasPrivatekey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ECPublicKey publicKey = 2;
 * @return {?proto.io.iohk.cvp.wallet.ECPublicKey}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.getPublickey = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.ECPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.ECPublicKey, 2));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.ECPublicKey|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.KeyPair} returns this
*/
proto.io.iohk.cvp.wallet.KeyPair.prototype.setPublickey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.KeyPair} returns this
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.clearPublickey = function() {
  return this.setPublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.KeyPair.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.WalletData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.WalletData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.WalletData.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypair: (f = msg.getKeypair()) && proto.io.iohk.cvp.wallet.KeyPair.toObject(includeInstance, f),
    did: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.WalletData}
 */
proto.io.iohk.cvp.wallet.WalletData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.WalletData;
  return proto.io.iohk.cvp.wallet.WalletData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.WalletData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.WalletData}
 */
proto.io.iohk.cvp.wallet.WalletData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.iohk.cvp.wallet.KeyPair;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.KeyPair.deserializeBinaryFromReader);
      msg.setKeypair(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.WalletData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.WalletData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.WalletData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypair();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.iohk.cvp.wallet.KeyPair.serializeBinaryToWriter
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional KeyPair keyPair = 1;
 * @return {?proto.io.iohk.cvp.wallet.KeyPair}
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.getKeypair = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.KeyPair} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.KeyPair, 1));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.KeyPair|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.WalletData} returns this
*/
proto.io.iohk.cvp.wallet.WalletData.prototype.setKeypair = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.WalletData} returns this
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.clearKeypair = function() {
  return this.setKeypair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.hasKeypair = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string did = 2;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.iohk.cvp.wallet.WalletData} returns this
 */
proto.io.iohk.cvp.wallet.WalletData.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.GetDIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.GetDIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.GetDIDRequest}
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.GetDIDRequest;
  return proto.io.iohk.cvp.wallet.GetDIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.GetDIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.GetDIDRequest}
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.GetDIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.GetDIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.GetDIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.GetDIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.GetDIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.GetDIDResponse}
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.GetDIDResponse;
  return proto.io.iohk.cvp.wallet.GetDIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.GetDIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.GetDIDResponse}
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.GetDIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.GetDIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.iohk.cvp.wallet.GetDIDResponse} returns this
 */
proto.io.iohk.cvp.wallet.GetDIDResponse.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.SignMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.SignMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.SignMessageRequest}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.SignMessageRequest;
  return proto.io.iohk.cvp.wallet.SignMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.SignMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.SignMessageRequest}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.SignMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.SignMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes message = 1;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message = 1;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.iohk.cvp.wallet.SignMessageRequest} returns this
 */
proto.io.iohk.cvp.wallet.SignMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.SignMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.SignMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.SignMessageResponse}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.SignMessageResponse;
  return proto.io.iohk.cvp.wallet.SignMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.SignMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.SignMessageResponse}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.SignMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.SignMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.iohk.cvp.wallet.SignMessageResponse} returns this
 */
proto.io.iohk.cvp.wallet.SignMessageResponse.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: (f = msg.getPublickey()) && proto.io.iohk.cvp.wallet.ECPublicKey.toObject(includeInstance, f),
    message: msg.getMessage_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.VerifySignedMessageRequest;
  return proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.iohk.cvp.wallet.ECPublicKey;
      reader.readMessage(value,proto.io.iohk.cvp.wallet.ECPublicKey.deserializeBinaryFromReader);
      msg.setPublickey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.iohk.cvp.wallet.ECPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional ECPublicKey publicKey = 1;
 * @return {?proto.io.iohk.cvp.wallet.ECPublicKey}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getPublickey = function() {
  return /** @type{?proto.io.iohk.cvp.wallet.ECPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.io.iohk.cvp.wallet.ECPublicKey, 1));
};


/**
 * @param {?proto.io.iohk.cvp.wallet.ECPublicKey|undefined} value
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} returns this
*/
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.setPublickey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} returns this
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.clearPublickey = function() {
  return this.setPublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes message = 2;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes message = 2;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} returns this
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {string}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageRequest} returns this
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.iohk.cvp.wallet.VerifySignedMessageResponse;
  return proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * @return {boolean}
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.iohk.cvp.wallet.VerifySignedMessageResponse} returns this
 */
proto.io.iohk.cvp.wallet.VerifySignedMessageResponse.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.io.iohk.cvp.wallet);
