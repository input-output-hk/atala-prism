db {
  host = "localhost:5432"
  database = "node_db"
  username = "postgres"
  password = "postgres"

  host = ${?NODE_PSQL_HOST}
  database = ${?NODE_PSQL_DATABASE}
  username = ${?NODE_PSQL_USERNAME}
  password = ${?NODE_PSQL_PASSWORD}

  awaitConnectionThreads = 8
  awaitConnectionThreads = ${?NODE_PSQL_AWAIT_CONNECTION_THREADS}

  url = "jdbc:postgresql://"${db.host}"/"${db.database}
}

# Content Addressable Storage to use
# possible options: in-memory, filesystem, s3
storage = "in-memory"
storage = ${?NODE_STORAGE}

s3 {
  bucket = ${?NODE_S3_REGION}
  bucket = ${?NODE_S3_BUCKET}
  keyPrefix = ${?NODE_S3_KEY_PREFIX}
}

# Ledger, options: cardano, in-memory
ledger = "in-memory"
ledger = ${?NODE_LEDGER}

port = 50053
port = ${?NODE_GRPC_SERVER_PORT}

# Time period between refreshing transaction statuses and submitting pending operations
refreshAndSubmitPeriod = "20s"
refreshAndSubmitPeriod = ${?NODE_REFRESH_AND_SUBMIT_PERIOD}

# Time period between making scheduled operations ready for submissions
moveScheduledToPendingPeriod = "15s"
moveScheduledToPendingPeriod = ${?NODE_MOVE_SCHEDULED_TO_PENDING_PERIOD}

# Maximum number of transactions cardano-wallet can work with
transactionsPerSecond = 10
transactionsPerSecond = ${?NODE_WALLET_MAX_TPS}

# Maximum number of public keys Node API can create/update/get per request to a DID
didPublicKeysLimit = 50
didPublicKeysLimit = ${?NODE_DID_PUBLIC_KEYS_LIMIT}
# Maximum number of services Node API can create/update/get per request to a DID
didServicesLimit = 50
didServicesLimit = ${?NODE_DID_SERVICES_LIMIT}
# Maximum number of characters every DID service endpoint can have
didServiceEndpointCharLimit = 300
didServiceEndpointCharLimit = ${?NODE_SERVICE_ENDPOINT_CHAR_LIMIT}
# Maximum number of characters every DID type can have
didServiceTypeCharLimit = 100
didServiceTypeCharLimit = ${?NODE_SERVICE_TYPE_CHAR_LIMIT}
# Maximum number of characters every context string of a DID can have
contextStringCharLimit = 100
contextStringCharLimit = ${?NODE_CONTEXT_STRING_CHAR_LIMIT}

# Maximum number of characters id field of pk and service can have
didIdCharLenLimit = 50
didIdCharLenLimit = ${?NODE_ID_CHAR_LIMIT}


# IOHK DID suffix which will post protocol updates
# This value is random now, should be updated when we actually generate IOHK DID
trustedProposerSuffix = "7476322b05901e9ebfb1ffa2bdfcfc819549f757474f0278ca4bb9d182a553db"
trustedProposerSuffix = ${?TRUSTED_PROPOSER_SUFFIX}

# CardanoLedgerService
cardano {
  # Network connecting to, options: testnet, mainnet
  network = "testnet"
  network = ${?NODE_CARDANO_NETWORK}
  # ID (hex encoded) of the wallet to use for payments
  walletId = ${?NODE_CARDANO_WALLET_ID}
  # Spending passphrase of `walletId`
  walletPassphrase = ${?NODE_CARDANO_WALLET_PASSPHRASE}
  # Address (hex encoded) to make payments to (owned by Atala Prism, could be from `walletId` itself)
  paymentAddress = ${?NODE_CARDANO_PAYMENT_ADDRESS}

  # CardanoWalletApiClient
  wallet {
    host = "localhost"
    port = 8090
    scheme = http

    scheme = ${?NODE_CARDANO_WALLET_API_HTTP_SCHEME}
    host = ${?NODE_CARDANO_WALLET_API_HOST}
    port = ${?NODE_CARDANO_WALLET_API_PORT}

    routingHeaderName = ${?NODE_CARDANO_WALLET_ROUTING_HEADER_NAME}
    routingHeaderValue = ${?NODE_CARDANO_WALLET_ROUTING_HEADER_VALUE}
  }

  # First block to sync
  blockNumberSyncStart = 1868381
  blockNumberSyncStart = ${?NODE_CARDANO_PRISM_GENESIS_BLOCK}

  # Number of blocks to wait to confirm transactions
  blockConfirmationsToWait = 112
  blockConfirmationsToWait = ${?NODE_CARDANO_CONFIRMATION_BLOCKS}

  #Initial Node Bulk Sync size
  initialBulkSyncSize = 5000
  initialBulkSyncSize = ${?NODE_CARDANO_INITIAL_BULK_SYNC_SIZE}

  # CardanoDbSyncClient
  dbSync {
    db {
      host = "localhost:5433"
      database = "cexplorer"
      username = "postgres"
      password = "password"

      host = ${?NODE_CARDANO_DB_SYNC_HOST}
      database = ${?NODE_CARDANO_DB_SYNC_DATABASE}
      username = ${?NODE_CARDANO_DB_SYNC_USERNAME}
      password = ${?NODE_CARDANO_DB_SYNC_PASSWORD}

      awaitConnectionThreads = 8

      url = "jdbc:postgresql://"${cardano.dbSync.db.host}"/"${cardano.dbSync.db.database}
    }
  }
}

##### Third-party config #####

# Set Kamon's Prometheus endpoint to be localhost:9095/metrics
kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
    port = "9095"
    port = ${?PROMETHEUS_PORT}
  }
}
kamon.metric.tick-interval = 15 seconds
# Disable akka-http instrumentation as it's not a dependency
kanela.modules.akka-http.enabled=false
