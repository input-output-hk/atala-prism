syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "common_models.proto";
import "node_models.proto";

import "google/protobuf/timestamp.proto";

// The Node API
service NodeService {
    // Checks if the service is healthy.
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

    // Retrieves a DID Document.
    rpc GetDidDocument(GetDidDocumentRequest) returns (GetDidDocumentResponse) {}

    // Creates a public DID.
    rpc CreateDID(CreateDIDRequest) returns (CreateDIDResponse) {}

    // Updates an existing public DID.
    rpc UpdateDID(UpdateDIDRequest) returns (UpdateDIDResponse) {}

    // Issues a batch of credentials.
    rpc IssueCredentialBatch(IssueCredentialBatchRequest) returns (IssueCredentialBatchResponse) {}

    // Revokes credentials from a batch (all, or just a subset).
    rpc RevokeCredentials(RevokeCredentialsRequest) returns (RevokeCredentialsResponse) {}

    // Retrieves the Node version info.
    rpc GetNodeBuildInfo(GetNodeBuildInfoRequest) returns (GetNodeBuildInfoResponse) {}

    // Finds the state for a given credential's batch.
    rpc GetBatchState(GetBatchStateRequest) returns (GetBatchStateResponse) {}

    // Finds the time when a credential was revoked.
    rpc GetCredentialRevocationTime(GetCredentialRevocationTimeRequest) returns (GetCredentialRevocationTimeResponse) {}

    /**
     * AUTHENTICATED
     *
     * Retrieves the status of an operation.
     */
    rpc GetOperationInfo(GetOperationInfoRequest) returns (GetOperationInfoResponse) {}

    // Publishes a sequence of signed operations in a single underlying transaction.
    // The sequence of operations has a size limit to fit in the metadata of the transaction (approx. 15KB).
    rpc PublishAsABlock(PublishAsABlockRequest) returns (PublishAsABlockResponse) {}
}


// Request to find a DID Document.
message GetDidDocumentRequest {
    string did = 1; // The DID.
}
// Response to a DID Document query.
message GetDidDocumentResponse {
    DIDData document = 1; // If present, the DID Document.
    /**
     * Timestamp of the latest synchronized block.
     */
    google.protobuf.Timestamp last_synced_block_timestamp = 5;
}

// Request to create a public DID.
message CreateDIDRequest {
    SignedAtalaOperation signed_operation = 1; // The signed operation.
}

// Response after creating a public DID.
message CreateDIDResponse {
    reserved 2; // Removed "transaction_info" field.
    reserved "transaction_info";

    string id = 1; // DID suffix, where DID is in form did:prism.atala:[DID suffix]
    bytes operation_id = 3; // Operation identifier.
}

// Request to update a public DID Document.
message UpdateDIDRequest {
    SignedAtalaOperation signed_operation = 1; // The signed operation.
}
// Response after updating a DID Document.
message UpdateDIDResponse {
    reserved 1; // Removed "transaction_info" field.
    reserved "transaction_info";

    bytes operation_id = 2; // Operation identifier.
}

// Request to issue a batch of credentials.
message IssueCredentialBatchRequest {
    SignedAtalaOperation signed_operation = 1; // The signed operation.
}
// Response after issuing a batch of credentials.
message IssueCredentialBatchResponse {
    reserved 2; // Removed "transaction_info" field.
    reserved "transaction_info";

    string batch_id = 1; // The ID of the batch posted.
    bytes operation_id = 3; // Operation identifier.
}

// Request to revoke credentials from a batch.
message RevokeCredentialsRequest {
    SignedAtalaOperation signed_operation = 1; // The signed operation.
}
// Response after revoking credentials from a batch.
message RevokeCredentialsResponse {
    reserved 1; // Removed "transaction_info" field.
    reserved "transaction_info";

    bytes operation_id = 2; // Operation identifier.
}

// Request to get the Node version info.
message GetNodeBuildInfoRequest {
}

// Response with the Node version info.
message GetNodeBuildInfoResponse {
    reserved 4; // buildTime

    string version = 1; // The actual version.
    string scala_version = 2; // The Scala version used to compile the app.
    string sbt_version = 3; // The SBT version used to compile the app.
}

// Request to get the credential's batch state.
message GetBatchStateRequest {
    string batch_id = 1; // The batch ID.
}
// Response with the credential's batch state.
message GetBatchStateResponse {
    string issuer_did = 1; // DID suffix used to sign the IssueCredentialBatch operation.
    bytes merkle_root = 2; // The Merkle root used for the IssueCredential operation.

    // If present: underlying blockchain data that refers to the transaction that
    // contains the IssueCredential operation associated with the credential.
    LedgerData publication_ledger_data = 3;

    // If present: underlying blockchain data that refers to the transaction that contains the RevokeCredential operation associated with the credential.
    LedgerData revocation_ledger_data = 4;

    /**
     * Timestamp of the latest synchronized block.
     */
    google.protobuf.Timestamp last_synced_block_timestamp = 5;
}

// Request to get the credential's revocation time.
message GetCredentialRevocationTimeRequest {
    string batch_id = 1; // The ID corresponding to the credential to query about.
    bytes credential_hash = 2; // The hash of the credential to query about.
}
// Response with the credential's revocation time.
message GetCredentialRevocationTimeResponse {
    LedgerData revocation_ledger_data = 1; // If present, the ledger data when the credential was revoked.
    google.protobuf.Timestamp last_synced_block_timestamp = 2; // Timestamp of the latest synchronized block.
}

/**
 * Request to get the operation status.
 */
message GetOperationInfoRequest {
    bytes operation_id = 1; // Operation identifier. The identifier is returned to the corresponding operation request.
}

/**
 * Response with the current operation status.
 */
message GetOperationInfoResponse {
    OperationStatus operation_status = 1; // Contains the status of this operation.
    string transaction_id = 3; // Transaction identifier containing the operation. Presented only when operation was approved by the ledger.
    google.protobuf.Timestamp last_synced_block_timestamp = 2; // Timestamp of the latest synchronized block.
}

message PublishAsABlockRequest {
    // The sequence of operations to apply. The operations will be applied in the order specified here.
    repeated SignedAtalaOperation signed_operations = 1; // two or more signed operations
}
// Response with the transaction info and operations outputs.
message PublishAsABlockResponse {
    reserved 1; // Removed "transaction_info" field.
    reserved "transaction_info";

    // The responses of every operation in the block, ordered the same as the operations sent in PublishAsABlockRequest.
    repeated OperationOutput outputs = 2;
}
