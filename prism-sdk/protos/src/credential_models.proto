syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

import "common_models.proto";
import "status.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

package io.iohk.atala.prism.protos;


message ProofRequest {
    repeated string type_ids = 1;
    string connection_token = 2;
}

message EncryptedMessage {
    // The identifier of the key used to encrypt the message. This might be empty if the receiver uses only one key.
    string key_id = 1;
    // Encrypted content of the message. After decryption, it should be deserialized as an AtalaMessage instance.
    bytes encrypted_content = 2;
}

message RegisterAddressMessage {
    string cardano_address = 1;
    string cardano_network = 2;
}

message PayIdMessage {
    string payment_information = 1;
}

message PayIdNameRegistrationMessage {
    string name = 1;
}

message InitiateTrisaCardanoTransactionMessage {
    string sourceCardanoAddress = 1;
    string desinationCardanoAddress = 2;
    int64 lovelaceAmount = 3;
    string trisaVaspHost = 4;
    int32 trisaVaspHostPortNumber = 5;
}

message AddressRegisteredMessage {
    string cardano_address = 101; // value from the request
}

message PayIdNameRegisteredMessage {
    string name = 101; // value from the request
}

message PayIdNameTakenMessage {
    string message = 1;
}

message PaymentInformationSaved {}

message CheckPayIdNameAvailabilityMessage {
    string name_to_check = 1;
}

message CheckPayIdNameAvailabilityResponse {
    bool available = 1;
}

message GetPayIdNameMessage {}

//Returns registered payId name for given connection.
//Empty string is returned when connection doesn't have registered payId name.
message GetPayIdNameResponse {
    string payId_name = 1;
}

message GetPayIdAddressesMessage {}

message ManuallyRegisteredCardanoAddress {
    string address = 1;
    google.protobuf.Timestamp registration_date = 2;
}

message GeneratedCardanoAddress {
    string address = 1;
    string wallet_name = 2;
    int64 sequence_number = 3;
    google.protobuf.Timestamp used_at = 4; //Optional, if provided it means that address was used.
}

message GetPayIdAddressesResponse {
    repeated ManuallyRegisteredCardanoAddress manually_registered_cardano_addresses = 1;
    repeated GeneratedCardanoAddress generated_cardano_addresses = 2;
}

message RegisterWalletMessage {
    string name = 1; // The name for the wallet, can be empty.
    string extended_public_key = 2; // Extended Public Key as acct_xvk string.
}

message WalletRegistered {
    string id = 1; // Auto UUID generated for the given wallet.

    string name = 101; // value from the request
    string extended_public_key = 102; // value from the request
}

message GetRegisteredWalletsMessage {}

message Wallet {
    string id = 1;
    string name = 2;
    string extended_public_key = 3;
    google.protobuf.Timestamp registration_date = 4;
}

message GetRegisteredWalletsResponse {
    repeated Wallet wallets = 1;
}

message MirrorMessage {
    oneof message {
        RegisterAddressMessage register_address_message = 1;
        PayIdMessage pay_id_message = 2;
        PayIdNameRegistrationMessage pay_id_name_registration_message = 3;
        InitiateTrisaCardanoTransactionMessage initiate_trisa_cardano_transaction_message = 4;
        AddressRegisteredMessage address_registered_message = 5;
        PayIdNameRegisteredMessage payId_name_registered_message = 6;
        PayIdNameTakenMessage payId_name_taken_message = 7;
        PaymentInformationSaved payment_information_saved = 8;
        CheckPayIdNameAvailabilityMessage check_payId_name_availability_message = 9;
        CheckPayIdNameAvailabilityResponse check_payId_name_availability_response = 10;
        GetPayIdNameMessage get_payId_name_message = 11;
        GetPayIdNameResponse get_payId_name_response = 12;
        GetPayIdAddressesMessage get_payId_addresses_message = 13;
        GetPayIdAddressesResponse get_payId_addresses_response = 14;
        RegisterWalletMessage register_wallet_message = 15;
        WalletRegistered wallet_registered = 16;
        GetRegisteredWalletsMessage get_registered_wallets_message = 17;
        GetRegisteredWalletsResponse get_registered_wallets_response = 18;
    }
}

message RequestAcuantProcess {}

message StartAcuantProcess {
    string document_instance_id = 1;
    string bearer_token = 2;
}

message AcuantProcessFinished {
    string document_instance_id = 1;
    bytes selfie_image = 2;
}

message SendForAcuantManualReview {
    string document_instance_id = 1;
    bytes selfie_image = 2;
}

message SentForAcuantManualReview {}

message KycBridgeMessage {
    oneof message {
        StartAcuantProcess start_acuant_process = 1;
        AcuantProcessFinished acuant_process_finished = 2;
        SendForAcuantManualReview send_for_acuant_manual_review = 3;
        SentForAcuantManualReview sent_for_acuant_manual_review = 4;
        RequestAcuantProcess request_acuant_process = 5;
    }
}

// ATA-3250: Until we implement e2e encryption, we will share
// credentials using this message.
message PlainTextCredential {
    string encoded_credential = 1; // The encoded and signed credential.
    string encoded_merkle_proof = 2; // The encoded Merkle proof of inclusion associated with the encodedCredential.
}

// Used to notify the apps that a credential was revoked.
message CredentialRevoked {
    string encoded_credential = 1; // The encoded and signed credential.
    string reason = 2; // An optional revocation reason, as provided by the issuer.
}

message AtalaErrorMessage {
    google.rpc.Status status = 1;
}

message AtalaMessage {
    oneof message {
        ProofRequest proof_request = 3;
        EncryptedMessage encrypted_message = 4;
        MirrorMessage mirror_message = 5;
        PlainTextCredential plain_credential = 6;
        KycBridgeMessage kyc_bridge_message = 7;
        CredentialRevoked credential_revoked = 8;
        AtalaErrorMessage atala_error_message = 9;
        google.protobuf.Any custom_message = 10; // variant to use for messages from external components, e.g. Mirror
    }
    // Optional, if set, it's the id of an existing message from the same connection.
    // It means that sent message is a reply to one of messages received by the sender.
    string reply_to = 101;
}
