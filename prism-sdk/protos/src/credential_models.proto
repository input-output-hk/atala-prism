syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

import "common_models.proto";

package io.iohk.atala.prism.protos;

/*
Based on requirements, diplomas need the following information:

Universities
- Full name of the institution (legal form with reference).
- Name of the qualifying / academic authority.
- Decision on granting qualification / academic degree.
- Issue Number
- Issue Date (day, month, year).
- Name and surname of the graduate
- Qualified / academic degree awarded.
- Additional speciality (if any).
- Name and surname of the head of the institution (Signature)
- Name and surname of persons / persons authorized to sign a diploma (Signature).

Given an example diploma, we found a few extra fields present.
- Registration number.
- Decision number.

Notoriously, we see that neither a national ID number nor other graduate date are
required, only the name is.
We decided to add a SubjectData field with optional extra values for this.

In the case of schools, required information is:
- Name and surname school student.
- Student's personal number (if any).
- Student's date of birth
- Full legal name of educational institution.
- Higher year completed by the student.

We see that no signature is mentioned for the school diplomas.

Given the schema below, both types of certificates can be encoded. The distinction will be found
in IssuerData, where the IssuerType differentiate schools and universities.
*/

message AlphaCredential {
    IssuerData issuerType = 1; // Data associated with the issuer organization. Currently, University or School.
    SubjectData subjectData = 2; // Personal data associated to the holder (student).
    string grantingDecision = 3; // E.g., [subject] was awarded Master Business Administration in Management.
    repeated Signer signingAuthorities = 4; // Head and other members of the institution that will sign the diploma.
    string degreeAwarded = 5; // Degree name.
    string additionalSpeciality = 6; // Optional additional speciality.
    Date issuedOn = 7; // Date of issuance.

    // @exclude
    // Fields that are unclear. They may be updated or even deleted.
    string issueNumber = 8; // NEED CLARIFICATION ON WHAT THIS IS
    string registrationNumber = 9; // NEED CLARIFICATION Registration number. This appears in the example diploma but it is unclear how this may relate to "Issue number".
    string decisionNumber = 10; //NEED CLARIFICATION Decision number. This appears in the example diploma but it is unclear how this may relate to "Issue number".

    // WE NEED CLARIFICATIONS ON THIS FIELD. It is related to school diplomas.
    // It may be replaceable by one of the fields related to OpenCerts. See below.
    string yearCompletedByStudent = 15;

    // @exclude
    // Fields inspired from OpenCerts standard. See: https://github.com/OpenCerts/open-certificate/blob/master/schema/2.0/schema.json
    string description = 16; // Field reserved for general description of the credential.
    Date expiresOn = 17;
    Date admissionDate = 18; // Unclear meaning.
    Date graduationDate = 19 ; // (OpenCerts description) The date when this student graduated from the course.
    Date attainmentDate = 20 ; // (OpenCerts description) The date when this qualification was awarded to the recipient.

    // @exclude
    // Other fields we could add:
    /*
    qualificationLevel: (OpenCerts description) "This is an array of objects used to attach descriptors from
                         frameworks such as Singapore's SSEC-EQA or the internationally recognised ISCED. Multiple
                         instances are allowed to indicate either equivalents or to indicate a multi-level qualifications",
                         It consist of tuples of 4 strings.
     fieldOfStudy: (OpenCerts description) "This is an array of objects used to attach descriptors from frameworks such
                   as Singapore's SSEC-FOS or the internationally recognised ISCED-F. Multiple instances are allowed to
                   indicate either equivalents or to indicate a multi-field qualification such as double degrees",
                   It consist of tuples of 4 strings.
    cumulativeScore: Unclear description, it is a number. Probably applies to course certificates but not to degrees.
    transcript: It seems to consist of an array of data associated with each course that the student took to get the degree.
    additionalData: Unclear field without structure (a simple JSON object). It may be used to add extra data.
    */
}

message IssuerData {
    string issuerLegalName = 1; // Issuer's legal name. E.g., "LLC BUSINESS AND TECHNOLOGY UNIVERSITY".

    // In university case, this could be the faculty name.
    // E.g. Faculty of Business and Technology.
    string academicAuthority = 2;
    IssuerType issuerType = 3; // Issuer organization type. Currently, University or School.

    // Public DID associated to the institution.
    // OpenCerts adds some other data, like URL, email, or phone number.
    string did = 4;
}

message Signer {
    repeated string names = 1; // Names of the signer.
    repeated string surnames = 2; // Surnames of the signer.
    string role = 3; // Rector, Dean, etc.
    string did = 4; // The public DID associated with the signer.
    string title = 5; // Title to address the person (Mr., Dr., Prof., etc.)
}

// For now, Universites and schools.
enum IssuerType {
    University = 0;
    School = 1;
}

message SubjectData {
    repeated string names = 1; // Names of the subject.
    repeated string surnames = 2; // Surnames of the subject.
    Date dateOfBirth = 3; // Holder's date of birth.
    PersonalId idDocument = 4; // Optional identification number of the holder.
    // @exclude
    // OpenCerts also adds phone number, email address, URL, studentId, and unclear values "nric" and "fin".
}

message PersonalId {
    string id = 1; // A unique identifier of the individual, according to document type.
    IdDocumentType documentType = 2; // E.g., passport, driver licence, or national card.
}

enum IdDocumentType {
    NationalIdCard = 0;
    Passport = 1;
}

/*
   @exclude
   Below we can see the messages used to exchange credentials between actors.
*/
message IssuerSentCredential {
    oneof value {
        AlphaCredential alphaCredential = 1;
        Credential credential = 2;
    }
}

message Credential {
    // Type ID to enable dispatch to correct credential processor.
    string typeId = 1;

    // JSON or JWT encoded credential document (to discuss).
    string credentialDocument = 2;
}

message HolderSentCredential {
    AlphaCredential credential = 1;
}

message ProofRequest {
    repeated string typeIds = 1;
    string connectionToken = 2;
}

message EncryptedMessage {
    // The identifier of the key used to encrypt the message. This might be empty if the receiver uses only one key.
    string keyId = 1;
    // Encrypted content of the message. After decryption, it should be deserialized as an AtalaMessage instance.
    bytes encryptedContent = 2;
}

message RegisterAddressMessage {
    string cardanoAddress = 1;
    string cardanoNetwork = 2;
}

message PayIdMessage {
    string paymentInformation = 1;
}

message PayIdNameRegistrationMessage {
    string name = 1;
}

message InitiateTrisaCardanoTransactionMessage {
    string sourceCardanoAddress = 1;
    string desinationCardanoAddress = 2;
    int64 lovelaceAmount = 3;
    string trisaVaspHost = 4;
    int32 trisaVaspHostPortNumber = 5;
}

message MirrorMessage {
    oneof message {
        RegisterAddressMessage registerAddressMessage = 1;
        PayIdMessage payIdMessage = 2;
        PayIdNameRegistrationMessage payIdNameRegistrationMessage = 3;
        InitiateTrisaCardanoTransactionMessage initiateTrisaCardanoTransactionMessage = 4;
    }
}

message StartAcuantProcess {
    string documentInstanceId = 1;
    string bearerToken = 2;
}

message AcuantProcessFinished {
    string documentInstanceId = 1;
    bytes selfieImage = 2;
}

message KycBridgeMessage {
    oneof message {
        StartAcuantProcess startAcuantProcess = 1;
        AcuantProcessFinished acuantProcessFinished = 2;
    }
}

// ATA-3250: Until we implement e2e encryption, we will share
// credentials using this message.
message PlainTextCredential {
    string encodedCredential = 1; // The encoded and signed credential.
    string encodedMerkleProof = 2; // The encoded Merkle proof of inclusion associated with the encodedCredential.
}

// Used to notify the apps that a credential was revoked.
message CredentialRevoked {
    string encodedCredential = 1; // The encoded and signed credential.
    string reason = 2; // An optional revocation reason, as provided by the issuer.
}

message AtalaMessage {
    oneof message {
        IssuerSentCredential issuerSentCredential = 1;
        HolderSentCredential holderSentCredential = 2;
        ProofRequest proofRequest = 3;
        EncryptedMessage encryptedMessage = 4;
        MirrorMessage mirrorMessage = 5;
        PlainTextCredential plainCredential = 6;
        KycBridgeMessage kycBridgeMessage = 7;
        CredentialRevoked credentialRevoked = 8;
    }
    // Optional, if set, it's the id of an existing message from the same connection.
    // It means that sent message is a reply to one of messages received by the sender.
    string reply_to = 101;
}
