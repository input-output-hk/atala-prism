syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

import "common_models.proto";
import "status.proto";

package io.iohk.atala.prism.protos;

/*
Based on requirements, diplomas need the following information:

Universities
- Full name of the institution (legal form with reference).
- Name of the qualifying / academic authority.
- Decision on granting qualification / academic degree.
- Issue Number
- Issue Date (day, month, year).
- Name and surname of the graduate
- Qualified / academic degree awarded.
- Additional speciality (if any).
- Name and surname of the head of the institution (Signature)
- Name and surname of persons / persons authorized to sign a diploma (Signature).

Given an example diploma, we found a few extra fields present.
- Registration number.
- Decision number.

Notoriously, we see that neither a national ID number nor other graduate date are
required, only the name is.
We decided to add a SubjectData field with optional extra values for this.

In the case of schools, required information is:
- Name and surname school student.
- Student's personal number (if any).
- Student's date of birth
- Full legal name of educational institution.
- Higher year completed by the student.

We see that no signature is mentioned for the school diplomas.

Given the schema below, both types of certificates can be encoded. The distinction will be found
in IssuerData, where the IssuerType differentiate schools and universities.
*/

message AlphaCredential {
    IssuerData issuer_type = 1; // Data associated with the issuer organization. Currently, University or School.
    SubjectData subject_data = 2; // Personal data associated to the holder (student).
    string granting_decision = 3; // E.g., [subject] was awarded Master Business Administration in Management.
    repeated Signer signing_authorities = 4; // Head and other members of the institution that will sign the diploma.
    string degree_awarded = 5; // Degree name.
    string additional_speciality = 6; // Optional additional speciality.
    Date issued_on = 7; // Date of issuance.

    // @exclude
    // Fields that are unclear. They may be updated or even deleted.
    string issue_number = 8; // NEED CLARIFICATION ON WHAT THIS IS
    string registration_number = 9; // NEED CLARIFICATION Registration number. This appears in the example diploma but it is unclear how this may relate to "Issue number".
    string decision_number = 10; //NEED CLARIFICATION Decision number. This appears in the example diploma but it is unclear how this may relate to "Issue number".

    // WE NEED CLARIFICATIONS ON THIS FIELD. It is related to school diplomas.
    // It may be replaceable by one of the fields related to OpenCerts. See below.
    string year_completed_by_student = 15;

    // @exclude
    // Fields inspired from OpenCerts standard. See: https://github.com/OpenCerts/open-certificate/blob/master/schema/2.0/schema.json
    string description = 16; // Field reserved for general description of the credential.
    Date expires_on = 17;
    Date admission_date = 18; // Unclear meaning.
    Date graduation_date = 19 ; // (OpenCerts description) The date when this student graduated from the course.
    Date attainment_date = 20 ; // (OpenCerts description) The date when this qualification was awarded to the recipient.

    // @exclude
    // Other fields we could add:
    /*
    qualificationLevel: (OpenCerts description) "This is an array of objects used to attach descriptors from
                         frameworks such as Singapore's SSEC-EQA or the internationally recognised ISCED. Multiple
                         instances are allowed to indicate either equivalents or to indicate a multi-level qualifications",
                         It consist of tuples of 4 strings.
     fieldOfStudy: (OpenCerts description) "This is an array of objects used to attach descriptors from frameworks such
                   as Singapore's SSEC-FOS or the internationally recognised ISCED-F. Multiple instances are allowed to
                   indicate either equivalents or to indicate a multi-field qualification such as double degrees",
                   It consist of tuples of 4 strings.
    cumulativeScore: Unclear description, it is a number. Probably applies to course certificates but not to degrees.
    transcript: It seems to consist of an array of data associated with each course that the student took to get the degree.
    additionalData: Unclear field without structure (a simple JSON object). It may be used to add extra data.
    */
}

message IssuerData {
    string issuer_legal_name = 1; // Issuer's legal name. E.g., "LLC BUSINESS AND TECHNOLOGY UNIVERSITY".

    // In university case, this could be the faculty name.
    // E.g. Faculty of Business and Technology.
    string academic_authority = 2;
    IssuerType issuer_type = 3; // Issuer organization type. Currently, University or School.

    // Public DID associated to the institution.
    // OpenCerts adds some other data, like URL, email, or phone number.
    string did = 4;
}

message Signer {
    repeated string names = 1; // Names of the signer.
    repeated string surnames = 2; // Surnames of the signer.
    string role = 3; // Rector, Dean, etc.
    string did = 4; // The public DID associated with the signer.
    string title = 5; // Title to address the person (Mr., Dr., Prof., etc.)
}

// For now, Universites and schools.
enum IssuerType {
    University = 0;
    School = 1;
}

message SubjectData {
    repeated string names = 1; // Names of the subject.
    repeated string surnames = 2; // Surnames of the subject.
    Date date_of_birth = 3; // Holder's date of birth.
    PersonalId id_document = 4; // Optional identification number of the holder.
    // @exclude
    // OpenCerts also adds phone number, email address, URL, studentId, and unclear values "nric" and "fin".
}

message PersonalId {
    string id = 1; // A unique identifier of the individual, according to document type.
    IdDocumentType document_type = 2; // E.g., passport, driver licence, or national card.
}

enum IdDocumentType {
    NationalIdCard = 0;
    Passport = 1;
}

/*
   @exclude
   Below we can see the messages used to exchange credentials between actors.
*/
message IssuerSentCredential {
    oneof value {
        AlphaCredential alpha_credential = 1;
        Credential credential = 2;
    }
}

message Credential {
    // Type ID to enable dispatch to correct credential processor.
    string type_id = 1;

    // JSON or JWT encoded credential document (to discuss).
    string credential_document = 2;
}

message HolderSentCredential {
    AlphaCredential credential = 1;
}

message ProofRequest {
    repeated string type_ids = 1;
    string connection_token = 2;
}

message EncryptedMessage {
    // The identifier of the key used to encrypt the message. This might be empty if the receiver uses only one key.
    string key_id = 1;
    // Encrypted content of the message. After decryption, it should be deserialized as an AtalaMessage instance.
    bytes encrypted_content = 2;
}

message RegisterAddressMessage {
    string cardano_address = 1;
    string cardano_network = 2;
}

message PayIdMessage {
    string payment_information = 1;
}

message PayIdNameRegistrationMessage {
    string name = 1;
}

message InitiateTrisaCardanoTransactionMessage {
    string sourceCardanoAddress = 1;
    string desinationCardanoAddress = 2;
    int64 lovelaceAmount = 3;
    string trisaVaspHost = 4;
    int32 trisaVaspHostPortNumber = 5;
}

message AddressRegisteredMessage {}

message PayIdNameRegisteredMessage {}

message PayIdNameTakenMessage {
    string message = 1;
}

message PaymentInformationSaved {}

message CheckPayIdNameAvailabilityMessage {
    string name_to_check = 1;
}

message CheckPayIdNameAvailabilityResponse {
    bool available = 1;
}

message MirrorMessage {
    oneof message {
        RegisterAddressMessage register_address_message = 1;
        PayIdMessage pay_id_message = 2;
        PayIdNameRegistrationMessage pay_id_name_registration_message = 3;
        InitiateTrisaCardanoTransactionMessage initiate_trisa_cardano_transaction_message = 4;
        AddressRegisteredMessage address_registered_message = 5;
        PayIdNameRegisteredMessage payId_name_registered_message = 6;
        PayIdNameTakenMessage payId_name_taken_message = 7;
        PaymentInformationSaved payment_information_saved = 8;
        CheckPayIdNameAvailabilityMessage check_payId_name_availability_message = 9;
        CheckPayIdNameAvailabilityResponse check_payId_name_availability_response = 10;
    }
}

message StartAcuantProcess {
    string document_instance_id = 1;
    string bearer_token = 2;
}

message AcuantProcessFinished {
    string document_instance_id = 1;
    bytes selfie_image = 2;
}

message KycBridgeMessage {
    oneof message {
        StartAcuantProcess start_acuant_process = 1;
        AcuantProcessFinished acuant_process_finished = 2;
    }
}

// ATA-3250: Until we implement e2e encryption, we will share
// credentials using this message.
message PlainTextCredential {
    string encoded_credential = 1; // The encoded and signed credential.
    string encoded_merkle_proof = 2; // The encoded Merkle proof of inclusion associated with the encodedCredential.
}

// Used to notify the apps that a credential was revoked.
message CredentialRevoked {
    string encoded_credential = 1; // The encoded and signed credential.
    string reason = 2; // An optional revocation reason, as provided by the issuer.
}

message AtalaErrorMessage {
    google.rpc.Status status = 1;
}

message AtalaMessage {
    oneof message {
        IssuerSentCredential issuer_sent_credential = 1;
        HolderSentCredential holder_sent_credential = 2;
        ProofRequest proof_request = 3;
        EncryptedMessage encrypted_message = 4;
        MirrorMessage mirror_message = 5;
        PlainTextCredential plain_credential = 6;
        KycBridgeMessage kyc_bridge_message = 7;
        CredentialRevoked credential_revoked = 8;
        AtalaErrorMessage atala_error_message = 9;
    }
    // Optional, if set, it's the id of an existing message from the same connection.
    // It means that sent message is a reply to one of messages received by the sender.
    string reply_to = 101;
}
