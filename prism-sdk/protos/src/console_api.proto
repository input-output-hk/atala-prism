syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "console_models.proto";
import "common_models.proto";
import "node_models.proto";
import "connector_api.proto";
import "google/protobuf/timestamp.proto";

// The Management Console API.
service ConsoleService {
  // Checks if the service is healthy.
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}

  // Retrieves numbers about the operations done in the Management Console.
  rpc GetStatistics (GetStatisticsRequest) returns (GetStatisticsResponse) {}

  // Binds DID to institution. This is required before invoking any API.
  // The DID is expected to be resolvable from the node before issuing any credential.
  rpc RegisterDID (RegisterConsoleDIDRequest) returns (RegisterConsoleDIDResponse) {}

  // Returns the details for the authenticated user.
  rpc GetCurrentUser (GetConsoleCurrentUserRequest) returns (GetConsoleCurrentUserResponse) {}

 // Updates an existing participant's profile.
 rpc updateParticipantProfile (ConsoleUpdateProfileRequest) returns (ConsoleUpdateProfileResponse) {}

}

// The Contacts API.
service ContactsService {
  // Creates a contact for the authenticated institution.
  // Errors:
  // A group with a passed name does not exist (NOT_FOUND).
  rpc CreateContact (CreateContactRequest) returns (CreateContactResponse) {}

  // Creates the contacts atomically for the authenticated institution.
  rpc CreateContacts (CreateContactsRequest) returns (CreateContactsResponse) {}

  // Retrieves the available contacts for the authenticated institution.
  rpc GetContacts (GetContactsRequest) returns (GetContactsResponse) {}

  // Retrieves a contact for the authenticated institution.
  rpc GetContact (GetContactRequest) returns (GetContactResponse) {}

  // Updates the given contact on the authenticated institution.
  rpc UpdateContact (UpdateContactRequest) returns (UpdateContactResponse) {}

  // Deletes a contact from the authenticated institution.
  rpc DeleteContact (DeleteContactRequest) returns (DeleteContactResponse) {}

  // Generates a connection token for the given contact.
  // This is required before being able to connect to the contact.
  rpc GenerateConnectionTokenForContact (GenerateConnectionTokenForContactRequest) returns (GenerateConnectionTokenForContactResponse) {}
}

// The Credentials Issuance API.
service CredentialIssuanceService {
  // Creates a new credential issuance.
  rpc CreateCredentialIssuance (CreateCredentialIssuanceRequest) returns (CreateCredentialIssuanceResponse) {}

  // Bulk version of CreateGenericCredential, creates credentials on the authenticated institution.
  rpc CreateGenericCredentialBulk (CreateGenericCredentialBulkRequest) returns (CreateGenericCredentialBulkResponse) {}

  // Gets a credential issuance.
  rpc GetCredentialIssuance (GetCredentialIssuanceRequest) returns (GetCredentialIssuanceResponse) {}
}

// The Credentials API.
service CredentialsService {
  // Creates a credential on the authenticated institution.
  // TODO: Consider renaming this to CreateDraftCredential given that this is not published.
  // TODO: Consider freezing the credential details once it gets published.
  rpc CreateGenericCredential (CreateGenericCredentialRequest) returns (CreateGenericCredentialResponse) {}

  // Retrieves the credentials created by the authenticated institution.
  rpc GetGenericCredentials (GetGenericCredentialsRequest) returns (GetGenericCredentialsResponse) {}

  // Retrieves the contact credentials created by the authenticated institution.
  rpc GetContactCredentials (GetContactCredentialsRequest) returns (GetContactCredentialsResponse) {}

  // Marks a credential as shared.
  // NOTE: This does not send the actual credential to the related contact, but it supposed to be
  //       invoked every time that credential is sent.
  rpc ShareCredential (ShareCredentialRequest) returns (ShareCredentialResponse) {}

  // Sends many credentials and marks them as shared.
  rpc ShareCredentials (ShareCredentialsRequest) returns (ShareCredentialsResponse) {}

  // Retrieves node information associated with a credential.
  // TODO: DEPRECATE when we migrate to the Management Console.
  rpc GetBlockchainData (GetBlockchainDataRequest) returns (GetBlockchainDataResponse) {}

  // Retrieves node information associated with a batch, and optionally, specific
  // credentials within a batch.
  rpc GetLedgerData(GetLedgerDataRequest) returns (GetLedgerDataResponse) {}

  // Publishes a credential batch to the blockchain.
  // This method also stores the published batch on the database.
  // However, it does not store the individual credentials on the
  // console (see StorePublishedCredential).
  rpc PublishBatch (PublishBatchRequest) returns (PublishBatchResponse) {}

  // This request stores the information associated to a credential in the console database.
  // The endpoint assumes that the credential has been published in a batch through the PublishBatch endpoint.
  rpc StorePublishedCredential (StorePublishedCredentialRequest) returns (StorePublishedCredentialResponse) {}

  // Revokes a single credential by publishing the operation on the node and storing
  // the involved transaction ID in the database.
  // Ensures to send the CredentialRevoked wrapped in an AtalaMessage to the contact to notify that the credential
  // was revoked.
  rpc RevokePublishedCredential (RevokePublishedCredentialRequest) returns (RevokePublishedCredentialResponse) {}

  // Deletes credentials from the Management Console database.
  // Returns error when trying to delete published credentials. Revoked credentials can be deleted.
  // If deletion of one credential fails, the deletion of other credentials also fails.
  rpc DeleteCredentials (DeleteCredentialsRequest) returns (DeleteCredentialsResponse) {}
}

// The Credential Types API.
service CredentialTypesService {
  // Retrieves the available credential types on the authenticated institution.
  rpc GetCredentialTypes (GetCredentialTypesRequest) returns (GetCredentialTypesResponse) {}

  // Retrieves the credential type on the authenticated institution.
  rpc GetCredentialType (GetCredentialTypeRequest) returns (GetCredentialTypeResponse) {}

  // Creates a credential type on the authenticated institution.
  rpc CreateCredentialType (CreateCredentialTypeRequest) returns (CreateCredentialTypeResponse) {}

  // Updates an existing credential type.
  rpc UpdateCredentialType (UpdateCredentialTypeRequest) returns (UpdateCredentialTypeResponse) {}

  // Updates an existing credential type and marks it as ready.
  rpc MarkAsReadyCredentialType (MarkAsReadyCredentialTypeRequest) returns (MarkAsReadyCredentialTypeResponse) {}

  // Updates an existing credential type and marks it as archived.
  rpc MarkAsArchivedCredentialType (MarkAsArchivedCredentialTypeRequest) returns (MarkAsArchivedCredentialTypeResponse) {}
}

// The Groups API.
service GroupsService {
  // Creates a group on the authenticated institution.
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {}

  // Retrieves the available groups on the authenticated institution.
  rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {}

  // Updates an existing group by adding new contacts and removing some of the old ones.
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {}

  // Copies group using the existing group ID and passed name.
  rpc CopyGroup (CopyGroupRequest) returns (CopyGroupResponse) {}

  // Deletes an existing group by its ID.
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {}
}

// The API for received credentials.
service CredentialsStoreService {
  // Stores a received credential.
  // This is invoked from the wallet after receiving a credential.
  rpc StoreCredential (StoreCredentialRequest) returns (StoreCredentialResponse) {}

  // Finds the received credentials when filters are provided.
  rpc GetStoredCredentialsFor (GetStoredCredentialsForRequest) returns (GetStoredCredentialsForResponse) {}

  // Finds the latest credentialExternalId received.
  // This is invoked from the wallet to know what the latest received credential is, which enables us to avoid
  // processing the same received credential twice.
  rpc GetLatestCredentialExternalId (GetLatestCredentialExternalIdRequest) returns (GetLatestCredentialExternalIdResponse) {}
}

// Request to get usage statistics for the authenticated institution.
message GetStatisticsRequest {
  // The query interval for inspection.
  // This can be missing, in which case the response will contain all available statistics.
  TimeInterval interval = 1;
}

// Response with the usage statistics for the authenticated institution.
message GetStatisticsResponse {
  int32 numberOfContacts = 1; // The total number of contacts created.
  int32 numberOfContactsPendingConnection = 2; // The total number of contacts that have not yet accepted the connection.
  int32 numberOfContactsConnected = 3; // The total number of contacts that have accepted the connection.
  int32 numberOfGroups = 4; // The total number of groups created.
  int32 numberOfCredentialsInDraft = 5; // The total number of credentials that have not yet been published to the blockchain.
  int32 numberOfCredentialsPublished = 6; // The total number of credentials published to the blockchain.
  int32 numberOfCredentialsReceived = 7; // The total number of credentials received from contacts.
}

// Request to register DID.
// TODO: Verify DID's ownership.
message RegisterConsoleDIDRequest {
  // The DID associated with the institution.
  string did = 1;

  // The way to identify the institution.
  string name = 2;

  // The logo linked to the institution (optional).
  bytes logo = 3;
}
// Confirmation of DID registration.
message RegisterConsoleDIDResponse {}

// Request to get the authenticated user details.
message GetConsoleCurrentUserRequest {}
// The authenticated user details.
message GetConsoleCurrentUserResponse {
  string name = 1; // The name.
  bytes logo = 2; // The associated logo (optional).
}

// Request to create a contact on the authenticated institution.
message CreateContactRequest {
  // Optional. When present, the given contact gets assigned to a group with the given name.
  // TODO: We likely need a list of groups instead, also, use group id instead of the name.
  string groupName = 1;

  // Arbitrary data for the contact. This data should be a valid JSON. If missing, "{}" will be used.
  string jsonData = 2;

  // The ID provided by the institution when the contact was created.
  // An institution cannot have two contacts with the same external ID.
  // The same ID can be used by different institutions.
  string externalId = 3;

  // The contact's name. This is required for the Management Console and ignored on the connector.
  string name = 4;

  // Metadata used to authenticate GenerateConnectionTokenRequest to connector.
  // Frontend must sign GenerateConnectionTokenRequest with count value equal to number of contacts and
  // pass signed request metadata through this message.
  // All fields of this message are required.
  ConnectorRequestMetadata generateConnectionTokensRequestMetadata = 5;
}
// Response after creating a contact.
message CreateContactResponse {
  Contact contact = 1; // The created contact.
}

// Request to create contacts on the authenticated institution.
// The request is rejected when one or more of these conditions are met:
// - No contacts provided.
// - Any contact is invalid.
// - Contacts with duplicate external IDs.
// - Duplicate groups.
// - A group does not exist in the authenticated institution.
message CreateContactsRequest {
  // Optional, when present, the contacts get assigned to these groups (identified by id).
  repeated string groups = 1;

  // The contacts to create.
  repeated Contact contacts = 2;

  message Contact {
    // The ID provided by the institution when the contact was created.
    // An institution cannot have two contacts with the same external ID.
    // The ID could be repeated in different institutions.
    string externalId = 3;

    // The contact's name.
    string name = 4;

    // Arbitrary data for the contact, should be a valid json, when missing, "{}" will be used,
    string jsonData = 5;
  }

  // Metadata used to authenticate GenerateConnectionTokenRequest to connector.
  // Frontend must sign GenerateConnectionTokenRequest with count value equal to 1 and
  // pass signed request metadata through this message.
  // All fields of this message are required.
  ConnectorRequestMetadata generateConnectionTokensRequestMetadata = 6;
}
// Response after creating contacts.
message CreateContactsResponse {
  int32 contactsCreated = 1; // the number of contacts created.
}

// Request to retrieve the contacts from the authenticated institution.
//
// The result is sorted by the contact's creation date in ascending order. Contacts with the same creation date are sorted by contact ID.
message GetContactsRequest {
  int32 limit = 1; // The maximum amount of contacts to return. The amount must be greater than zero.
  // The last seen contact (if any). Returned contacts start after this one, just for the connector integration.
  // TODO: Remove once the connector integration is removed.
  string lastSeenContactId = 2;
  // If provided, it gets only the contacts that belong to this group, just for the connector integration.
  // TODO: Remove once the connector integration is removed.
  string groupName = 3;
  // Retrieves the next items based on the given scroll ID, when provided.
  // This applies only to the Management Console, the connector still works with the lastSeenContactId.
  string scrollId = 4;
  // When provided, it filters the results based on the given criteria, just for the Management Console.
  FilterBy filterBy = 5;
  // When provided, it sorts the results by the given criteria.
  SortBy sortBy = 6;

  // Possible ways to filter the results from GetContactsRequest.
  message FilterBy {
    string groupName = 1; // If provided, it only gets the contacts that belong to this group.
    Date createdBy = 2; // If provided, the contacts should have been created in the given date.
    string name = 3; // If provided, the contacts should partially match the given name.
    string externalId = 4; // If provided, the contacts should partially match the given externalId.
  }

  // The possible ways to sort the results.
  message SortBy {
    Field field = 1; // The field used to sort the results by.
    SortByDirection direction = 2; // Specifies the order (ascending/descending) of the results (ascending by default).

    // The possible fields to sort the results by.
    enum Field {
      UNKNOWN = 0; // If the value is missing, we take the default one, CREATED_AT
      CREATED_AT = 1; // The createdAt field.
      NAME = 2; // The name field.
      EXTERNAL_ID = 3; // The externalId field.
    }
  }
}
// Response with the retrieved contacts.
message GetContactsResponse {
  // The contacts found.
  // NOTE: This is only for the connector's implementation, which will be removed once the frontend migrates out of it.
  repeated Contact contacts = 1;
  // The scroll ID to retrieve the next items.
  // This applies only to the Management Console, the connector still needs to compute the lastSeenContactId.
  string scrollId = 2;

  // The contacts found filled with the credential counters,
  // NOTE: The connector's implementation does not use this,
  repeated ContactDetails data = 3;

  // Represents a contact in the response.
  message ContactDetails {
    Contact contact = 1; // The contact.
    int32 numberOfCredentialsReceived = 2; // The number of credentials received from this contact.
    // The number of credentials created for this contact (includes draft and published credentials).
    int32 numberOfCredentialsCreated = 3;
  }
}

// Request to retrieve a contact from the authenticated institution.
message GetContactRequest {
  string contactId = 1; // The ID used to find the contact.
}
// Response for the retrieved contact.
message GetContactResponse {
  Contact contact = 1; // The retrieved contact.
  repeated Group groups = 2; // Available groups.
  repeated StoredSignedCredential receivedCredentials = 3; // Credentials received.
  repeated CManagerGenericCredential issuedCredentials = 4; // Credentials found.
}

// Request to update a contact from the authenticated institution.
// All fields are required. This is what the contact will be updated to.
message UpdateContactRequest {
  string contactId = 1; // The ID for the contact to update.
  string newExternalId = 2; // The new externalId.
  string newName = 3; // The new name.
  string newJsonData = 4; // The new arbitrary JSON data. If missing, "{}" will be used
}
// Response after updating the contact.
message UpdateContactResponse {}

// Request to delete a contact from the authenticated institution.
message DeleteContactRequest {
  string contactId = 1; // The ID used to delete the contact.
  // If true, related credentials will be deleted along with the contact.
  // If false and has any related credentials, the request will fail to delete the contact.
  // If false and has no related credentials, only the contact will be deleted.
  bool deleteCredentials = 2;
}

// Response for the deleted contact.
message DeleteContactResponse {
}

// Request to generate a connection token for the given contact on the authenticated institution.
message GenerateConnectionTokenForContactRequest {
  string contactId = 1; // The contact that will be linked to the token.
}
// Response after generating a connection token.
message GenerateConnectionTokenForContactResponse {
  string token = 1; // The token that needs to be shared with the user to accept the connection.
}

// Request to create a new credential issuance.
message CreateCredentialIssuanceRequest {
  string name = 1; // Name of the credential issuance.
  string credentialTypeId = 2; // // The ID (UUID) of the credential type used as template for this credential.
  repeated CredentialIssuanceContact credentialIssuanceContacts = 3; // The contacts and their credential data.
}
// Response to creating a credential issuance.
message CreateCredentialIssuanceResponse {
  string credentialIssuanceId = 1; // ID of the credential issuance just created.
}

// Request to create a credential issuance for the authenticated institution.
// The difference with CreateCredentialIssuanceRequest is that this request takes a JSON parameter.
message CreateGenericCredentialBulkRequest {
  // The JSON that contains the credentials data in this issuance.
  // The expected structure is:
  // {
  //    "issuance_name": String,
  //    "credential_type_id": String,
  //    "drafts" : [
  //      {
  //        "external_id": String,
  //        "credential_data": JSON,
  //        "group_ids": [String],
  //      }
  //    ]
  // }
  string credentialsJSON = 1;
}
// Response when a bulk of credentials is created.
message CreateGenericCredentialBulkResponse {
  string credentialIssuanceId = 1; // The ID of the credential issuance.
}

// Request to get a credential issuance.
message GetCredentialIssuanceRequest {
  string credentialIssuanceId = 1; // ID of the credential issuance.
}
// Response to getting a credential issuance.
message GetCredentialIssuanceResponse {
  string name = 1; // Name of the credential issuance.
  string credentialTypeId = 2; // // The ID (UUID) of the credential type used as template for this credential.
  google.protobuf.Timestamp createdAt = 3; // Timestamp when the credential issuance was created.
  repeated CredentialIssuanceContact credentialIssuanceContacts = 4; // The contacts and their credential data.
}

// Credential Types.

// Request to get a list of all credential types on the authenticated institution.
message GetCredentialTypesRequest {}
// Response with the retrieved credential types.
message GetCredentialTypesResponse {
  repeated CredentialType credentialTypes = 1; // List of the credential types.
}

// Request to get a credential type on the authenticated institution. 
message GetCredentialTypeRequest {
  string credentialTypeId = 1; // Id of the credential type.
}
// Response with the retrieved credential type.
message GetCredentialTypeResponse {
  CredentialTypeWithRequiredFields credentialType = 1; // The retrieved credential type.
}

// Request to create a credential type on the authenticated institution.
message CreateCredentialTypeRequest {
  CreateCredentialType credentialType = 2; // New credential type.
}
// Response with the created credential type.
message CreateCredentialTypeResponse {
  CredentialTypeWithRequiredFields credentialType = 1; // The created credential type.
}

// Request to update a credential type on the authenticated institution.
message UpdateCredentialTypeRequest {
  UpdateCredentialType credentialType = 2; // Credential type to update.
}
// Empty response after credential type update.
message UpdateCredentialTypeResponse {}

// Request to change credential type state to ready on the authenticated institution.
message MarkAsReadyCredentialTypeRequest {
  string credentialTypeId = 1; // Credential type to update.
}
// Empty response after state update.
message MarkAsReadyCredentialTypeResponse {}

// Request to change state to archived in credential type on the authenticated institution.
message MarkAsArchivedCredentialTypeRequest {
  string credentialTypeId = 1; // Credential type to update.
}
// Empty response after state update.
message MarkAsArchivedCredentialTypeResponse {}

// Request to create a group on the authenticated institution.
message CreateGroupRequest {
  string name = 1; // The group name, which must not exist.
  repeated string contactIds = 2; // Contacts to put in the new group. New contacts cannot be duplicate.
}
// Response after creating a group.
message CreateGroupResponse {
  Group group = 1; // The group created and its associated details.
}

// Request to retrieve the available groups on the authenticated institution.
message GetGroupsRequest {
  // Optional. When provided, only groups related to the given contact are included.
  // TODO: Remove when the connector integration is removed.
  string contactId = 1;
  // The maximum amount of groups to return (optional, default value is 10).
  int32 limit = 2;
  // The offset for pagination (optional, default is 0).
  int32 offset = 3;
  // When provided, filter the results based on the given criteria, just for the Management Console.
  FilterBy filterBy = 4;
  // Optional. When provided, it sorts the results by the given criteria (sorted by name in ascending order by default).
  SortBy sortBy = 5;
  // The possible ways to filter the results from GetGroupsRequest.
  message FilterBy {
    string name = 1; // If provided, it returns the groups containing the given name (case insensitive).
    Date createdAfter = 2; // If provided, it returns groups created at the given date or after.
    Date createdBefore = 3; // If provided, it returns groups created before or at the given date.
    string contactId = 4; // If provided, it returns groups related to the given contact only.
  }
  // The possible ways to sort the results.
  message SortBy {
    Field field = 1; // The field used to sort the results by.
    SortByDirection direction = 2; // Sorts results in ascending/descending order (ascending by default).

    // The possible fields to sort the results by.
    enum Field {
      UNKNOWN = 0; // If the value is missing, we take the default one: NAME.
      NAME = 1; // The name field.
      CREATED_AT = 2; // The createdAt field.
      NUMBER_OF_CONTACTS = 3; // Number of contacts.
    }
  }
}
// Response with the available groups.
message GetGroupsResponse {
  // The available groups.
  repeated Group groups = 1;
  // The total number of groups that matches the filterBy criteria supplied in request,
  // used to offset based pagination to compute the number of available pages.
  int32 totalNumberOfGroups = 2;
}

// Request to update a group.
message UpdateGroupRequest {
  string groupId = 1; // The ID of the existing group.
  repeated string contactIdsToAdd = 2; // The list of contact IDs to be added to the specified group.
  repeated string contactIdsToRemove = 3; // The list of contact IDs to be removed from the specified group.
  string name = 4; // The new name for the group.
}
// Response after updating a group.
message UpdateGroupResponse {}

// Request to copy a group.
message CopyGroupRequest {
  string groupId = 1; // The ID of the existing group.
  string name = 2; // The new name of the copied group.
}
// Response after copying a group.
message CopyGroupResponse {
  string groupId = 1; // The new group's ID.
}

// Request to delete a group.
message DeleteGroupRequest {
  string groupId = 1; // The ID of the existing group to delete.
}

// Response after deleting a group.
message DeleteGroupResponse {}

// Request to create a credential on the authenticated institution.
message CreateGenericCredentialRequest {
  // The contact ID to link the credential to.
  // Required if the externalId is not provided, it is ignored otherwise.
  string contactId = 1;

  // The credential payload as a JSON string.
  // A valid non-empty JSON is required.
  string credentialData = 2;

  // The group name linked to a credential.
  // TODO: Remove legacy argument, this was used for the Dec/2019 Georgia demo only.
  string groupName = 3;

  // The ID provided by the institution when the contact was created. If this timestamp is not provided,
  // the contactId is expected.
  string externalId = 4;

  // The ID (UUID) of the credential type used as a template for this credential.
  string credentialTypeId = 5;
}
// Response when a credential is created.
message CreateGenericCredentialResponse {
  CManagerGenericCredential genericCredential = 1; // The credential details.
}

// The authenticated institution is retrieving its issued credentials.
//
// The results are sorted in ascending order by creation date. Results with same creation date are sorted by their ID.
message GetGenericCredentialsRequest {
  // The maximum amount of credentials to return (optional, default value is 10).
  int32 limit = 1;
  // The offset for pagination (optional, default is 0).

  reserved 2; // Removed lastSeenCredentialId field 
  reserved "lastSeenCredentialId";

  int32 offset = 3;
  // When provided, filter the results based on the given criteria, just for the Management Console.
  FilterBy filterBy = 4;
  // Optional. When provided, it sorts the results by the given criteria (sorted by name in ascending order by default).
  SortBy sortBy = 5;

  // The possible ways to filter the results from GetGenericCredentialsRequest.
  message FilterBy {
    string credentialType = 1; // If provided, it returns the credentials containing the given type.
    Date createdAfter = 2; // If provided, it returns credentials created at the given date or after.
    Date createdBefore = 3; // If provided, it returns credentials created before or at the given date.
  }
  // The possible ways to sort the results.
  message SortBy {
    Field field = 1; // The field used to sort the results by.
    SortByDirection direction = 2; // Sorts results in ascending/descending order (ascending by default).

    // The possible fields to sort the results by.
    enum Field {
      UNKNOWN = 0; // If the value is missing, we take the default one: NAME.
      CREDENTIAL_TYPE = 1; // The credential type field.
      CREATED_ON = 2; // The createdOn field.
    }
  }
}
// Response with the credentials found.
message GetGenericCredentialsResponse {
  repeated CManagerGenericCredential credentials = 1; // The retrieved credentials.
}

// Request to share a credential, which just marks the credential as sent.
//
// This is intended to be invoked after sending the credential through the connector.
//
// TODO: Consider renaming this to MarkCredentialAsSent.
message ShareCredentialRequest {
  string cmanagerCredentialId = 2; // cmanager internal credential ID.
}
// Response after sharing a credential.
message ShareCredentialResponse {}

// Request to share many credentials, which sends credentials through the connector and marks them as sent.
message ShareCredentialsRequest {
  // Non-empty list of IDs of credentials that will be sent to the connector, and later marked as shared.
  repeated string credentialsIds = 1;

  // Request to connector containing messages with signed credentials.
  SendMessagesRequest sendMessagesRequest = 2;

  // Metadata used to authenticate SendMessagesRequest to connector.
  // Frontend must sign SendMessagesRequest that can be fetched.
  // From GetShareCredentialsRequestToSign gRPC Management Console method and
  // pass signed request through this message.
  // All fields of this message are required.
  ConnectorRequestMetadata sendMessagesRequestMetadata = 3;
}
// Response after sharing a credential.
message ShareCredentialsResponse {}

// Request to get the credentials for the given contact.
//
// As the expected amount of credentials per contact is small, no pagination is required.
message GetContactCredentialsRequest {
  string contactId = 1;
}
// Response with the contact credentials.
message GetContactCredentialsResponse {
  repeated CManagerGenericCredential genericCredentials = 1; // The credentials found.
}

// Request to get blockchain-related information for a credential.
message GetBlockchainDataRequest {
  string encodedSignedCredential = 1; // Encoded credential we want to retrieve information for.
}

// Response with the information found in the blockchain.
message GetBlockchainDataResponse {
  TransactionInfo issuanceProof = 1; // Transaction information associated with the credential issuance event.
}

// Request to store a received credential.
message StoreCredentialRequest {
  string connectionId = 1; // The connection ID retrieved from the connector message that carried the credential.
  string encodedSignedCredential = 2; // The encoded signed data.
  string credentialExternalId = 3; // A credential's external id (currently, the ID of the connector message that carried it).
  string batchInclusionProof = 4; // Inclusion proof associated to the encodedSignedCredential.
}
// Response after storing a received credential.
message StoreCredentialResponse {
}

// Request to find the received credentials.
message GetStoredCredentialsForRequest {
  // Optional, allows to retrieve received credentials from a single contact.
  // TODO: Rename to `contactId` after removing legacy methods.
  string individualId = 1;
}
// Response with the received credentials.
message GetStoredCredentialsForResponse {
  repeated StoredSignedCredential credentials = 1; // The received credentials.
}

// Request to find the latest credentialExternalId.
message GetLatestCredentialExternalIdRequest {}
// Response with the latest credentialExternalId.
message GetLatestCredentialExternalIdResponse {
  string latestCredentialExternalId = 1;
}

// Request to publish a credential batch to the blockchain.
message PublishBatchRequest {
  SignedAtalaOperation issueCredentialBatchOperation = 1; // A signed instance of IssueCredentialBatch operation.
}
// Response after publishing a batch.
message PublishBatchResponse {
  string batchId = 1; // The protocol assigned ID for the batch.
  TransactionInfo transactionInfo = 2; // The blockchain transaction details where the batch was published.
}

// Request to store a credential for which its batch has been published.
message StorePublishedCredentialRequest {
  string encodedSignedCredential = 1; // The encoded credential to store.
  string consoleCredentialId = 2; // Management Console internal credential ID.
  string batchId = 3; // The protocol ID associated with the batch that contains this credential.
  string encodedInclusionProof = 4; // The Merkle proof of inclusion for the batch associated with the credential.
}
message StorePublishedCredentialResponse {}

// Request to revoke a published credential.
message RevokePublishedCredentialRequest {
  string credentialId = 1; // The internal credential ID, used to link the revocation transaction ID. It must be an UUID.
  // A signed instance of the RevokeCredentials operation.
  // Note that even though the operation allows many credentials to be revoked, the request
  // is only accepted when only a single credential involved.
  SignedAtalaOperation revokeCredentialsOperation = 2;
}
// Response after revoking a credential.
message RevokePublishedCredentialResponse {
  TransactionInfo transactionInfo = 1; // The blockchain transaction details for the revocation.
}

// Request to delete many credentials.
message DeleteCredentialsRequest {
  repeated string credentialsIds = 1; // IDs of credentials to delete (non-empty).
}

// Confirmation of credential deletion.
message DeleteCredentialsResponse {}

// Requests ledger data for a specific batch and credential recorded by the node.
message GetLedgerDataRequest {
  string batchId = 1; // The batchId (assigned by the protocol) that we want information to be returned for.
  // Optional. The credential hash that we want information to be returned for. We assume that the credential
  // was issued in the batch associated with `batchId`.
  bytes credentialHash = 2;
}

// Returns the ledger data from the node associated to a batch and credential.
message GetLedgerDataResponse {
  LedgerData batchIssuance = 1; // If present, the ledger data associated with the issuance of the batch requested.
  LedgerData batchRevocation = 2; // If present, the ledger data associated with the revocation of the batch requested.
  LedgerData credentialRevocation = 3; // If present, the ledger data associated with the revocation of the credential requested.
}

// Request to update participant's profile name and logo.
message ConsoleUpdateProfileRequest {
  // The way to identify the institution.
  string name = 1;
  // The logo linked to the institution (optional).
  // If logo is missing, the field will be set to empty.
  bytes logo = 2;
}

// Confirmation of participant's profile updated.
message ConsoleUpdateProfileResponse {}
