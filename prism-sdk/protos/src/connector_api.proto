syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

import "common_models.proto";
import "connector_models.proto";
import "node_models.proto";

package io.iohk.atala.prism.protos;

// The Connector API.
service ConnectorService {
  // Checks if the service is healthy.
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

  // Retrieves a connection for a given connection token.
  rpc GetConnectionByToken (GetConnectionByTokenRequest) returns (GetConnectionByTokenResponse) {}

  // Gets active connections for the authenticated user.
  rpc GetConnectionsPaginated (GetConnectionsPaginatedRequest) returns (GetConnectionsPaginatedResponse) {}

  // Returns info about a connection token (creator info, for example).
  // This is commonly used to verify whether you want to accept the connection or not.
  rpc GetConnectionTokenInfo (GetConnectionTokenInfoRequest) returns (GetConnectionTokenInfoResponse) {}

  // Instantiates a connection from a connection token.
  rpc AddConnectionFromToken (AddConnectionFromTokenRequest) returns (AddConnectionFromTokenResponse) {}

  // Revokes an active connection (this can be done from any of the sides involved).
  // Once the connection is revoked:
  // - No messages will be accepted.
  // - The existing messages are deleted (the table is supposed to be eventually emptied anyway).
  // - The related contact connection status gets updated.
  rpc RevokeConnection (RevokeConnectionRequest) returns (RevokeConnectionResponse) {}

  // Binds a DID to an institution.
  // This is commonly expected for institutions that require a public DID. The method
  // invokes the node to publish the DID to the blockchain
  // or binds existing already published DID to an institution if passed.
  // TODO: Delete method, we should not register the DID but receive the registered one.
  // Errors:
  // Invalid DID (INVALID_ARGUMENT).
  // Invalid DID document (INVALID_ARGUMENT).
  // DID Document does not match DID (INVALID_ARGUMENT).
  // DID already exists (INVALID_ARGUMENT).
  // Expected published DID (INVALID_ARGUMENT).
  // The passed DID was not found on the node (INVALID_ARGUMENT).
  // Expected existing DID or atala operation (INVALID_ARGUMENT).
  rpc RegisterDID (RegisterDIDRequest) returns (RegisterDIDResponse) {}

  // Generates connection tokens that can be used to instantiate connections.
  // Errors:
  // Billing plan does not allow token generation (PERMISSION_DENIED).
  rpc GenerateConnectionToken (GenerateConnectionTokenRequest) returns (GenerateConnectionTokenResponse) {}

  // Returns messages received after a specific timepoint, sorted in ascending order by reception time.
  rpc GetMessagesPaginated (GetMessagesPaginatedRequest) returns (GetMessagesPaginatedResponse) {}

  // Streams the messages received after the given optional message.
  rpc GetMessageStream (GetMessageStreamRequest) returns (stream GetMessageStreamResponse) {}

  // Return messages received on the given connection. No pagination is required, as the number of messages is small.
  rpc GetMessagesForConnection (GetMessagesForConnectionRequest) returns (GetMessagesForConnectionResponse) {}

  // Returns public keys that can be used for secure communication with the other end of the connection.
  rpc GetConnectionCommunicationKeys (GetConnectionCommunicationKeysRequest) returns (GetConnectionCommunicationKeysResponse) {}

  // Sends message over a connection.
  // Errors:
  // Unknown connection (UNKNOWN).
  // Connection closed (FAILED_PRECONDITION).
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse) {}

  // Sends multiple messages atomically. If one message cannot be sent (because of an unknown connection, for example),
  // the rest also remain unsent. This method uses connection tokens instead of connections IDs.
  // Errors:
  // Unknown connections (UNKNOWN).
  // Connections closed (FAILED_PRECONDITION).
  rpc SendMessages (SendMessagesRequest) returns (SendMessagesResponse) {}

  // Returns information about the Connector and Node builds.
  rpc GetBuildInfo (GetBuildInfoRequest) returns (GetBuildInfoResponse);

  // Returns the details for the authenticated user,
  rpc GetCurrentUser (GetCurrentUserRequest) returns (GetCurrentUserResponse);

   // Updates an existing participant's profile.
   rpc updateParticipantProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {}
}

service ContactConnectionService {
  rpc GetConnectionStatus (ConnectionsStatusRequest) returns (ConnectionsStatusResponse) {}
}

// Finds a connection by the given token.
message GetConnectionByTokenRequest {
  string token = 1; // The token related to the connection. This must not be empty.
}
// The response while finding a connection by token.
message GetConnectionByTokenResponse {
	io.iohk.atala.prism.protos.Connection connection = 1;
}

// Requests connections instantiated by/with us, possibly after a known connection.
//
// The results are sorted in ascending orer by the time the connection was created.
message GetConnectionsPaginatedRequest {
  string last_seen_connection_id = 1; // Returned connections will have been created after the last seen connection (optional field).
  int32 limit = 2; // The maximum number of connections to return; must be greater than 0.
}

// Result with instantiated connections.
message GetConnectionsPaginatedResponse {
  repeated io.iohk.atala.prism.protos.ConnectionInfo connections = 1; // Connections sorted in ascending order by instantiation time.
}

// Request to obtain information of connection token.
message GetConnectionTokenInfoRequest {
  string token = 1; // The token value to get information for.
}

// Result with information on connection token.
message GetConnectionTokenInfoResponse {
  string creator_name = 2; // Creator name.
  bytes creator_logo = 3; // Creator logo.
  string creator_did = 4; // Creator did.
  reserved 1; // Removed creator field
  reserved "creator";
}

// Request to instantiate a connection using a token.
message AddConnectionFromTokenRequest {
  // This used to allow the holder public key as (x, y). It was replaced by the holderEncodedPublicKey field.
  reserved 2;
  reserved "holderPublicKey";

  // This was used to allow taking payments while creating connections, which is no longer required.
  reserved 3;
  reserved "paymentNonce";

  string token = 1; // A token to instantiate a connection.
  io.iohk.atala.prism.protos.EncodedPublicKey holder_encoded_public_key = 4; // Uncompressed encoded public key.
}

// Confirmation of connection instantiation.
message AddConnectionFromTokenResponse {
  io.iohk.atala.prism.protos.ConnectionInfo connection = 1; // Instantiated connection information.
}

// Request to revoke a connection.
message RevokeConnectionRequest {
  string connection_id = 1; // The ID of connection to delete.
}

// Confirmation of connection revocation.
message RevokeConnectionResponse {
}

// Request to generate a connection token.
message GenerateConnectionTokenRequest {
  int32 count = 1; // Amount of tokens to generate (optional, the default value is 1).
}

// Result with generated token.
message GenerateConnectionTokenResponse {
  repeated string tokens = 1; // Generated tokens.
}

// Request to return messages for us after the given known message, if any.
// Sorted by reception time in ascending order.
message GetMessagesPaginatedRequest {
  string last_seen_message_id = 1; // Returned messages will have been received after the given message, if any.
  int32 limit = 2; // The maximum number of messages to return. It must be greater than 0.
}

// Response with messages.
message GetMessagesPaginatedResponse {
  repeated io.iohk.atala.prism.protos.ReceivedMessage messages = 1; // Messages sorted by reception time in ascending order.
}

// Request to stream new messages, which starts the stream from messages received after the given lastSeenMessageId
message GetMessageStreamRequest {
  // Last message seen by the client, so only newer messages are returned.
  string last_seen_message_id = 1;
}

// Response for the new messages stream.
message GetMessageStreamResponse {
  io.iohk.atala.prism.protos.ReceivedMessage message = 1; // The received message.
}

// Finds available messages from the given connection.
// @exclude
// TODO: Remove unnecessary method, it was used before to parse received credentials but this is not required anymore.
message GetMessagesForConnectionRequest {
  string connection_id = 1;
}
message GetMessagesForConnectionResponse {
  repeated io.iohk.atala.prism.protos.ReceivedMessage messages = 1;
}

// Finds the available keys to send end-to-end encrypted messages.
message GetConnectionCommunicationKeysRequest {
  string connection_id = 1; // The connection we are interested in sending a message to.
}

message GetConnectionCommunicationKeysResponse {
  // Keys that can be used for communication with the other end of connection with their IDs.
  // keyId inside might be empty if there is just one key in the collection.
  repeated io.iohk.atala.prism.protos.ConnectionKey keys = 1;
}

// Request to send message.
message SendMessageRequest {
  string connection_id = 1; // Connection ID.
  bytes message = 2; // Raw message.
  // Optional id of a message. Must be valid UUID if provided. Random id will be generated
  // if not provided. Error will be returned when message with the same id already exists.
  string id = 3;
}

// Confirmation of message sending.
message SendMessageResponse {
  string id = 1; // Id of a message. Either provided by the sender or generated by Connector.
}

// Request to send multiple messages.
message SendMessagesRequest {
  // Messages to send. It can be empty, in which case no messages will be sent.
  repeated MessageToSendByConnectionToken messages_by_connection_token = 1;
}

// Confirmation of messages sending.
message SendMessagesResponse {
  repeated string ids = 1; // Ids of a messages. Either provided by the sender or generated by Connector.
}

// @exclude
// REGISTRATION AND ACCOUNT MANAGEMENT

// Request to register DID.
// @exclude
// TODO: Use the method to not register the DID on the blockchain.
message RegisterDIDRequest {
  oneof register_with {
    // The necessary operation to publish the DID to the blockchain.
    io.iohk.atala.prism.protos.SignedAtalaOperation create_did_operation = 1;
    // The already published DID.
    string existing_did = 5;
  }
  // The user's role.
  // @exclude
  // TODO: Remove, we don't use roles anymore.
  Role role = 2;

  // The way to identify the institution.
  string name = 3;

  // The logo linked to the institution.
  bytes logo = 4;

  enum Role {
    issuer = 0;
    verifier = 1;
  }
}

// Request to get the authenticated user details.
message GetCurrentUserRequest {}

// The authenticated user details.
message GetCurrentUserResponse {
  Role role = 1;
  string name = 2;
  bytes logo = 3;

  enum Role {
    issuer = 0;
    verifier = 1;
  }
}

// Confirmation of DID registration.
message RegisterDIDResponse {
  reserved 2; // Removed "transaction_info" field
  reserved "transaction_info";

  string did = 1;
  bytes operation_id = 3; // The internal identifier of the corresponding createDID operation. Empty if used existing DID in the corresponding request.
}

// Request to get information about this service.
message GetBuildInfoRequest {}

// The actual service's information.
message GetBuildInfoResponse {
  reserved 4; // buildTime

  string version = 1; // The service version.
  string scala_version = 2; // The Scala version used by the service.
  string sbt_version = 3; // The SBT version used to compile the service.
  string node_version = 5; // The node service version.
}

message ConnectionsStatusRequest {
  repeated string connection_tokens = 1;
}

message ConnectionsStatusResponse {
  repeated ContactConnection connections = 1;
}

// Request to update the participant profile name and logo
message UpdateProfileRequest {
  // The way to identify the institution.
  string name = 1;
  // The logo linked to the institution (optional field).
  // If logo is missing, this will be set to 'Empty'.
  bytes logo = 2;
}

// Confirmation of participants profile updated.
message UpdateProfileResponse {}
