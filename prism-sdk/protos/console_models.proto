syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "common_models.proto";
import "node_models.proto";

// Indicates the status on the contact's connection
enum ContactConnectionStatus {
  STATUS_MISSING = 0; // default value, represents the lack of status
  INVITATION_MISSING = 1; // the is no connection token generated and no invitation has been sent
  CONNECTION_MISSING = 2; // the contact has been invited and the connection token has been generated
  CONNECTION_ACCEPTED = 3; // the contact accepted the connection
  CONNECTION_REVOKED = 4; // the contact rejected the connection
}

// Represents a contact
message Contact {
  string contactId = 1; // the internal id to identify the contact
  string externalId = 2; // the id provided by the institution at contact creation time, commonly used to match the institution's record keeping system, for example, it could be the student id for a university
  string jsonData = 3; // arbitrary data for the contact, should be a valid json, when missing, "{}" will be used
  ContactConnectionStatus connectionStatus = 4; // the connection status for this contact
  string connectionToken = 5; // the connection token used to get this contact connected, present when the status is ConnectionMissing
  string connectionId = 6; // the connection id necessary to send messages to this contact, present when the status is ConnectionAccepted
  int64 createdAt = 7; // the timestamp when the contact was created
  string name = 8; // the contact's name, only used by management console, empty on the connector
}

message CredentialIssuanceContact {
  string contactId = 1; // ID of the contact the credential data is about
  string credentialData = 2; // Actual credential data of the contact, in JSON format
  repeated string groupIds = 3; // IDs of the groups the contact was taken from, empty if added directly
}

enum CredentialIssuanceStatus {
  CREDENTIAL_ISSUANCE_STATUS_UNKNOWN = 0; // Invalid value, should not happen
  DRAFT = 1; // The credential issuance is still being defined and is not final
  READY = 2; // The credential issuance has been defined but not all credentials have been issued
  COMPLETED = 3; // All the credentials from the credential issuance have been issued
}

// Represents a group, where contacts can be assigned to.
//
// A group is generally used to collect the contacts related to the same issuance event,
// for a university, it can be a graduation group.
message Group {
  string name = 1; // the group name
  string id = 2; // the unique id for the group, generated by the server
  uint64 createdAt = 3; // the time when the group was created
  int32 numberOfContacts = 4; // the number of contacts associated with the group
}

// Represents a credential with arbitrary data
message CManagerGenericCredential {
  // Credential identifier internal to the cmanager
  string credentialId = 1;

  // institution identifier internal to the cmanager/connector
  // TODO: Rename to institutionId
  string issuerId = 2;

  string contactId = 3; // contact identifier internal to cmanager/connector

  // The arbitrary JSON data involved in the credential (claims)
  string credentialData = 4;

  // The name of the institution according to the cmanager/connector internal data
  string issuerName = 5;

  // Group name associated to the credential in the cmanager internal data
  // TODO: Remove legacy field, it is not required anymore.
  string groupName = 6;

  // The arbitrary JSON data related to the contact
  string contactData = 7;

  // @exclude
  // the fields below will only be populated after the credential is published in the blockchain

  string nodeCredentialId = 8; // the id assigned to the published credential by the protocol
  bytes issuanceOperationHash = 9; // the hash of the associated issuance operation
  string encodedSignedCredential = 10; // the actual published credential
  uint64 publicationStoredAt = 11; // the time when the publication data was stored in the database
  string externalId = 12; // the id provided by the institution at contact creation time
  ContactConnectionStatus connectionStatus = 13; // used to know if contact has accepted the connection
  uint64 sharedAt = 14; // the last time when the credential was sent to the related contact
  TransactionInfo issuanceProof = 15; // underlying transaction information related to the credential issuance
}

// Represents a received credential
message StoredSignedCredential {
  // The contact that sent the credential.
  // TODO: Rename to contactId
  string individualId = 1;

  string encodedSignedCredential = 2; // The signed credential encoded as a string
  int64 storedAt = 3; // the time when the credential was stored in the database
  string externalId = 4; // the external id associated to the contact that sent the credential
}
