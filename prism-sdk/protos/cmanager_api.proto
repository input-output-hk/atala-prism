syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "cmanager_models.proto";
import "common_models.proto";
import "node_models.proto";

service CredentialsService {
    // Generic versions
    rpc CreateGenericCredential (CreateGenericCredentialRequest) returns (CreateGenericCredentialResponse) {}
    rpc GetGenericCredentials (GetGenericCredentialsRequest) returns (GetGenericCredentialsResponse) {}

    rpc GetContactCredentials (GetContactCredentialsRequest) returns (GetContactCredentialsResponse) {}

    // Publish an encoded signed credential into the blockchain
    rpc PublishCredential (PublishCredentialRequest) returns (PublishCredentialResponse) {}
}

service GroupsService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {}
    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {}

    // Update an existing group by adding new contacts and removing some of the old ones
    rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {}
}

// groups
message CreateGroupRequest {
    string name = 1;
}
message CreateGroupResponse {}

message GetGroupsRequest {}
message GetGroupsResponse {
    repeated Group groups = 1;
}

message UpdateGroupRequest {
    string groupId = 1; // the id of the existing group
    repeated string contactIdsToAdd = 2; // the list of contact ids to be added to the specified group
    repeated string contactIdsToRemove = 3; // the list of contact ids to be removed from the specified group
}
message UpdateGroupResponse {}

// generic credentials
// The authenticated issuer is creating a credential
message CreateGenericCredentialRequest {
    string contactId = 1; // required if the externalId isn't provided, otherwise, ignored.
    string credentialData = 2;
    string groupName = 3;
    string externalId = 4; // The id provided by the issuer at contact creation time, when this isn't provided,
                           // the contactId is expected.
}
message CreateGenericCredentialResponse {
    CManagerGenericCredential genericCredential = 1;
}

// The authenticated issuer is retrieving its issued credentials
message GetGenericCredentialsRequest {
    int32 limit = 1; // the max amount of credentials to return, must be > 0
    string lastSeenCredentialId = 2; // the last seen credential (if any), the returned credentials start after this one
}
message GetGenericCredentialsResponse {
    repeated CManagerGenericCredential credentials = 1;
}

message PublishCredentialRequest {
    string encodedSignedCredential = 1; // the encoded credential to publish
    string cmanagerCredentialId = 2; // cmanager internal credential id
    SignedAtalaOperation issueCredentialOperation = 3; // a signed instance of IssueCredential operation
    string nodeCredentialId = 4; // the credentialId computed by the protocol
    bytes operationHash = 5;  // the hash of the AtalaOperation sent inside the
                              // SignedAtalaOperation represented by the issueCredential
                              // field. This is needed for revocation as it represents
                              // the previous operation hash
}

message PublishCredentialResponse {
    TransactionInfo transactionInfo = 1;
}

message GetContactCredentialsRequest {
    string contactId = 1;
}
message GetContactCredentialsResponse {
    repeated CManagerGenericCredential genericCredentials = 1;
}
