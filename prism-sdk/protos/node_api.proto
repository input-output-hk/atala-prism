syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "common_models.proto";
import "node_models.proto";

service NodeService {
    rpc GetDidDocument(GetDidDocumentRequest) returns (GetDidDocumentResponse) {}

    rpc CreateDID(CreateDIDRequest) returns (CreateDIDResponse) {}

    rpc UpdateDID(UpdateDIDRequest) returns (UpdateDIDResponse) {}

    rpc IssueCredential(IssueCredentialRequest) returns (IssueCredentialResponse) {}

    rpc IssueCredentialBatch(IssueCredentialBatchRequest) returns (IssueCredentialBatchResponse) {}

    rpc RevokeCredential(RevokeCredentialRequest) returns (RevokeCredentialResponse) {}

    rpc GetCredentialState(GetCredentialStateRequest) returns (GetCredentialStateResponse) {}

    rpc GetNodeBuildInfo(GetNodeBuildInfoRequest) returns (GetNodeBuildInfoResponse) {}
}

message GetDidDocumentRequest {
    string did = 1;
}
message GetDidDocumentResponse {
    DIDData document = 1;
}

message CreateDIDRequest {
    SignedAtalaOperation signed_operation = 1;
}
message CreateDIDResponse {
    string id = 1; // DID suffix, where DID is in form did:prism.atala:[DID suffix]
    TransactionInfo transactionInfo = 2;
}

message UpdateDIDRequest {
    SignedAtalaOperation signed_operation = 1;
}
message UpdateDIDResponse {
    TransactionInfo transactionInfo = 1;
}

message IssueCredentialRequest {
    SignedAtalaOperation signed_operation = 1;
}
message IssueCredentialResponse {
    string id = 1; // credential id
    TransactionInfo transactionInfo = 2;
}

message IssueCredentialBatchRequest {
    SignedAtalaOperation signed_operation = 1;
}
message IssueCredentialBatchResponse {
    string batchId = 1; // id of the batch posted
    TransactionInfo transactionInfo = 2;
}

message RevokeCredentialRequest {
    SignedAtalaOperation signed_operation = 1;
}
message RevokeCredentialResponse {
    TransactionInfo transactionInfo = 1;
}

message GetNodeBuildInfoRequest {
}
message GetNodeBuildInfoResponse {
    string version = 1;
    string scalaVersion = 2;
    string millVersion = 3;
    string buildTime = 4;
}

message GetCredentialStateRequest {
    string credentialId = 1; // the id of the published credential (a.k.a. it is the output of the corresponding
                             // IssueCredential)
}

message GetCredentialStateResponse {
    string issuerDID = 1; // did used to sign the IssueCredential operation
    TimestampInfo publicationDate = 2; // If present: underlying blockchain timestamp that refers to the transaction that                                // contains the IssueCredential operation associated to the credential
    TimestampInfo revocationDate = 3;  // If present: underlying blockchain timestamp that refers to the transaction that RevokeCredential operation associated to the credential
}
