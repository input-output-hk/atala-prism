syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "console_models.proto";
import "common_models.proto";

// Represents a group, where contacts can be assigned to.
//
// A group is generally used to collect the contacts related to the same issuance event,
// for a university, it can be a graduation group.
message Group {
    string name = 1; // the group name
    string id = 2; // the unique id for the group, generated by the server
    uint64 createdAt = 3; // the time when the group was created
    int32 numberOfContacts = 4; // the number of contacts associated with the group
}

// Represents a credential with arbitrary data
message CManagerGenericCredential {
    // Credential identifier internal to the cmanager
    string credentialId = 1;

    // institution identifier internal to the cmanager/connector
    // TODO: Rename to institutionId
    string issuerId = 2;

    string contactId = 3; // contact identifier internal to cmanager/connector

    // The arbitrary JSON data involved in the credential (claims)
    string credentialData = 4;

    // The name of the institution according to the cmanager/connector internal data
    string issuerName = 5;

    // Group name associated to the credential in the cmanager internal data
    // TODO: Remove legacy field, it is not required anymore.
    string groupName = 6;

    // The arbitrary JSON data related to the contact
    string contactData = 7;

    // @exclude
    // the fields below will only be populated after the credential is published in the blockchain

    string nodeCredentialId = 8; // the id assigned to the published credential by the protocol
    bytes issuanceOperationHash = 9; // the hash of the associated issuance operation
    string encodedSignedCredential = 10; // the actual published credential
    uint64 publicationStoredAt = 11; // the time when the publication data was stored in the database
    string externalId = 12; // the id provided by the institution at contact creation time
    ContactConnectionStatus connectionStatus = 13; // used to know if contact has accepted the connection
    uint64 sharedAt = 14; // the last time when the credential was sent to the related contact
    TransactionInfo issuanceProof = 15; // underlying transaction information related to the credential issuance
}
