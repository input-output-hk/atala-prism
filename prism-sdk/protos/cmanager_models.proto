syntax = "proto3";

package io.iohk.atala.prism.protos;

import "common_models.proto";

message CManagerCredential {
    string id = 1;
    string issuerId = 2;
    string studentId = 3;
    string issuerName = 4;
    string studentName = 5;
    string title = 6;
    Date enrollmentDate = 7;
    Date graduationDate = 8;
    string groupName = 9;
}

message Student {
    string id = 1;
    // When introducing the groupName, the issuerId field was removed
    reserved 2;
    reserved "issuerId";
    string universityAssignedId = 3;
    string fullName = 4;
    string email = 5;
    Date admissionDate = 6;
    StudentConnectionStatus connectionStatus = 7;
    string connectionToken = 8; // present when the status is ConnectionMissing
    string connectionId = 9; // present when the status is ConnectionAccepted
    string groupName = 10;
}

enum StudentConnectionStatus {
    InvitationMissing = 0;
    ConnectionMissing = 1;
    ConnectionAccepted = 2;
    ConnectionRevoked = 3;
}

// subject
message IssuerSubject {
    string id = 1;
    string jsonData = 2;
    string groupName = 3;
    // NOTE: as enum values need to be unique, we reuse the student status for now, eventually,
    // TODO: we should rename that enum.
    StudentConnectionStatus connectionStatus = 4;
    string connectionToken = 5; // present when the status is ConnectionMissing
    string connectionId = 6; // present when the status is ConnectionAccepted
    string externalId = 7; // the id provided by the issuer at subject creation time
}

message Group {
    string name = 1;
}

// Generic version of cmanager credentials
message CManagerGenericCredential {
    string credentialId = 1; // credential identifier internal to the cmanager
    string issuerId = 2; // issuer identifier internal to the cmanager/connector
    string subjectId = 3; // subject identifier internal to cmanager/connector
    string credentialData = 4; // the actual claims of the credential
    string issuerName = 5; // the name of the issuer according to the cmanager/connector internal data
    string groupName = 6; // group name associated to the credential in the cmanager internal data
    string subjectData = 7; // internal data from the related subject stored in cmanager tables
    // the fields below will only be populated after the credential is published in the blockchain
    string nodeCredentialId = 8; // the id assigned to the published credential by the protocol
    bytes issuanceOperationHash = 9; // the hash of the associated issuance operation
    string encodedSignedCredential = 10; // the actual published credential
    uint64 publicationStoredAt = 11; // the time when the publication data was stored in the database
    string externalId = 12; // the id provided by the issuer at subject creation time
    // NOTE: as enum values need to be unique, we reuse the student status for now, eventually,
    // TODO: we should rename that enum.
    StudentConnectionStatus connectionStatus = 13;
}
