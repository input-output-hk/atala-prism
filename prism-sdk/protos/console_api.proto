syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "console_models.proto";
import "common_models.proto";
import "node_models.proto";

// The Management Console API
service ConsoleService {
  // Checks if the service is healthy
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}

  // Retrieves numbers about the operations done in the management console
  rpc GetStatistics (GetStatisticsRequest) returns (GetStatisticsResponse) {}
}

// The Contacts API
service ContactsService {
  // Creates a contact for the authenticated institution
  rpc CreateContact (CreateContactRequest) returns (CreateContactResponse) {}

  // Create the contacts atomically for the authenticated institution
  rpc CreateContacts (CreateContactsRequest) returns (CreateContactsResponse) {}

  // Retrieves the available contacts for the authenticated institution
  rpc GetContacts (GetContactsRequest) returns (GetContactsResponse) {}

  // Retrieves a contact for the authenticated institution
  rpc GetContact (GetContactRequest) returns (GetContactResponse) {}

  // Updates the given contact on the authenticated institution
  rpc UpdateContact (UpdateContactRequest) returns (UpdateContactResponse) {}

  // Delete a contact from the authenticated institution
  rpc DeleteContact (DeleteContactRequest) returns (DeleteContactResponse) {}

  // Generates a connection token for the given contact.
  // This is a necessary step before being able to connect to the contact.
  rpc GenerateConnectionTokenForContact (GenerateConnectionTokenForContactRequest) returns (GenerateConnectionTokenForContactResponse) {}
}

// The Credentials Issuance API
service CredentialIssuanceService {
  // Creates a new credential issuance
  rpc CreateCredentialIssuance (CreateCredentialIssuanceRequest) returns (CreateCredentialIssuanceResponse) {}

  // Gets a credential issuance
  rpc GetCredentialIssuance (GetCredentialIssuanceRequest) returns (GetCredentialIssuanceResponse) {}
}

// The Credentials API
service CredentialsService {
  // Creates a credential on the authenticated institution.
  // TODO: Consider renaming this to CreateDraftCredential given that this is not published.
  // TODO: Consider freezing the credential details once it gets published.
  rpc CreateGenericCredential (CreateGenericCredentialRequest) returns (CreateGenericCredentialResponse) {}

  // Retrieves the credentials created by the authenticated institution
  rpc GetGenericCredentials (GetGenericCredentialsRequest) returns (GetGenericCredentialsResponse) {}

  // Retrieves the contact credentials created by the authenticated institution
  rpc GetContactCredentials (GetContactCredentialsRequest) returns (GetContactCredentialsResponse) {}

  // Marks a credential as shared.
  // NOTE: This doesn't send the actual credential to the related contact, but is supposed to be
  //       invoked everytime such credential is sent.
  rpc ShareCredential (ShareCredentialRequest) returns (ShareCredentialResponse) {}

  // Retrieves node information associated to a credential
  rpc GetBlockchainData (GetBlockchainDataRequest) returns (GetBlockchainDataResponse) {}

  // Publishes a credential batch to the blockchain.
  // This method also stores the published batch on the database.
  // However, it does not store the individual credentials on the
  // console (see StorePublishedCredential)
  rpc PublishBatch (PublishBatchRequest) returns (PublishBatchResponse) {}

  // This request stores in the console database the information associated to a credential.
  // The endpoint assumes that the credential has been published in a batch through the PublishBatch endpoint
  rpc StorePublishedCredential (StorePublishedCredentialRequest) returns (StorePublishedCredentialResponse) {}
}

// The Credential Types API
service CredentialTypesService {
  // Retrieves the available credential types on the authenticated institution
  rpc GetCredentialTypes (GetCredentialTypesRequest) returns (GetCredentialTypesResponse) {}

  // Retrieves the credential type on the authenticated institution
  rpc GetCredentialType (GetCredentialTypeRequest) returns (GetCredentialTypeResponse) {}

  // Creates a credential type on the authenticated institution
  rpc CreateCredentialType (CreateCredentialTypeRequest) returns (CreateCredentialTypeResponse) {}

  // Updates an existing credential type
  rpc UpdateCredentialType (UpdateCredentialTypeRequest) returns (UpdateCredentialTypeResponse) {}

  // Updates an existing credential type - mark as ready
  rpc MarkAsReadyCredentialType (MarkAsReadyCredentialTypeRequest) returns (MarkAsReadyCredentialTypeResponse) {}

  // Updates an existing credential type - mark as archived
  rpc MarkAsArchivedCredentialType (MarkAsArchivedCredentialTypeRequest) returns (MarkAsArchivedCredentialTypeResponse) {}
}

// The Groups API
service GroupsService {
  // Creates a group on the authenticated institution
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {}

  // Retrieves the available groups on the authenticated institution
  rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {}

  // Updates an existing group by adding new contacts and removing some of the old ones
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {}

  // Deletes an existing group by its id
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {}
}

// The API for the received credentials
service CredentialsStoreService {
  // Stores a received credential.
  // This is invoked from the wallet after receiving a credential.
  rpc StoreCredential (StoreCredentialRequest) returns (StoreCredentialResponse) {}

  // Finds the received credentials given the filters
  rpc GetStoredCredentialsFor (GetStoredCredentialsForRequest) returns (GetStoredCredentialsForResponse) {}

  // Finds the latest credentialExternalId received.
  // This is invoked from the wallet to know what's the latest received credential, which allows us to avoid
  // processing the same received credential twice.
  rpc GetLatestCredentialExternalId (GetLatestCredentialExternalIdRequest) returns (GetLatestCredentialExternalIdResponse) {}
}

// Request to get usage statistics for the authenticated institution
message GetStatisticsRequest {
  // the query interval for inspection
  // can be missing, in which case the response will contain all available statistics
  TimeInterval interval = 1;
}

// Response with the usage statistics for the authenticated institution
message GetStatisticsResponse {
  int32 numberOfContacts = 1; // total number of contacts created
  int32 numberOfContactsPendingConnection = 2; // total number of contacts where they haven't accepted the connection
  int32 numberOfContactsConnected = 3; // total number of contacts where they accepted the connection
  int32 numberOfGroups = 4; // total number of groups created
  int32 numberOfCredentialsInDraft = 5; // total number of credentials that aren't published to the blockchain yet
  int32 numberOfCredentialsPublished = 6; // total number of credentials published to the blockchain
  int32 numberOfCredentialsReceived = 7; // total number of credentials received from contacts
}

// Request to create a contact on the authenticated institution
message CreateContactRequest {
  // Optional, when present, the given contact gets assigned to a group with the given name.
  // TODO: We likely need a list of groups instead, also, use group id instead of the name.
  string groupName = 1;

  // Arbitrary data for the contact, should be a valid json, when missing, "{}" will be used
  string jsonData = 2;

  // The id provided by the institution at contact creation time.
  // An institution cannot have two contacts with the same external id.
  // The id could be repeated in different institutions.
  string externalId = 3;

  // The contact's name, required for the management console, ignored on the connector
  string name = 4;
}
// Response after creating a contact
message CreateContactResponse {
  Contact contact = 1; // the created contact
}

// Request to create contacts on the authenticated institution
// The request is rejected when:
// - No contacts provided
// - Any contact is invalid
// - A contact is repeated (by externalId)
// - There are repeated groups
// - A group doesn't exist in the authenticated institution
message CreateContactsRequest {
  // Optional, when present, the contacts get assigned to these groups (identified by id).
  repeated string groups = 1;

  // The contacts to create
  repeated Contact contacts = 2;

  message Contact {
    // The id provided by the institution at contact creation time.
    // An institution cannot have two contacts with the same external id.
    // The id could be repeated in different institutions.
    string externalId = 3;

    // The contact's name
    string name = 4;

    // Arbitrary data for the contact, should be a valid json, when missing, "{}" will be used
    string jsonData = 5;
  }
}
// Response after creating contacts
message CreateContactsResponse {}

// Request to retrieve the contacts from the authenticated institution.
//
// The result is sorted by the contact's creation date in ascending order, breaking ties by contact id.
message GetContactsRequest {
  int32 limit = 1; // the max amount of contacts to return, must be > 0
  // the last seen contact (if any), the returned contacts start after this one, just for the connector integration
  // TODO: Remove once the connector integration is removed
  string lastSeenContactId = 2;
  // if provided, get only the contacts that belong to this group, just for the connector integration
  // TODO: Remove once the connector integration is removed
  string groupName = 3;
  // retrieve the next items based on the given scroll id (when provided)
  // This applies only to the management console, the connector still works with the lastSeenContactId
  string scrollId = 4;
  // when provided, filter the results based on the given criteria, just for the management console
  FilterBy filterBy = 5;
  // when provided, sort the results by the given criteria
  SortBy sortBy = 6;

  // The possible ways to filter the results from GetContactsRequest
  message FilterBy {
    string groupName = 1; // if provided, get only the contacts that belong to this group
    Date createdBy = 2; // if provided, the contacts should have been created in the given date
    string name = 3; // if provided, the contacts should partially match the given name
    string externalId = 4; // if provided the contacts should partially match the given externalId
  }

  // The possible ways to sort the results
  message SortBy {
    Field field = 1; // the field used to sort the results by
    SortByDirection direction = 2; // whether the results are in ascending/descending order, ascending order by default

    // The possible fields to sort the results by
    enum Field {
      UNKNOWN = 0; // in case of the value being missing, where we take the default one, CREATED_AT
      CREATED_AT = 1; // the createdAt field
      NAME = 2; // the name field
      EXTERNAL_ID = 3; // the externalId field
    }
  }
}
// Response with the retrieved contacts
message GetContactsResponse {
  // the contacts found
  // NOTE: This is only for the connector's implementation which will be removed once the frontend migrates out of it
  repeated Contact contacts = 1;
  // the scroll id to retrieve the next items
  // This applies only to the management console, the connector still needs to compute the lastSeenContactId
  string scrollId = 2;

  // the contacts found filled with the credential counters
  // NOTE: The connector's implementation doesn't use this
  repeated ContactDetails data = 3;

  // Represents a contact in the response
  message ContactDetails {
    Contact contact = 1; // the contact
    int32 numberOfCredentialsReceived = 2; // the number of received credentials from this contact
    // the number of credentials created for this contact, which involves draft, and published credentials
    int32 numberOfCredentialsCreated = 3;
  }
}

// Request to retrieve a contact from the authenticated institution
message GetContactRequest {
  string contactId = 1; // the id used to find the contact
}
// Response for the retrieved contact
message GetContactResponse {
  Contact contact = 1; // the retrieved contact
  repeated Group groups = 2; // the groups available
  repeated StoredSignedCredential receivedCredentials = 3; // the received credentials
  repeated CManagerGenericCredential issuedCredentials = 4; // the credentials found
}

// Request to update a contact from the authenticated institution.
// All fields are required, and its what the contact will get updated to.
message UpdateContactRequest {
  string contactId = 1; // the id for the contact to update
  string newExternalId = 2; // the new externalId
  string newName = 3; // the new name
  string newJsonData = 4; // the new arbitrary json data, when missing, "{}" will be used
}
// Response after updating the contact
message UpdateContactResponse {}

// Request to delete a contact from the authenticated institution
message DeleteContactRequest {
  string contactId = 1; // the id used to delete the contact
  // if true, related credentials will be deleted along with the contact
  // if false and there are any related credentials, the request will fail to delete the contact
  // if false and there no related credentials, only the contact will be deleted
  bool deleteCredentials = 2;
}

// Response for the deleted contact
message DeleteContactResponse {
}

// Request to generate a connection token for the given contact on the authenticated institution
message GenerateConnectionTokenForContactRequest {
  string contactId = 1; // the contact that will be linked to the token
}
// Response after generating a connection token
message GenerateConnectionTokenForContactResponse {
  string token = 1; // the token that needs to be shared to the user to accept the connection
}

// Request to create a new credential issuance
message CreateCredentialIssuanceRequest {
  string name = 1; // Name of the credential issuance
  string credentialTypeId = 2; // // The id (UUID) of credential type which is used as a template for this credential.
  repeated CredentialIssuanceContact credentialIssuanceContacts = 3; // The contacts and their credential data
}
// Response to creating a credential issuance
message CreateCredentialIssuanceResponse {
  string credentialIssuanceId = 1; // ID of the credential issuance just created
}

// Request to get a credential issuance
message GetCredentialIssuanceRequest {
  string credentialIssuanceId = 1; // ID of the credential issuance
}
// Response to getting a credential issuance
message GetCredentialIssuanceResponse {
  string name = 1; // Name of the credential issuance
  string credentialTypeId = 2; // // The id (UUID) of credential type which is used as a template for this credential.
  int64 createdAt = 3; // Timestamp (millis since epoch) when the credential issuance was created
  repeated CredentialIssuanceContact credentialIssuanceContacts = 4; // The contacts and their credential data
}

// Credential Types

// Request to get a list of all credential types on the authenticated institution 
message GetCredentialTypesRequest {}
// Response with the retrieved credential types
message GetCredentialTypesResponse {
  repeated CredentialType credentialTypes = 1; // List of the credential types
}

// Request to get a credential type on the authenticated institution 
message GetCredentialTypeRequest {
  string credentialTypeId = 1; // Id of the credential type
}
// Response with the retrieved credential type
message GetCredentialTypeResponse {
  CredentialTypeWithRequiredFields credentialType = 1; // The retrieved credential type 
}

// Request to create a credential type on the authenticated institution 
message CreateCredentialTypeRequest {
  CreateCredentialType credentialType = 2; // New credential type 
}
// Response with the created credential type
message CreateCredentialTypeResponse {
  CredentialTypeWithRequiredFields credentialType = 1; // The created credential type
}

// Request to update a credential type on the authenticated institution 
message UpdateCredentialTypeRequest {
  UpdateCredentialType credentialType = 2; // Credential type to update
}
// Empty response after credential type update
message UpdateCredentialTypeResponse {}

// Request to change state to ready in credential type on the authenticated institution 
message MarkAsReadyCredentialTypeRequest {
  string credentialTypeId = 1; // Credential type to update
}
// Empty response after state update
message MarkAsReadyCredentialTypeResponse {}

// Request to change state to archived in credential type on the authenticated institution 
message MarkAsArchivedCredentialTypeRequest {
  string credentialTypeId = 1; // Credential type to update
}
// Empty response after state update
message MarkAsArchivedCredentialTypeResponse {}

// Request to create a group on the authenticated institution
message CreateGroupRequest {
  string name = 1; // the group name, which must not exists
  repeated string contactIds = 2; // contacts to put in the new group, must be non-repeating
}
// Response after creating a group
message CreateGroupResponse {
  Group group = 1; // the group created and its associated details
}

// Request to retrieve the available groups on the authenticated institution
message GetGroupsRequest {
  string contactId = 1; // optional, when provided, only groups related to the given contact are included
}
// Response with the available groups
message GetGroupsResponse {
  repeated Group groups = 1; // the groups available
}

// Request to update a group
message UpdateGroupRequest {
  string groupId = 1; // the id of the existing group
  repeated string contactIdsToAdd = 2; // the list of contact ids to be added to the specified group
  repeated string contactIdsToRemove = 3; // the list of contact ids to be removed from the specified group
  string name = 4; // new name for the group
}
// Response after updating a group
message UpdateGroupResponse {}

// Request to delete a group
message DeleteGroupRequest {
  string groupId = 1; // the id of the existing group to delete
}

// Response after deleting a group
message DeleteGroupResponse {}

// Request to create a credential on the authenticated institution
message CreateGenericCredentialRequest {
  // The contact id to link the credential to.
  // It is required if the externalId isn't provided, otherwise, ignored.
  string contactId = 1;

  // The credential payload as a JSON string.
  // A valid non-empty JSON is required.
  string credentialData = 2;

  // The group name linked to a credential.
  // TODO: Remove legacy argument, this was used only for Dec/2019 Georgia's demo only.
  string groupName = 3;

  // The id provided by the institution at contact creation time, when this isn't provided,
  // the contactId is expected.
  string externalId = 4;

  // The id (UUID) of credential type which is used as a template for this credential.
  string credentialTypeId = 5;
}
// Response when a credential is created
message CreateGenericCredentialResponse {
  CManagerGenericCredential genericCredential = 1; // The credential details
}

// The authenticated institution is retrieving its issued credentials.
//
// The results are sorted by creation date in ascending order, breaking ties by id.
message GetGenericCredentialsRequest {
  int32 limit = 1; // the max amount of credentials to return, must be > 0
  string lastSeenCredentialId = 2; // the last seen credential (if any), the returned credentials start after this one
}
// Response with the credentials found
message GetGenericCredentialsResponse {
  repeated CManagerGenericCredential credentials = 1; // the retrieved credentials
}

// Request to share a credential, which ends up just marking the credential as sent.
//
// This is intended to be invoked after sending the credential through the connector.
//
// TODO: Consider renaming this to MarkCredentialAsSent.
message ShareCredentialRequest {
  string cmanagerCredentialId = 2; // cmanager internal credential id
}
// Response after sharing a credential
message ShareCredentialResponse {}

// Request to get the credentials for the given contact.
//
// As the expected amount of credentials per contact is small, no pagination is required.
message GetContactCredentialsRequest {
  string contactId = 1;
}
// Response with the contact credentials
message GetContactCredentialsResponse {
  repeated CManagerGenericCredential genericCredentials = 1; // the credentials found
}

// Request to get blockchain related information for a credential
message GetBlockchainDataRequest {
  string encodedSignedCredential = 1; // encoded credential for which we want to retrieve information
}

// Response with the information found in the blockchain
message GetBlockchainDataResponse {
  TransactionInfo issuanceProof = 1; // transaction information associated to the credential issuance event
}

// Request to store a received credential
message StoreCredentialRequest {
  string connectionId = 1; // connection id retrieved from the connector message that carried the credential
  string encodedSignedCredential = 2; // the encoded signed data
  string credentialExternalId = 3; // credential external id (currently, id of the connector message that carried it)
  string batchInclusionProof = 4; // inclusion proof associated to the encodedSignedCredential
}
// Response after storing a received credential
message StoreCredentialResponse {
}

// Request to find the received credentials
message GetStoredCredentialsForRequest {
  // Optional, allows to retrieve received credentials from a single contact.
  // TODO: Rename to `contactId` after removing legacy methods
  string individualId = 1;
}
// Response with the received credentials
message GetStoredCredentialsForResponse {
  repeated StoredSignedCredential credentials = 1; // the received credentials
}

// Request to find the latest credentialExternalId
message GetLatestCredentialExternalIdRequest {}
// Response with the latest credentialExternalId
message GetLatestCredentialExternalIdResponse {
  string latestCredentialExternalId = 1;
}

// Request to publish a credential batch to the blockchain
message PublishBatchRequest {
  SignedAtalaOperation issueCredentialBatchOperation = 1; // a signed instance of IssueCredentialBatch operation
}

// Response after publishing a batch
message PublishBatchResponse {
  string batchId = 1; // the protocol assigned id for the batch
  TransactionInfo transactionInfo = 2; // the blockchain transaction details where the batch was published
}

// Request to store a credential for which its batch has been published
message StorePublishedCredentialRequest {
  string encodedSignedCredential = 1; // the encoded credential to sotre
  string consoleCredentialId = 2; // management console internal credential id
  string batchId = 3; // the protocol id associated to the batch that contains this credential
  string encodedInclusionProof = 4; // the merkle proof of inclusion for the batch associated to the credential
}
message StorePublishedCredentialResponse {}
