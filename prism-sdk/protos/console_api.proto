syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.iohk.atala.prism.protos";

package io.iohk.atala.prism.protos;

import "console_models.proto";
import "common_models.proto";

// The Management Console API
service ConsoleService {
  // Checks if the service is healthy
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}

  // Retrieves numbers about the operations done in the management console
  rpc GetStatistics (GetStatisticsRequest) returns (GetStatisticsResponse) {}
}

service ContactsService {
  // Creates a contact for the authenticated institution
  rpc CreateContact (CreateContactRequest) returns (CreateContactResponse) {}

  // Retrieves the available contacts for the authenticated institution
  rpc GetContacts (GetContactsRequest) returns (GetContactsResponse) {}

  // Retrieves a contact for the authenticated institution
  rpc GetContact (GetContactRequest) returns (GetContactResponse) {}

  // Generates a connection token for the given contact.
  // This is a necessary step before being able to connect to the contact.
  rpc GenerateConnectionTokenForContact (GenerateConnectionTokenForContactRequest) returns (GenerateConnectionTokenForContactResponse) {}
}

service CredentialIssuanceService {
  // Creates a new credential issuance
  rpc CreateCredentialIssuance (CreateCredentialIssuanceRequest) returns (CreateCredentialIssuanceResponse) {}

  // Gets a credential issuance
  rpc GetCredentialIssuance (GetCredentialIssuanceRequest) returns (GetCredentialIssuanceResponse) {}
}

// Request to get usage statistics for the authenticated institution
message GetStatisticsRequest {}

// Response with the usage statistics for the authenticated institution
message GetStatisticsResponse {
  int32 numberOfContacts = 1; // total number of contacts created
  int32 numberOfContactsPendingConnection = 2; // total number of contacts where they haven't accepted the connection
  int32 numberOfContactsConnected = 3; // total number of contacts where they accepted the connection
  int32 numberOfGroups = 4; // total number of groups created
  int32 numberOfCredentialsInDraft = 5; // total number of credentials that aren't published to the blockchain yet
  int32 numberOfCredentialsPublished = 6; // total number of credentials published to the blockchain
  int32 numberOfCredentialsReceived = 7; // total number of credentials received from contacts
}

// Request to create a contact on the authenticated institution
message CreateContactRequest {
  // Optional, when present, the given contact gets assigned to a group with the given name.
  // TODO: We likely need a list of groups instead, also, use group id instead of the name.
  string groupName = 1;

  // Arbitrary data for the contact, should be a valid json, when missing, "{}" will be used
  string jsonData = 2;

  // The id provided by the institution at contact creation time.
  // An institution cannot have two contacts with the same external id.
  // The id could be repeated in different institutions.
  string externalId = 3;
}
// Response after creating a contact
message CreateContactResponse {
  Contact contact = 1; // the created contact
}

// Request to retrieve the contacts from the authenticated institution.
//
// The result is sorted by the contact's creation date in ascending order, breaking ties by contact id.
message GetContactsRequest {
  int32 limit = 1; // the max amount of contacts to return, must be > 0
  string lastSeenContactId = 2; // the last seen contact (if any), the returned contacts start after this one
  string groupName = 3; // if provided, get only the contacts that belong to this group
}
// Response with the retrieved contacts
message GetContactsResponse {
  repeated Contact contacts = 1; // the contacts found
}

// Request to retrieve a contact from the authenticated institution
message GetContactRequest {
  string contactId = 1; // the id used to find the contact
}
// Response for the retrieved contact
message GetContactResponse {
  Contact contact = 1; // the retrieved contact
}

// Request to generate a connection token for the given contact on the authenticated institution
message GenerateConnectionTokenForContactRequest {
  string contactId = 1; // the contact that will be linked to the token
}
// Response after generating a connection token
message GenerateConnectionTokenForContactResponse {
  string token = 1; // the token that needs to be shared to the user to accept the connection
}

// Request to create a new credential issuance
message CreateCredentialIssuanceRequest {
  string name = 1; // Name of the credential issuance
  int32 credentialTypeId = 2; // ID of the type of credential to issue
  repeated CredentialIssuanceContact credentialIssuanceContacts = 3; // The contacts and their credential data
}
// Response to creating a credential issuance
message CreateCredentialIssuanceResponse {
  string credentialIssuanceId = 1; // ID of the credential issuance just created
}

// Request to get a credential issuance
message GetCredentialIssuanceRequest {
  string credentialIssuanceId = 1; // ID of the credential issuance
}
// Response to getting a credential issuance
message GetCredentialIssuanceResponse {
  string name = 1; // Name of the credential issuance
  int32 credentialTypeId = 2; // ID of the type of credential to issue
  CredentialIssuanceStatus status = 3; // Current status of the credential issuance
  int64 createdAt = 4; // Timestamp when the credential issuance was created
  repeated CredentialIssuanceContact credentialIssuanceContacts = 5; // The contacts and their credential data
}
