// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: node_models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Io_Iohk_Prism_Protos_KeyUsage: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UNKNOWN_KEY is an invalid value - Protobuf uses 0 if no value is provided and we want user to explicitly choose the usage
  case unknownKey // = 0
  case masterKey // = 1
  case issuingKey // = 2
  case communicationKey // = 3
  case authenticationKey // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownKey
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownKey
    case 1: self = .masterKey
    case 2: self = .issuingKey
    case 3: self = .communicationKey
    case 4: self = .authenticationKey
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownKey: return 0
    case .masterKey: return 1
    case .issuingKey: return 2
    case .communicationKey: return 3
    case .authenticationKey: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Io_Iohk_Prism_Protos_KeyUsage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Io_Iohk_Prism_Protos_KeyUsage] = [
    .unknownKey,
    .masterKey,
    .issuingKey,
    .communicationKey,
    .authenticationKey,
  ]
}

#endif  // swift(>=4.2)

struct Io_Iohk_Prism_Protos_ECKeyData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var curve: String = String()

  var x: Data = SwiftProtobuf.Internal.emptyData

  var y: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Io_Iohk_Prism_Protos_PublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var usage: Io_Iohk_Prism_Protos_KeyUsage {
    get {return _storage._usage}
    set {_uniqueStorage()._usage = newValue}
  }

  var keyData: OneOf_KeyData? {
    get {return _storage._keyData}
    set {_uniqueStorage()._keyData = newValue}
  }

  var ecKeyData: Io_Iohk_Prism_Protos_ECKeyData {
    get {
      if case .ecKeyData(let v)? = _storage._keyData {return v}
      return Io_Iohk_Prism_Protos_ECKeyData()
    }
    set {_uniqueStorage()._keyData = .ecKeyData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_KeyData: Equatable {
    case ecKeyData(Io_Iohk_Prism_Protos_ECKeyData)

  #if !swift(>=4.1)
    static func ==(lhs: Io_Iohk_Prism_Protos_PublicKey.OneOf_KeyData, rhs: Io_Iohk_Prism_Protos_PublicKey.OneOf_KeyData) -> Bool {
      switch (lhs, rhs) {
      case (.ecKeyData(let l), .ecKeyData(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_DIDData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DID suffix, where DID is in form did:atala:[DID suffix]
  var id: String = String()

  var publicKeys: [Io_Iohk_Prism_Protos_PublicKey] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Io_Iohk_Prism_Protos_CredentialData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var issuer: String {
    get {return _storage._issuer}
    set {_uniqueStorage()._issuer = newValue}
  }

  var contentHash: Data {
    get {return _storage._contentHash}
    set {_uniqueStorage()._contentHash = newValue}
  }

  var issuanceDate: Io_Iohk_Prism_Protos_Date {
    get {return _storage._issuanceDate ?? Io_Iohk_Prism_Protos_Date()}
    set {_uniqueStorage()._issuanceDate = newValue}
  }
  /// Returns true if `issuanceDate` has been explicitly set.
  var hasIssuanceDate: Bool {return _storage._issuanceDate != nil}
  /// Clears the value of `issuanceDate`. Subsequent reads from it will return its default value.
  mutating func clearIssuanceDate() {_uniqueStorage()._issuanceDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_CreateDIDOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DIDData with did empty id field
  var didData: Io_Iohk_Prism_Protos_DIDData {
    get {return _storage._didData ?? Io_Iohk_Prism_Protos_DIDData()}
    set {_uniqueStorage()._didData = newValue}
  }
  /// Returns true if `didData` has been explicitly set.
  var hasDidData: Bool {return _storage._didData != nil}
  /// Clears the value of `didData`. Subsequent reads from it will return its default value.
  mutating func clearDidData() {_uniqueStorage()._didData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_AddKeyAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Io_Iohk_Prism_Protos_PublicKey {
    get {return _storage._key ?? Io_Iohk_Prism_Protos_PublicKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {_uniqueStorage()._key = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_RemoveKeyAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Io_Iohk_Prism_Protos_UpdateDIDAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: OneOf_Action? {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var addKey: Io_Iohk_Prism_Protos_AddKeyAction {
    get {
      if case .addKey(let v)? = _storage._action {return v}
      return Io_Iohk_Prism_Protos_AddKeyAction()
    }
    set {_uniqueStorage()._action = .addKey(newValue)}
  }

  var removeKey: Io_Iohk_Prism_Protos_RemoveKeyAction {
    get {
      if case .removeKey(let v)? = _storage._action {return v}
      return Io_Iohk_Prism_Protos_RemoveKeyAction()
    }
    set {_uniqueStorage()._action = .removeKey(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Action: Equatable {
    case addKey(Io_Iohk_Prism_Protos_AddKeyAction)
    case removeKey(Io_Iohk_Prism_Protos_RemoveKeyAction)

  #if !swift(>=4.1)
    static func ==(lhs: Io_Iohk_Prism_Protos_UpdateDIDAction.OneOf_Action, rhs: Io_Iohk_Prism_Protos_UpdateDIDAction.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.addKey(let l), .addKey(let r)): return l == r
      case (.removeKey(let l), .removeKey(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_UpdateDIDOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var previousOperationHash: Data = SwiftProtobuf.Internal.emptyData

  var id: String = String()

  var actions: [Io_Iohk_Prism_Protos_UpdateDIDAction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Io_Iohk_Prism_Protos_IssueCredentialOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// credential data with id empty
  var credentialData: Io_Iohk_Prism_Protos_CredentialData {
    get {return _storage._credentialData ?? Io_Iohk_Prism_Protos_CredentialData()}
    set {_uniqueStorage()._credentialData = newValue}
  }
  /// Returns true if `credentialData` has been explicitly set.
  var hasCredentialData: Bool {return _storage._credentialData != nil}
  /// Clears the value of `credentialData`. Subsequent reads from it will return its default value.
  mutating func clearCredentialData() {_uniqueStorage()._credentialData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_RevokeCredentialOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var previousOperationHash: Data {
    get {return _storage._previousOperationHash}
    set {_uniqueStorage()._previousOperationHash = newValue}
  }

  /// revoked credential id, as returned in IssueCredentialResponse
  var credentialID: String {
    get {return _storage._credentialID}
    set {_uniqueStorage()._credentialID = newValue}
  }

  var revocationDate: Io_Iohk_Prism_Protos_Date {
    get {return _storage._revocationDate ?? Io_Iohk_Prism_Protos_Date()}
    set {_uniqueStorage()._revocationDate = newValue}
  }
  /// Returns true if `revocationDate` has been explicitly set.
  var hasRevocationDate: Bool {return _storage._revocationDate != nil}
  /// Clears the value of `revocationDate`. Subsequent reads from it will return its default value.
  mutating func clearRevocationDate() {_uniqueStorage()._revocationDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_AtalaOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: OneOf_Operation? {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  var createDid: Io_Iohk_Prism_Protos_CreateDIDOperation {
    get {
      if case .createDid(let v)? = _storage._operation {return v}
      return Io_Iohk_Prism_Protos_CreateDIDOperation()
    }
    set {_uniqueStorage()._operation = .createDid(newValue)}
  }

  var updateDid: Io_Iohk_Prism_Protos_UpdateDIDOperation {
    get {
      if case .updateDid(let v)? = _storage._operation {return v}
      return Io_Iohk_Prism_Protos_UpdateDIDOperation()
    }
    set {_uniqueStorage()._operation = .updateDid(newValue)}
  }

  var issueCredential: Io_Iohk_Prism_Protos_IssueCredentialOperation {
    get {
      if case .issueCredential(let v)? = _storage._operation {return v}
      return Io_Iohk_Prism_Protos_IssueCredentialOperation()
    }
    set {_uniqueStorage()._operation = .issueCredential(newValue)}
  }

  var revokeCredential: Io_Iohk_Prism_Protos_RevokeCredentialOperation {
    get {
      if case .revokeCredential(let v)? = _storage._operation {return v}
      return Io_Iohk_Prism_Protos_RevokeCredentialOperation()
    }
    set {_uniqueStorage()._operation = .revokeCredential(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Operation: Equatable {
    case createDid(Io_Iohk_Prism_Protos_CreateDIDOperation)
    case updateDid(Io_Iohk_Prism_Protos_UpdateDIDOperation)
    case issueCredential(Io_Iohk_Prism_Protos_IssueCredentialOperation)
    case revokeCredential(Io_Iohk_Prism_Protos_RevokeCredentialOperation)

  #if !swift(>=4.1)
    static func ==(lhs: Io_Iohk_Prism_Protos_AtalaOperation.OneOf_Operation, rhs: Io_Iohk_Prism_Protos_AtalaOperation.OneOf_Operation) -> Bool {
      switch (lhs, rhs) {
      case (.createDid(let l), .createDid(let r)): return l == r
      case (.updateDid(let l), .updateDid(let r)): return l == r
      case (.issueCredential(let l), .issueCredential(let r)): return l == r
      case (.revokeCredential(let l), .revokeCredential(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Io_Iohk_Prism_Protos_SignedAtalaOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of key used to sign
  var signedWith: String {
    get {return _storage._signedWith}
    set {_uniqueStorage()._signedWith = newValue}
  }

  /// signature of byte encoding of the operation
  var signature: Data {
    get {return _storage._signature}
    set {_uniqueStorage()._signature = newValue}
  }

  var operation: Io_Iohk_Prism_Protos_AtalaOperation {
    get {return _storage._operation ?? Io_Iohk_Prism_Protos_AtalaOperation()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.iohk.prism.protos"

extension Io_Iohk_Prism_Protos_KeyUsage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_KEY"),
    1: .same(proto: "MASTER_KEY"),
    2: .same(proto: "ISSUING_KEY"),
    3: .same(proto: "COMMUNICATION_KEY"),
    4: .same(proto: "AUTHENTICATION_KEY"),
  ]
}

extension Io_Iohk_Prism_Protos_ECKeyData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ECKeyData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "curve"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.curve)
      case 2: try decoder.decodeSingularBytesField(value: &self.x)
      case 3: try decoder.decodeSingularBytesField(value: &self.y)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.curve.isEmpty {
      try visitor.visitSingularStringField(value: self.curve, fieldNumber: 1)
    }
    if !self.x.isEmpty {
      try visitor.visitSingularBytesField(value: self.x, fieldNumber: 2)
    }
    if !self.y.isEmpty {
      try visitor.visitSingularBytesField(value: self.y, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_ECKeyData, rhs: Io_Iohk_Prism_Protos_ECKeyData) -> Bool {
    if lhs.curve != rhs.curve {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "usage"),
    8: .same(proto: "ecKeyData"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _usage: Io_Iohk_Prism_Protos_KeyUsage = .unknownKey
    var _keyData: Io_Iohk_Prism_Protos_PublicKey.OneOf_KeyData?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _usage = source._usage
      _keyData = source._keyData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._usage)
        case 8:
          var v: Io_Iohk_Prism_Protos_ECKeyData?
          if let current = _storage._keyData {
            try decoder.handleConflictingOneOf()
            if case .ecKeyData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._keyData = .ecKeyData(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._usage != .unknownKey {
        try visitor.visitSingularEnumField(value: _storage._usage, fieldNumber: 2)
      }
      if case .ecKeyData(let v)? = _storage._keyData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_PublicKey, rhs: Io_Iohk_Prism_Protos_PublicKey) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._usage != rhs_storage._usage {return false}
        if _storage._keyData != rhs_storage._keyData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_DIDData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DIDData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "publicKeys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.publicKeys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.publicKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.publicKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_DIDData, rhs: Io_Iohk_Prism_Protos_DIDData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.publicKeys != rhs.publicKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_CredentialData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CredentialData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "issuer"),
    3: .same(proto: "contentHash"),
    4: .same(proto: "issuanceDate"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _issuer: String = String()
    var _contentHash: Data = SwiftProtobuf.Internal.emptyData
    var _issuanceDate: Io_Iohk_Prism_Protos_Date? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _issuer = source._issuer
      _contentHash = source._contentHash
      _issuanceDate = source._issuanceDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._issuer)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._contentHash)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._issuanceDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._issuer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issuer, fieldNumber: 2)
      }
      if !_storage._contentHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._contentHash, fieldNumber: 3)
      }
      if let v = _storage._issuanceDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_CredentialData, rhs: Io_Iohk_Prism_Protos_CredentialData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._issuer != rhs_storage._issuer {return false}
        if _storage._contentHash != rhs_storage._contentHash {return false}
        if _storage._issuanceDate != rhs_storage._issuanceDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_CreateDIDOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateDIDOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "didData"),
  ]

  fileprivate class _StorageClass {
    var _didData: Io_Iohk_Prism_Protos_DIDData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _didData = source._didData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._didData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._didData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_CreateDIDOperation, rhs: Io_Iohk_Prism_Protos_CreateDIDOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._didData != rhs_storage._didData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_AddKeyAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddKeyAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _key: Io_Iohk_Prism_Protos_PublicKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_AddKeyAction, rhs: Io_Iohk_Prism_Protos_AddKeyAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_RemoveKeyAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveKeyAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.keyID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_RemoveKeyAction, rhs: Io_Iohk_Prism_Protos_RemoveKeyAction) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_UpdateDIDAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateDIDAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addKey"),
    2: .same(proto: "removeKey"),
  ]

  fileprivate class _StorageClass {
    var _action: Io_Iohk_Prism_Protos_UpdateDIDAction.OneOf_Action?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Io_Iohk_Prism_Protos_AddKeyAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .addKey(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .addKey(v)}
        case 2:
          var v: Io_Iohk_Prism_Protos_RemoveKeyAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .removeKey(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .removeKey(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._action {
      case .addKey(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .removeKey(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_UpdateDIDAction, rhs: Io_Iohk_Prism_Protos_UpdateDIDAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_UpdateDIDOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateDIDOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "previousOperationHash"),
    2: .same(proto: "id"),
    3: .same(proto: "actions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.previousOperationHash)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.actions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.previousOperationHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.previousOperationHash, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.actions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_UpdateDIDOperation, rhs: Io_Iohk_Prism_Protos_UpdateDIDOperation) -> Bool {
    if lhs.previousOperationHash != rhs.previousOperationHash {return false}
    if lhs.id != rhs.id {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_IssueCredentialOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IssueCredentialOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credentialData"),
  ]

  fileprivate class _StorageClass {
    var _credentialData: Io_Iohk_Prism_Protos_CredentialData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _credentialData = source._credentialData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._credentialData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._credentialData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_IssueCredentialOperation, rhs: Io_Iohk_Prism_Protos_IssueCredentialOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._credentialData != rhs_storage._credentialData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_RevokeCredentialOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RevokeCredentialOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "previousOperationHash"),
    2: .same(proto: "credentialId"),
    3: .same(proto: "revocationDate"),
  ]

  fileprivate class _StorageClass {
    var _previousOperationHash: Data = SwiftProtobuf.Internal.emptyData
    var _credentialID: String = String()
    var _revocationDate: Io_Iohk_Prism_Protos_Date? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _previousOperationHash = source._previousOperationHash
      _credentialID = source._credentialID
      _revocationDate = source._revocationDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._previousOperationHash)
        case 2: try decoder.decodeSingularStringField(value: &_storage._credentialID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._revocationDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._previousOperationHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._previousOperationHash, fieldNumber: 1)
      }
      if !_storage._credentialID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._credentialID, fieldNumber: 2)
      }
      if let v = _storage._revocationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_RevokeCredentialOperation, rhs: Io_Iohk_Prism_Protos_RevokeCredentialOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._previousOperationHash != rhs_storage._previousOperationHash {return false}
        if _storage._credentialID != rhs_storage._credentialID {return false}
        if _storage._revocationDate != rhs_storage._revocationDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_AtalaOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AtalaOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "createDid"),
    2: .same(proto: "updateDid"),
    3: .same(proto: "issueCredential"),
    4: .same(proto: "revokeCredential"),
  ]

  fileprivate class _StorageClass {
    var _operation: Io_Iohk_Prism_Protos_AtalaOperation.OneOf_Operation?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Io_Iohk_Prism_Protos_CreateDIDOperation?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .createDid(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .createDid(v)}
        case 2:
          var v: Io_Iohk_Prism_Protos_UpdateDIDOperation?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .updateDid(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .updateDid(v)}
        case 3:
          var v: Io_Iohk_Prism_Protos_IssueCredentialOperation?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .issueCredential(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .issueCredential(v)}
        case 4:
          var v: Io_Iohk_Prism_Protos_RevokeCredentialOperation?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .revokeCredential(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .revokeCredential(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._operation {
      case .createDid(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .updateDid(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .issueCredential(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .revokeCredential(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_AtalaOperation, rhs: Io_Iohk_Prism_Protos_AtalaOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Iohk_Prism_Protos_SignedAtalaOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedAtalaOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signedWith"),
    2: .same(proto: "signature"),
    3: .same(proto: "operation"),
  ]

  fileprivate class _StorageClass {
    var _signedWith: String = String()
    var _signature: Data = SwiftProtobuf.Internal.emptyData
    var _operation: Io_Iohk_Prism_Protos_AtalaOperation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _signedWith = source._signedWith
      _signature = source._signature
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._signedWith)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._signature)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._operation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._signedWith.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signedWith, fieldNumber: 1)
      }
      if !_storage._signature.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signature, fieldNumber: 2)
      }
      if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Io_Iohk_Prism_Protos_SignedAtalaOperation, rhs: Io_Iohk_Prism_Protos_SignedAtalaOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._signedWith != rhs_storage._signedWith {return false}
        if _storage._signature != rhs_storage._signature {return false}
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
