version: 2.1

orbs:
  slack: circleci/slack@3.4.2

parameters:
  scala-version:
    type: string
    default: "2.13"
  prism-scala-common-docker-image:
    type: string
    default: "inputoutput/prism-scala-common:2.12.10-2.13.3-1.4.2-0.12.25"

commands:
  halt-step-if-not-changed:
    description: "Halts the current workflow step if none of the directories given have changed, unless the branch is mandatory"
    parameters:
      directories:
        type: string
    steps:
      - run:
          name: "Stop job if nothing changed"
          command: |
            # Halt the job if directories_changed.sh fails (i.e., detected a change). and avoid failing with "|| true"
            (./.circleci/directories_changed.sh << parameters.directories >> && circleci-agent step halt) || true

  install-protoc:
    description: "Install protoc and its plugins"
    parameters:
      protoc-version:
        type: string
        default: "3.11.4"
      grpcweb-version:
        type: string
        default: "1.0.7"
    steps:
      - run:
          name: "Install protoc"
          command: |
              archive=protoc-<< parameters.protoc-version >>-linux-x86_64
              curl -O -L https://github.com/protocolbuffers/protobuf/releases/download/v<< parameters.protoc-version >>/$archive.zip
              sudo unzip -d '/usr/local' $archive.zip 'bin/*' 'include/*'
              rm -rf ${archive}.zip
      - run:
          name: "Install protoc-gen-grpc-web"
          command: |
              archive=protoc-gen-grpc-web-<< parameters.grpcweb-version >>-linux-x86_64
              curl -O -L https://github.com/grpc/grpc-web/releases/download/<< parameters.grpcweb-version >>/$archive
              chmod +x $archive
              sudo mv $archive /usr/local/bin/protoc-gen-grpc-web
  install-sbt:
    description: "Install sbt"
    parameters:
      version:
        type: string
        default: "1.4.2"
    steps:
      - run:
          name: "Install sbt"
          command: |
            apt update && apt install -y curl
            curl -L -o sbt-<< parameters.version >>.deb https://dl.bintray.com/sbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb

  install-coursier:
    description: "Install coursier"
    steps:
      - run:
          name: "Install coursier"
          command: curl -L -o coursier https://git.io/coursier-cli-linux && chmod +x coursier

  install-scalafmt:
    description: "Install scalafmt"
    parameters:
      version:
        type: string
        default: "2.5.0-RC2"
    steps:
      - run:
          name: "Install scalafmt"
          command: |
            ./coursier bootstrap \
                org.scalameta:scalafmt-cli_<< pipeline.parameters.scala-version >>:<< parameters.version >> \
                -r bintray:scalameta/maven \
                -o scalafmt \
                --main org.scalafmt.cli.Cli

  scalafmt-test:
    description: "Test Scala code is properly formatted"
    steps:
      - run:
          name: "Test Scala code is properly formatted"
          command: ./scalafmt --test

  aggregate-test-reports:
    description: "Aggregate all test reports under a directory"
    parameters:
      directory:
        type: string
      target:
        type: string
        default: "target/test-reports"
    steps:
      - run:
          name: Aggregate test reports
          command: |
            cd << parameters.directory >>
            for reports in `find -name test-reports`; do
              project=${reports%/target/*}
              dest=<< parameters.target >>/$project
              mkdir -p $dest
              cp $reports/* $dest
            done
          when: always

  aggregate-gradle-test-reports:
    description: "Aggregate all test reports under a gradle directory"
    parameters:
      directory:
        type: string
      target:
        type: string
        default: "build/test-results"
    steps:
      - run:
          name: Aggregate test reports
          command: |
            cd << parameters.directory >>
            for reports in `find -name test-results`; do
              project=${reports%/build/*}
              dest=<< parameters.target >>/$project/jvmTest
              mkdir -p $dest
              cp $reports/jvmTest/*.xml $dest
            done
          when: always
jobs:
  deploy-ecr-images:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.prism-scala-common-docker-image >>
    steps:
      - checkout

      - setup_remote_docker

      - attach_workspace:
          at: ./workspace

      - run:
          name: Install sudo
          command: apt-get install -y sudo
      - install-protoc

      - restore_cache:
          key: cv-cache-v5-{{ checksum "prism-backend/build.sbt" }}-{{ checksum "prism-backend/project/PrismBuild.scala" }}-{{ checksum "prism-backend/project/Dependencies.scala" }}-{{ checksum "prism-backend/project/plugins.sbt" }}

      - run:
          name: Set tag convention
          command: |
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            revCount=$(git rev-list HEAD --count)
            shaShort=$(git rev-parse --short HEAD)
            tag="${branchPrefix}-${revCount}-${shaShort}"
            echo "export TAG=$tag" >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG"

      # the prism-web-wallet.zip is needed so that the website can allow downloading it
      - run:
          name: Create management console web assembly
          command: |
            cp ./workspace/prism-web-wallet.zip prism-management-console-web/public/
            cd prism-management-console-web
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Create prism-interactive-demo-web assembly
          command: |
            cd prism-interactive-demo-web
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - run:
          name: Build and push prism-docs-website
          command: |
            mv workspace/site prism-sdk/infra/docs-website/website
            docker build -f prism-sdk/infra/docs-website/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/prism-docs-website:${TAG} prism-sdk/infra/docs-website
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/prism-docs-website:${TAG}

      - run:
          name: Build and push prism-management-console-web
          command: |
            docker build -f prism-management-console-web/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG} prism-management-console-web
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG}

      - run:
          name: Build and push prism-interactive-demo-web
          command: |
            docker build -f prism-interactive-demo-web/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG} prism-interactive-demo-web
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG}

      - run:
          name: Build and push prism-backend/node
          command: |
            cd prism-backend
            sbt node/dockerBuildAndPush

      - run:
          name: Build and push prism-backend/connector
          command: |
            cd prism-backend
            sbt connector/dockerBuildAndPush

      - run:
          name: Build and push prism-backend/vault
          command: |
            cd prism-backend
            sbt vault/dockerBuildAndPush

      - run:
          name: Build and push prism-backend/management-console
          command: |
            cd prism-backend
            sbt management-console/dockerBuildAndPush

      - run:
          name: Build and push prism-lb-envoy
          command: |
            cd prism-backend/infra/docker/prism-lb-envoy
            ./build.sh -b
            ./build.sh -p

  rebuild-prism-env:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.prism-scala-common-docker-image >>
    parameters:
      geud-enabled:
        type: boolean
        default: true
      intdemo-enabled:
        type: boolean
        default: true
    steps:
      - checkout

      - setup_remote_docker

      - restore_cache:
          key: cv-cache-v5-{{ checksum "prism-backend/build.sbt" }}-{{ checksum "prism-backend/project/PrismBuild.scala" }}-{{ checksum "prism-backend/project/Dependencies.scala" }}-{{ checksum "prism-backend/project/plugins.sbt" }}

      - run:
          name: Set tag convention
          command: |
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            revCount=$(git rev-list HEAD --count)
            shaShort=$(git rev-parse --short HEAD)
            tag="${branchPrefix}-${revCount}-${shaShort}"
            echo "export TAG=$tag" >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            echo "export INTDEMO_ENABLED=<< parameters.intdemo-enabled >>" >> $BASH_ENV;
            echo "export GEUD_ENABLED=<< parameters.geud-enabled >>" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG. Intdemo enabled: $INTDEMO_ENABLED. GEUD enabled: $GEUD_ENABLED"

      - run:
          name: Rebuild prism environment
          command: |
            cd prism-backend/infra/stage/services/prism/
            ./prism.sh -t $ENV
            ./prism.sh -A $ENV

  build-prism-backend:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.prism-scala-common-docker-image >>
      - image: postgres:11.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout

      - halt-step-if-not-changed:
          directories: "prism-backend prism-sdk"

      - restore_cache:
          keys:
            - cv-cache-v5-{{ checksum "prism-backend/build.sbt" }}-{{ checksum "prism-backend/project/PrismBuild.scala" }}-{{ checksum "prism-backend/project/Dependencies.scala" }}-{{ checksum "prism-backend/project/plugins.sbt" }}
            - cv-cache-v5

      - install-coursier

      - install-scalafmt

      - scalafmt-test

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - run:
          name: Obtain Cardano db sync and wallet endpoints config
          command: |
            .circleci/generate_cardano_variables.sh >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG"

      - run:
          name: Compile prism-backend components
          command: cd prism-backend && sbt compile test:compile

      - run:
          name: Test prism-backend components
          command: cd prism-backend && sbt coverage test

      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
          key: cv-cache-v5-{{ checksum "prism-backend/build.sbt" }}-{{ checksum "prism-backend/project/PrismBuild.scala" }}-{{ checksum "prism-backend/project/Dependencies.scala" }}-{{ checksum "prism-backend/project/plugins.sbt" }}

      - run:
          name: Generate code coverage reports
          command: cd prism-backend && sbt coverageReport coverageAggregate
          when: always

      - aggregate-test-reports:
          directory: "prism-backend"

      - store_test_results:
          path: prism-backend/target/test-reports

      # Store code coverage reports
      - store_artifacts:
          path: prism-backend/target/scala-<< pipeline.parameters.scala-version >>/scoverage-report

  build-prism-interactive-demo-web:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "prism-backend prism-interactive-demo-web"
      - install-protoc
      - run:
          name: Move to target folder then run tests
          command: cd prism-interactive-demo-web && ./web-testing-script.sh

  build-prism-management-console-web:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "prism-backend prism-management-console-web"
      - setup_remote_docker
      - install-protoc
      - run:
          name: Move to target folder then run tests
          command: cd prism-management-console-web && ./web-testing-script.sh
      - run:
          name: Move to target folder then run linting validation script
          command: cd prism-management-console-web && ./web-linting-validation-script.sh

  trigger-integration-tests:
    working_directory: ~/repo
    environment:
      BRANCH_TO_TRIGGER: "master"
      PROJECT_NAME_TO_TRIGGER: "atala-qa-automation"
    docker:
      - image: circleci/python:3.8.6
    steps:
      - checkout
      - run:
          # TODO: remove this part when https://jira.iohk.io/browse/ATA-3535 is implemented
          name: wait till environment is fully operable
          command: sleep 9m
      - run:
          name: trigger a job in atala-qa-automation project
          command: python trigger_tests.py
      - slack/status:
          # mention Mark Griffin (Product Owner), Jacek Kurkowski (QA)
          mentions: 'UFHNXC9RC,UGFJQ5ZBN'
          only_for_branches: 'qa'

  build-prism-android-wallet:
    working_directory: ~/repo
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "prism-android-wallet prism-kotlin-sdk"
      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0

      - restore_cache:
          key: jars-{{ checksum "prism-android-wallet/build.gradle" }}-{{ checksum  "prism-android-wallet/app/build.gradle" }}
      - install-sbt
      - run:
          name: Download Dependencies
          command: cd prism-android-wallet && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "prism-android-wallet/build.gradle" }}-{{ checksum  "prism-android-wallet/app/build.gradle" }}
      - run:
          name: Run Lint Tests
          command: cd prism-android-wallet && ./gradlew lint test
      - run:
          name: Run Unit Tests
          command: cd prism-android-wallet && ./gradlew test
      - run:
          name: Assemble APK
          command: cd prism-android-wallet && ./gradlew assembleDebug

      - store_test_results:
          path: prism-android-wallet/app/build/test-results
      # Upload APK
      - store_artifacts:
          path: prism-android-wallet/app/build/outputs/apk/debug/app-debug.apk

  build-prism-web-wallet:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-node-browsers
    environment:
      SBT_OPTS: -Xmx2048m
    steps:
      - checkout

      - halt-step-if-not-changed:
          directories: "prism-backend prism-web-wallet prism-sdk"

      - run:
          name: Set environment variables
          command: |
            echo export CHROME_VERSION=\"$(google-chrome --version)\" >> $BASH_ENV
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            connectorUrl="https://grpc-$branchPrefix.atalaprism.io:4433"
            echo "export CONNECTOR_URL=$connectorUrl" >> $BASH_ENV;


      # Download and cache dependencies
      - restore_cache:
          keys:
            - webextension-cache-v2-{{ checksum "prism-web-wallet/build.sbt" }}-{{ checksum "prism-web-wallet/project/plugins.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - webextension-cache-v2-

      - install-coursier

      - install-scalafmt

      - scalafmt-test

      - run:
          name: Compile extension and its tests
          command: cd prism-web-wallet && sbt test:compile

      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
            - prism-web-wallet/target/scala-<< pipeline.parameters.scala-version >>/scalajs-bundler/main/node_modules
            - prism-web-wallet/target/scala-<< pipeline.parameters.scala-version >>/scalajs-bundler/test/node_modules
          key: webextension-cache-v2-{{ checksum "prism-web-wallet/build.sbt" }}-{{ checksum "prism-web-wallet/project/plugins.sbt" }}

      - run:
          name: Install test dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libnss3

      - run:
          name: Run Unit Tests
          command: |
            cd prism-web-wallet
            sbt test || sbt test

      - run:
          name: Package the extension to release
          command: cd prism-web-wallet && PROD=true sbt chromePackage

      - store_test_results:
          path: prism-web-wallet/target/test-reports

      - store_artifacts:
          path: prism-web-wallet/target/chrome/prism-web-wallet.zip

      # persist the wallet, so that it can be deployed by another job
      - persist_to_workspace:
          root: prism-web-wallet/target/chrome
          paths:
            - prism-web-wallet.zip

  build-prism-sdk:
    working_directory: ~/repo
    docker:
        - image: circleci/openjdk:8-jdk-node
    environment:
      SBT_OPTS: -Xmx2048m
    steps:
      - checkout

      - attach_workspace:
          at: ./workspace

      - run:
          name: Grab the grpc docs
          command: cp ./workspace/grpc-api.md prism-sdk/docs/src/main/paradox

      # Download and cache dependencies
      - restore_cache:
          keys:
            - prism-sdk-cache-{{ checksum "prism-sdk/build.sbt" }}-{{ checksum "prism-sdk/project/SdkBuild.scala" }}-{{ checksum "prism-sdk/project/Dependencies.scala" }}-{{ checksum "prism-sdk/project/plugins.sbt" }}-{{ checksum "prism-sdk/project/protoc.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - prism-sdk-cache-

      - install-coursier

      - install-scalafmt

      - scalafmt-test

      # generating docs takes a short time, if this fails, it makes no sense to run the tests
      - run:
          name: Generate documentation
          command: cd prism-sdk && sbt prismDocs/makeSite

      # persist docs so that another job can deploy it
      - persist_to_workspace:
          root: prism-sdk/docs/target
          paths:
            - site

      # This is done after the docs have compiled so that *.md files aren't ignored
      - halt-step-if-not-changed:
          directories: "prism-sdk"

      - run:
          name: Compile SDK and its tests
          command: |
            cd prism-sdk
            sbt compile test:compile

      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
          key: prism-sdk-cache-{{ checksum "prism-sdk/build.sbt" }}-{{ checksum "prism-sdk/project/SdkBuild.scala" }}-{{ checksum "prism-sdk/project/Dependencies.scala" }}-{{ checksum "prism-sdk/project/plugins.sbt" }}-{{ checksum "prism-sdk/project/protoc.sbt" }}

      - run:
          name: Run JS unit tests
          command: |
            cd prism-sdk
            sbt coverage sdkJS/test || sbt coverage sdkJS/test

      - run:
          name: Run JVM unit tests
          command: cd prism-sdk && sbt coverage sdkJVM/test

      - run:
          name: Generate code coverage reports
          command: cd prism-sdk && sbt coverageReport coverageAggregate
          when: always

      - run:
          name: Make sure that the modules can be published
          command: cd prism-sdk && sbt +publishLocal

      - aggregate-test-reports:
          directory: "prism-sdk"

      - store_test_results:
          path: prism-sdk/target/test-reports

      # Store code coverage reports
      - store_artifacts:
          path: prism-sdk/target/scala-<< pipeline.parameters.scala-version >>/scoverage-report

  build-prism-sdk-proto-docs:
    working_directory: ~/repo
    docker:
      - image: pseudomuto/protoc-gen-doc:1.3.2

    steps:
      - checkout

      # this is for the public api, hence, only the exposed APIs/models get included
      - run:
          name: Move the protos to the proper folder
          command: |
            mkdir protos
            cd prism-sdk/protos
            mv common_models.proto \
              connector_api.proto \
              connector_models.proto \
              console_api.proto \
              console_models.proto \
              credential_models.proto \
              cviews_api.proto \
              cviews_models.proto \
              node_api.proto \
              node_models.proto \
              vault_api.proto \
              vault_models.proto \
              ../../protos/

      # apparently, the argument to set the destination folder doesn't work
      - run:
          name: Generate docs
          command: /entrypoint.sh --doc_opt=markdown,docs.md

      - run:
          name: Store docs
          command: mkdir grpc-docs && mv /out/docs.md grpc-docs/grpc-api.md

      # Update the document title
      - run:
          name: Store docs
          command: sed -i "1s/.*/# Grpc API reference/" grpc-docs/grpc-api.md

      # required to persist data, otherwise, we get this error: x509: certificate signed by unknown authority
      - run:
          name: Install the ca-certificates
          command: apt-get update && apt-get install -y ca-certificates

      # persist docs so that another job can deploy it
      - persist_to_workspace:
          root: grpc-docs
          paths:
            - grpc-api.md

      - store_artifacts:
          path: ./grpc-docs

  build-prism-kotlin-sdk:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-node
    steps:
      - checkout

      - attach_workspace:
          at: ./workspace

      - halt-step-if-not-changed:
          directories: "prism-kotlin-sdk"

      # Download and cache dependencies
      - restore_cache:
          keys:
            - prism-kotlin-sdk-cache-{{ checksum "prism-kotlin-sdk/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/settings.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/protos/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/crypto/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/identity/build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - prism-kotlin-sdk-cache-

      - run:
          name: Test Kotlin code is properly formatted
          command: cd prism-kotlin-sdk && ./gradlew ktlintCheck

      - run:
          name: Compile SDK and its tests
          command: |
            cd prism-kotlin-sdk
            ./gradlew build

      - save_cache:
          paths:
            - ~/.m2
          key: prism-kotlin-sdk-cache-{{ checksum "prism-kotlin-sdk/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/settings.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/protos/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/crypto/build.gradle.kts" }}-{{ checksum "prism-kotlin-sdk/identity/build.gradle.kts" }}

      - run:
          name: Run JVM tests
          command: |
            cd prism-kotlin-sdk
            ./gradlew jvmTest

      - aggregate-gradle-test-reports:
          directory: "prism-kotlin-sdk"

      - store_test_results:
          path: prism-kotlin-sdk/build/test-results

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build-prism-kotlin-sdk
      - build-prism-sdk-proto-docs
      - build-prism-sdk:
          requires:
            - build-prism-sdk-proto-docs
      - build-prism-backend:
          requires:
            - build-prism-sdk
      - build-prism-android-wallet:
          requires:
            - build-prism-backend
            - build-prism-kotlin-sdk
      - build-prism-interactive-demo-web:
          requires:
            - build-prism-backend
      - build-prism-management-console-web:
          requires:
            - build-prism-backend
      - build-prism-web-wallet:
          requires:
            - build-prism-backend

      - deploy-ecr-images:
          filters:
            branches:
              only:
                # Update .circleci/directories_changed.sh if you update this list
                - /develop.*/
                - /test.*/
                - /geud-test.*/
                - /demo.*/
                - /qa.*/
          requires:
            - build-prism-management-console-web
            - build-prism-interactive-demo-web
            - build-prism-backend
            - build-prism-sdk
            - build-prism-web-wallet

      - slack/approval-notification:
          message: Approval required for managment console demo deployment Ask Mark / Jacek / Christos
          webhook: '${DEMO_DEPLOYMENT_SLACK_HOOK}'
          channel: "G01HD55ND6U"
          filters:
            branches:
              only:
                - demo
          requires:
            - deploy-ecr-images

      - hold: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< demo deployment "On Hold"
          filters:
            branches:
              only:
                - demo
          requires: # We only run the "hold" job when deploy-ecr-images has succeeded
            - slack/approval-notification

      - rebuild-prism-env:
          name: rebuild-intdemo-and-geud
          intdemo-enabled: true
          geud-enabled: true
          filters:
            branches:
              only:
                - /develop.*/
                - /qa.*/
          requires:
            - deploy-ecr-images
      - rebuild-prism-env:
          name: rebuild-intdemo-only
          intdemo-enabled: true
          geud-enabled: false
          filters:
            branches:
              only:
                - /test.*/
          requires:
            - deploy-ecr-images
      - rebuild-prism-env:
          name: rebuild-geud-only
          intdemo-enabled: false
          geud-enabled: true
          filters:
            branches:
              only:
                - /geud-test.*/
          requires:
            - deploy-ecr-images
      - rebuild-prism-env:
          name: rebuild-management-console-demo-only
          intdemo-enabled: false
          geud-enabled: true
          filters:
            branches:
              only:
                - demo
          requires:
            - deploy-ecr-images
            - hold
      - trigger-integration-tests:
          filters:
            branches:
              only:
                - qa
          requires:
            - rebuild-intdemo-and-geud
