version: 2.1

orbs:
  slack: circleci/slack@3.4.2

parameters:
  scala-version:
    type: string
    default: "2.12"
  scala-mill-docker-image:
    type: string
    default: "inputoutput/scala-mill:2.12.10-1.3.8-0.6.2-0.12.25"

commands:
  halt-step-if-not-changed:
    description: "Halts the current workflow step if none of the directories given have changed, unless the branch is mandatory"
    parameters:
      directories:
        type: string
    steps:
      - run:
          name: "Stop job if nothing changed"
          command: |
            # Halt the job if directories_changed.sh fails (i.e., detected a change). and avoid failing with "|| true"
            (./.circleci/directories_changed.sh << parameters.directories >> && circleci-agent step halt) || true

  install-protoc:
    description: "Install protoc and its plugins"
    parameters:
      protoc-version:
        type: string
        default: "3.11.4"
      grpcweb-version:
        type: string
        default: "1.0.7"
    steps:
      - run:
          name: "Install protoc"
          command: |
              archive=protoc-<< parameters.protoc-version >>-linux-x86_64
              curl -O -L https://github.com/protocolbuffers/protobuf/releases/download/v<< parameters.protoc-version >>/$archive.zip
              sudo unzip -d '/usr/local' $archive.zip 'bin/*' 'include/*'
              rm -rf ${archive}.zip
      - run:
          name: "Install protoc-gen-grpc-web"
          command: |
              archive=protoc-gen-grpc-web-<< parameters.grpcweb-version >>-linux-x86_64
              curl -O -L https://github.com/grpc/grpc-web/releases/download/<< parameters.grpcweb-version >>/$archive
              chmod +x $archive
              sudo mv $archive /usr/local/bin/protoc-gen-grpc-web
  install-sbt:
    description: "Install sbt"
    parameters:
      version:
        type: string
        default: "1.3.8"
    steps:
      - run:
          name: "Install sbt"
          command: |
            apt update && apt install -y curl
            curl -L -o sbt-<< parameters.version >>.deb https://dl.bintray.com/sbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb

  install-coursier:
    description: "Install coursier"
    steps:
      - run:
          name: "Install coursier"
          command: curl -L -o coursier https://git.io/coursier-cli-linux && chmod +x coursier

  install-scalafmt:
    description: "Install scalafmt"
    parameters:
      version:
        type: string
        default: "2.5.0-RC2"
    steps:
      - run:
          name: "Install scalafmt"
          command: |
            ./coursier bootstrap \
                org.scalameta:scalafmt-cli_<< pipeline.parameters.scala-version >>:<< parameters.version >> \
                -r bintray:scalameta/maven \
                -o scalafmt \
                --main org.scalafmt.cli.Cli

  scalafmt-test:
    description: "Test Scala code is properly formatted"
    steps:
      - run:
          name: "Test Scala code is properly formatted"
          command: ./scalafmt --test

jobs:
  deploy-ecr-images:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.scala-mill-docker-image >>
    steps:
      - checkout

      - setup_remote_docker

      - restore_cache:
          key: cv-cache-v5-{{ checksum "credentials-verification/build.sbt" }}-{{ checksum "credentials-verification/project/PrismBuild.scala" }}-{{ checksum "credentials-verification/project/Dependencies.scala" }}-{{ checksum "credentials-verification/project/plugins.sbt" }}

      - run:
          name: Set tag convention
          command: |
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            revCount=$(git rev-list HEAD --count)
            shaShort=$(git rev-parse --short HEAD)
            tag="${branchPrefix}-${revCount}-${shaShort}"
            echo "export TAG=$tag" >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG"

      - run:
          name: Create web assembly
          command: |
            cd credentials-verification-web
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Create landing assembly
          command: |
            cd credentials-verification-landing
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - run:
          name: Build and push credentials-verification-web
          command: |
            docker build -f credentials-verification-web/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG} credentials-verification-web
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG}

      - run:
          name: Build and push credentials-verification-landing
          command: |
            docker build -f credentials-verification-landing/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG} credentials-verification-landing
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG}

      - run:
          name: Build and push credentials-verification/node
          command: |
            cd credentials-verification
            sbt node/dockerBuildAndPush

      - run:
          name: Build and push credentials-verification/connector
          command: |
            cd credentials-verification
            sbt connector/dockerBuildAndPush

      - run:
          name: Build and push prism-lb-envoy
          command: |
            cd credentials-verification/infra/docker/prism-lb-envoy
            ./build.sh -b
            ./build.sh -p

  rebuild-prism-env:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.scala-mill-docker-image >>
    parameters:
      geud-enabled:
        type: boolean
        default: true
      intdemo-enabled:
        type: boolean
        default: true
    steps:
      - checkout

      - setup_remote_docker

      - restore_cache:
          key: cv-cache-v5-{{ checksum "credentials-verification/build.sbt" }}-{{ checksum "credentials-verification/project/PrismBuild.scala" }}-{{ checksum "credentials-verification/project/Dependencies.scala" }}-{{ checksum "credentials-verification/project/plugins.sbt" }}

      - run:
          name: Set tag convention
          command: |
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            revCount=$(git rev-list HEAD --count)
            shaShort=$(git rev-parse --short HEAD)
            tag="${branchPrefix}-${revCount}-${shaShort}"
            echo "export TAG=$tag" >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            echo "export INTDEMO_ENABLED=<< parameters.intdemo-enabled >>" >> $BASH_ENV;
            echo "export GEUD_ENABLED=<< parameters.geud-enabled >>" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG. Intdemo enabled: $INTDEMO_ENABLED. GEUD enabled: $GEUD_ENABLED"

      - run:
          name: Rebuild prism environment
          command: |
            cd credentials-verification/infra/stage/services/prism/
            ./prism.sh -t $ENV
            ./prism.sh -A $ENV

  build-credentials-verification:
    working_directory: ~/repo
    docker:
      - image: << pipeline.parameters.scala-mill-docker-image >>
      - image: postgres:11.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout

      - halt-step-if-not-changed:
          directories: "credentials-verification prism-sdk"

      - restore_cache:
          keys:
            - cv-cache-v5-{{ checksum "credentials-verification/build.sbt" }}-{{ checksum "credentials-verification/project/PrismBuild.scala" }}-{{ checksum "credentials-verification/project/Dependencies.scala" }}-{{ checksum "credentials-verification/project/plugins.sbt" }}
            - cv-cache-v5

      - install-coursier

      - install-scalafmt

      - scalafmt-test

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - run:
          name: Obtain Cardano db sync and wallet endpoints config
          command: |
            .circleci/generate_cardano_variables.sh >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG"

      - run:
          name: Compile credentials-verification components
          command: cd credentials-verification && sbt compile test:compile

      - run:
          name: Test credentials-verification components
          command: cd credentials-verification && sbt coverage test

      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
          key: cv-cache-v5-{{ checksum "credentials-verification/build.sbt" }}-{{ checksum "credentials-verification/project/PrismBuild.scala" }}-{{ checksum "credentials-verification/project/Dependencies.scala" }}-{{ checksum "credentials-verification/project/plugins.sbt" }}

      - run:
          name: Generate code coverage reports
          command: cd credentials-verification && sbt coverageReport coverageAggregate
          
      - run:
          name: Aggregate test reports
          command: |
            cd prism-sdk

            # Aggregate every JVM test report under target/jvm/test-reports
            mkdir -p target/test-reports
            test -e common/target/test-reports && mv common/target/test-reports/* target/test-reports
            test -e util/keyderivation/target/test-reports && mv util/keyderivation/target/test-reports/* target/test-reports
            test -e mirror/target/test-reports && mv mirror/target/test-reports/* target/test-reports
            test -e node/target/test-reports && mv node/target/test-reports/* target/test-reports
            test -e node/client/target/test-reports && mv node/client/target/test-reports/* target/test-reports
            test -e connector/target/test-reports && mv connector/target/test-reports/* target/test-reports
            test -e connector/client/target/test-reports && mv connector/client/target/test-reports/* target/test-reports
            true

      - store_test_results:
          path: credentials-verification/target/test-reports

      # Store code coverage reports
      - store_artifacts:
          path: credentials-verification/target/scoverage-report

  build-credentials-verification-landing:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "credentials-verification credentials-verification-landing"
      - install-protoc
      - run:
          name: Move to target folder then run tests
          command: cd credentials-verification-landing && ./web-testing-script.sh

  build-credentials-verification-web:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "credentials-verification credentials-verification-web"
      - setup_remote_docker
      - install-protoc
      - run:
          name: Move to target folder then run tests
          command: cd credentials-verification-web && ./web-testing-script.sh
      - run:
          name: Move to target folder then run linting validation script
          command: cd credentials-verification-web && ./web-linting-validation-script.sh

  trigger-integration-tests:
    working_directory: ~/repo
    environment:
      BRANCH_TO_TRIGGER: "master"
      PROJECT_NAME_TO_TRIGGER: "atala-qa-automation"
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: trigger a job in atala-qa-automation project
          command: python trigger_tests.py
      - slack/status:
          # mention Mark Griffin (Product Owner), Jacek Kurkowski (QA)
          mentions: 'UFHNXC9RC,UGFJQ5ZBN'
          only_for_branches: 'develop'

  build-credentials-verification-android:
    working_directory: ~/repo
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - halt-step-if-not-changed:
          directories: "credentials-verification-android prism-sdk"
      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0

      - restore_cache:
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: cd credentials-verification-android && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - install-sbt
      - run:
          name: Assembly Prism Crypto
          command: cd prism-sdk && sbt prismCryptoJVM/assembly
      - run:
          name: Run Lint Tests
          command: cd credentials-verification-android && ./gradlew lint test
      - run:
          name: Run Unit Tests
          command: cd credentials-verification-android && ./gradlew test
      - run:
          name: Assemble APK
          command: cd credentials-verification-android && ./gradlew assembleDebug

      - store_test_results:
          path: credentials-verification-android/app/build/test-results
      # Upload APK
      - store_artifacts:
          path: credentials-verification-android/app/build/outputs/apk/debug/app-debug.apk

  build-credentials-verification-webextension:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-node-browsers
    steps:
      - checkout

      - halt-step-if-not-changed:
          directories: "credentials-verification credentials-verification-webextension prism-sdk"

      - run:
          name: Set environment variables
          command: echo export CHROME_VERSION=\"$(google-chrome --version)\" >> $BASH_ENV

      # Download and cache dependencies
      - restore_cache:
          keys:
            - webextension-cache-v2-{{ checksum "credentials-verification-webextension/build.sbt" }}-{{ checksum "credentials-verification-webextension/project/plugins.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - webextension-cache-v2-

      - install-coursier

      - install-scalafmt

      - scalafmt-test

      - run:
          name: Compile extension and its tests
          command: cd credentials-verification-webextension && sbt test:compile

      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
            - credentials-verification-webextension/target/scala-<< pipeline.parameters.scala-version >>/scalajs-bundler/main/node_modules
            - credentials-verification-webextension/target/scala-<< pipeline.parameters.scala-version >>/scalajs-bundler/test/node_modules
          key: webextension-cache-v2-{{ checksum "credentials-verification-webextension/build.sbt" }}-{{ checksum "credentials-verification-webextension/project/plugins.sbt" }}

      - run:
          name: Install test dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libnss3

      - run:
          name: Run Unit Tests
          command: |
            cd credentials-verification-webextension
            sbt test || sbt test

      - run:
          name: Package the extension to release
          command: cd credentials-verification-webextension && PROD=true sbt chromePackage

      - store_test_results:
          path: credentials-verification-webextension/target/test-reports

      - store_artifacts:
          path: credentials-verification-webextension/target/chrome/prism-wallet.zip

  build-prism-sdk:
    working_directory: ~/repo
    docker:
        - image: circleci/openjdk:8-jdk-node
    environment:
      SBT_OPTS: -Xmx2048m
    steps:
      - checkout

      - halt-step-if-not-changed:
          directories: "prism-sdk"

      # Download and cache dependencies	
      - restore_cache:
          keys:
            - prism-sdk-cache-{{ checksum "prism-sdk/build.sbt" }}-{{ checksum "prism-sdk/project/SdkBuild.scala" }}-{{ checksum "prism-sdk/project/Dependencies.scala" }}-{{ checksum "prism-sdk/project/plugins.sbt" }}-{{ checksum "prism-sdk/project/protoc.sbt" }}
            # fallback to using the latest cache if no exact match is found	
            - prism-sdk-cache-

      - install-coursier

      - install-scalafmt

      - scalafmt-test
        
      - run:
          name: Compile SDK and its tests
          command: |
            cd prism-sdk
            sbt compile test:compile
            
      - save_cache:
          paths:
            - ~/.cache/coursier
            - ~/.ivy2
            - ~/.m2
          key: prism-sdk-cache-{{ checksum "prism-sdk/build.sbt" }}-{{ checksum "prism-sdk/project/SdkBuild.scala" }}-{{ checksum "prism-sdk/project/Dependencies.scala" }}-{{ checksum "prism-sdk/project/plugins.sbt" }}-{{ checksum "prism-sdk/project/protoc.sbt" }}

      - run:
          name: Run unit tests
          command: cd prism-sdk && sbt coverage test

      - run:
          name: Generate code coverage reports
          command: cd prism-sdk && sbt coverageReport coverageAggregate

      - run:
          name: Aggregate test reports
          command: |
            cd prism-sdk

            # Aggregate every JVM test report under target/jvm/test-reports
            mkdir -p target/jvm/test-reports
            test -e connector/jvm/target/test-reports && mv connector/jvm/target/test-reports/* target/jvm/test-reports
            test -e credentials/jvm/target/test-reports && mv credentials/jvm/target/test-reports/* target/jvm/test-reports
            test -e identity/jvm/target/test-reports && mv identity/jvm/target/test-reports/* target/jvm/test-reports
            test -e crypto/jvm/target/test-reports && mv crypto/jvm/target/test-reports/* target/jvm/test-reports
            test -e protos/.jvm/target/test-reports && mv protos/.jvm/target/test-reports/* target/jvm/test-reports

            # Aggregate every JS test report under target/jvm/test-reports
            mkdir -p target/js/test-reports
            test -e connector/js/target/test-reports && mv connector/js/target/test-reports/* target/js/test-reports
            test -e credentials/js/target/test-reports && mv credentials/js/target/test-reports/* target/js/test-reports
            test -e identity/js/target/test-reports && mv identity/js/target/test-reports/* target/js/test-reports
            test -e crypto/js/target/test-reports && mv crypto/js/target/test-reports/* target/js/test-reports
            test -e protos/.js/target/test-reports && mv protos/.js/target/test-reports/* target/js/test-reports
            true

      - store_test_results:
          path: prism-sdk/target/jvm/test-reports
      - store_test_results:
          path: prism-sdk/target/js/test-reports

      # Store code coverage reports	
      - store_artifacts:
          path: prism-sdk/target/scala-<< pipeline.parameters.scala-version >>/scoverage-report

      - run:
          name: Generate documentation
          command: cd prism-sdk && sbt prismDocs/mdoc

      # Store generated documentation
      - store_artifacts:
          path: prism-sdk/prism-docs/target/mdoc

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build-credentials-verification
      - build-credentials-verification-android
      - build-credentials-verification-landing
      - build-credentials-verification-web
      - build-credentials-verification-webextension
      - build-prism-sdk
      - deploy-ecr-images:
          filters:
            branches:
              only:
                # Update .circleci/directories_changed.sh if you update this list
                - /develop.*/
                - /test.*/
                - /geud-test.*/
          requires:
            - build-credentials-verification-web
            - build-credentials-verification
      - rebuild-prism-env:
          intdemo-enabled: true
          geud-enabled: true
          filters:
            branches:
              only:
                - /develop.*/
          requires:
            - deploy-ecr-images
      - rebuild-prism-env:
          intdemo-enabled: true
          geud-enabled: false
          filters:
            branches:
              only:
                - /test.*/
          requires:
            - deploy-ecr-images
      - rebuild-prism-env:
          intdemo-enabled: false
          geud-enabled: true
          filters:
            branches:
              only:
                - /geud-test.*/
          requires:
            - deploy-ecr-images
      - trigger-integration-tests:
          filters:
            branches:
              only:
                - develop
