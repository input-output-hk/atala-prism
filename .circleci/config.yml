version: 2
jobs:
  build:
    docker:
      - image: openjdk:8
    working_directory: ~/repo
    steps:
      - run: mkdir -p /tmp/workspace

      - checkout

      - run:
          name: install coursier
          command: curl -L -o coursier https://git.io/vgvpD && chmod +x coursier

      - run:
          name: install scalafmt
          command: ./coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.0.0-RC4 -r bintray:scalameta/maven -o scalafmt --main org.scalafmt.cli.Cli

#      - run:
#          name: install bazel-remote-proxy
#          command: |
#            # if go is already installed
#            # go install github.com/notnoopci/bazel-remote-proxy
#
#            # otherwise download latest artifact
#            DOWNLOAD_URL="$(curl -sSL \
#               https://circleci.com/api/v1.1/project/github/notnoopci/bazel-remote-proxy/latest/artifacts?branch=master \
#               | grep -o -e "https://[^\"]*/bazel-remote-proxy-$(uname -s)_$(uname -m)" \
#            )"
#
#            curl -o ~/bazel-remote-proxy "$DOWNLOAD_URL"
#            chmod +x ~/bazel-remote-proxy

      - run:
          name: install bazel
          command: ~/repo/docker/installBazel

#      - run:
#          name: setup bazel remote proxy
#          command: ~/bazel-remote-proxy -backend circleci:// -bind localhost:7654
#          background: true

      - run:
          name: build
          command: |
            bazel build --jobs=1 //atala/...
#            bazel \
#              --host_jvm_args=-Dbazel.DigestFunction=sha256 \
#              build \
#              --jobs=2 \
#              --spawn_strategy=standalone \
#              --strategy=Javac=standalone \
#              --genrule_strategy=standalone \
#              --remote_http_cache=http://localhost:7654 \
#              //...

      - run:
          name: test
          command: |
            bazel test --jobs=1 //atala/... --test_output=errors
#            bazel \
#              --host_jvm_args=-Dbazel.DigestFunction=sha256 \
#              test \
#              --jobs=2 \
#              --spawn_strategy=standalone \
#              --strategy=Javac=standalone \
#              --genrule_strategy=standalone \
#              --remote_http_cache=http://localhost:7654 \
#              //... --test_output=errors

      - run:
          name: check that the code is formatted properly
          command: ./scalafmt --test

      - run:
          name: create library jar
          command: |
            bazel build --jobs=1 //atala:atala_deploy.jar
#            bazel \
#              --host_jvm_args=-Dbazel.DigestFunction=sha256 \
#              build \
#              --jobs=2 \
#              --spawn_strategy=standalone \
#              --strategy=Javac=standalone \
#              --genrule_strategy=standalone \
#              --remote_http_cache=http://localhost:7654 \
#              //atala:atala_deploy.jar

      - run:
          name: generate the scaladocs
          command: |
            bazel build --jobs=1 //atala:atala_docs

      - run:
          name: move library jar to workspace
          command: mv bazel-bin/atala/atala_deploy.jar /tmp/workspace/

      - run:
          name: move scaladocs to workspace
          command: mkdir -p /tmp/workspace/docs && mv bazel-bin/atala/atala_docs.html/* /tmp/workspace/docs/

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - atala_deploy.jar
            - docs
  deploy:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: tests
          command: pwd;ls -R
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy to S3
          command: aws s3 cp /tmp/workspace/atala_deploy.jar s3://cef-circle-ci/
  deploy-docs:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: tests
          command: pwd;ls -R
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy scaladocs to S3
          command: aws s3 cp --recursive /tmp/workspace/docs/ s3://cef-circle-ci/scaladocs/develop/

  build-credentials-verification:
    working_directory: ~/repo
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Pre-download postgres image
          command: docker pull postgres:11.5

      - run:
          name: install mill
          command: sh -c '(echo "#!/usr/bin/env sh" && curl -L https://github.com/lihaoyi/mill/releases/download/0.4.1/0.4.1) > ~/mill && chmod +x ~/mill'

      - run:
          name: test
          command: cd credentials-verification && ~/mill __.test

  build-enterprise-web:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - restore_cache:
          key: my-project-{{ .Branch }}-{{ checksum "enterprise-web/package-lock.json" }}
      - run: cd enterprise-web && npm install
      - save_cache:
          key: my-project-{{ .Branch }}-{{ checksum "enterprise-web/package-lock.json" }}
          paths:
            - "enterprise-web/node_modules"
      - run: cd enterprise-web && npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run: cd enterprise-web && npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js

  trigger-atala-qa-automation:
    working_directory: ~/repo
    environment:
      BRANCH_TO_TRIGGER: "master"
      PROJECT_NAME_TO_TRIGGER: "atala-qa-automation"
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: trigger a job in atala-qa-automation project
          command: python trigger_tests.py

  build-credentials-verification-android:
    working_directory: ~/repo
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0
      - restore_cache:
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: cd credentials-verification-android && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - run:
          name: Run Tests
          command: cd credentials-verification-android && ./gradlew lint test

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: develop
      - deploy-docs:
          requires:
            - build
          filters:
            branches:
              only: develop
#      - build-enterprise-web
      - trigger-atala-qa-automation:
          filters:
            branches:
              only: develop
      - build-credentials-verification
      - build-credentials-verification-android
