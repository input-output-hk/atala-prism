version: 2.1
jobs:

  deploy-ecr-images:
    docker:
      - image: inputoutput/scala-mill:2.12.10-0.6.1-0.12.24
    steps:
      - checkout

      - setup_remote_docker

      - restore_cache:
          key: ivy-cache-{{ checksum "credentials-verification/build.sc" }}

      - run:
          name: Set tag convention
          command: |
            branchPrefix=$(git rev-parse --abbrev-ref HEAD | sed -E 's/(^ATA\-[0-9]+).*/\1/' | tr '[:upper:]' '[:lower:]')
            revCount=$(git rev-list HEAD --count)
            shaShort=$(git rev-parse --short HEAD)
            tag="${branchPrefix}-${revCount}-${shaShort}"
            echo "export TAG=$tag" >> $BASH_ENV;
            echo "export ENV=$branchPrefix" >> $BASH_ENV;
            . $BASH_ENV && echo "Env short name set to $ENV. Image tag set to $TAG"

      - run:
          name: Create web assembly
          command: |
            cd credentials-verification-web
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Create landing assembly
          command: |
            cd credentials-verification-landing
            npm ci --production
            CI=false GENERATE_SOURCEMAP=false npm run build

      - run:
          name: Create node assembly
          command: |
            cd credentials-verification
            mill -i node.assembly
            cp out/node/assembly/dest/out.jar out/node/assembly/dest/node.jar

      - run:
          name: Create connector assembly
          command: |
            cd credentials-verification
            mill -i connector.assembly
            cp out/connector/assembly/dest/out.jar out/connector/assembly/dest/connector.jar

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - run:
          name: Build and push credentials-verification-web
          command: |
            docker build -f credentials-verification-web/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG} credentials-verification-web
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/web:${TAG}

      - run:
          name: Build and push credentials-verification-landing
          command: |
            docker build -f credentials-verification-landing/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG} credentials-verification-landing
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/landing:${TAG}

      - run:
          name: Build and push credentials-verification/node
          command: |
            docker build -f credentials-verification/node/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/node:${TAG} credentials-verification/out/node/assembly/dest/
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/node:${TAG}

      - run:
          name: Build and push credentials-verification/connector
          command: |
            docker build -f credentials-verification/connector/Dockerfile -t 895947072537.dkr.ecr.us-east-2.amazonaws.com/connector:${TAG} credentials-verification/out/connector/assembly/dest/
            docker push 895947072537.dkr.ecr.us-east-2.amazonaws.com/connector:${TAG}

      - run:
          name: Rebuild GEUD environment
          command: |
            cd credentials-verification/infra/services
            ./env.sh -t $ENV
            ./env.sh -A $ENV

      - run:
          name: Rebuild intdemo environment
          command: |
            cd credentials-verification/infra/stage/services/intdemo/
            ./intdemo.sh -t $ENV
            ./intdemo.sh -A $ENV

  build-credentials-verification:
    working_directory: ~/repo
    docker:
      - image: inputoutput/scala-mill:2.12.10-0.6.1
      - image: postgres:11.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout

      - restore_cache:
          key: ivy-cache-{{ checksum "credentials-verification/build.sc" }}

      - run:
          name: Test credentials-verification components
          command: cd credentials-verification && mill -i __.compile && mill -i __.test

      - save_cache:
          key: ivy-cache-{{ checksum "credentials-verification/build.sc" }}
          paths:
            - "~/.ivy2/cache"

  build-credentials-verification-web:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout

      - setup_remote_docker
      - run:
          name: "Install protoc"
          command: |
              protoc_version=3.11.4
              archive=protoc-${protoc_version}-linux-x86_64
              curl -O -L https://github.com/protocolbuffers/protobuf/releases/download/v${protoc_version}/$archive.zip
              sudo unzip -d '/usr/local' $archive.zip 'bin/*' 'include/*'
              rm -rf $archive.zip
      - run:
          name: "Install protoc-gen-grpc-web"
          command: |
              grpcweb_version=1.0.7
              archive=protoc-gen-grpc-web-${grpcweb_version}-linux-x86_64
              curl -O -L https://github.com/grpc/grpc-web/releases/download/${grpcweb_version}/$archive
              chmod +x $archive
              sudo mv $archive /usr/local/bin/protoc-gen-grpc-web
      - run:
          name: Move to target folder then run tests
          command: cd credentials-verification-web && ./web-testing-script.sh
      - run:
          name: Move to target folder then run linting validation script
          command: cd credentials-verification-web && ./web-linting-validation-script.sh

  trigger-atala-qa-automation:
    working_directory: ~/repo
    environment:
      BRANCH_TO_TRIGGER: "master"
      PROJECT_NAME_TO_TRIGGER: "atala-qa-automation"
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: trigger a job in atala-qa-automation project
          command: python trigger_tests.py

  build-credentials-verification-android:
    working_directory: ~/repo
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0
      - restore_cache:
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: cd credentials-verification-android && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "credentials-verification-android/build.gradle" }}-{{ checksum  "credentials-verification-android/app/build.gradle" }}
      - run:
          name: Run Lint Tests
          command: cd credentials-verification-android && ./gradlew lint test
      - run:
          name: Run Unit Tests
          command: cd credentials-verification-android && ./gradlew test

  build-credentials-verification-webextension:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-node
    steps:
      - checkout

      # TODO: Remove once https://github.com/lucidd/scala-js-chrome/pull/46 is merged
      # Install custom plugin
      - run: git clone https://github.com/AlexITC/scala-js-chrome.git --branch add-content-script --single-branch
      - run: git branch
      - run: cd scala-js-chrome && sbt publishLocal

      # Download and cache dependencies
      - restore_cache:
          keys:
            - webextension-cache-{{ checksum "credentials-verification-webextension/build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - webextension-cache-

      - run: cd credentials-verification-webextension && sbt test:compile

      - save_cache:
          paths:
            - ~/.m2
            - ~/.ivy2/cache
          key: webextension-cache-{{ checksum "credentials-verification-webextension/build.sbt" }}

      - run:
          name: Run Unit Tests
          command: cd credentials-verification-webextension && sbt test

      - run:
          name: Package extension
          command: cd credentials-verification-webextension && sbt chromePackage

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build-credentials-verification-web
      - build-credentials-verification
      - build-credentials-verification-android
#      - build-credentials-verification-webextension
      - deploy-ecr-images:
          filters:
            branches:
              only:
                - /develop.*/
                - /test.*/
          requires:
            - build-credentials-verification-web
            - build-credentials-verification
